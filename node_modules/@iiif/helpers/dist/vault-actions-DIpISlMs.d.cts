import * as typesafe_actions from 'typesafe-actions';
import { ActionType, PayloadAction } from 'typesafe-actions';
import { SpecificResource, InternationalString, AnnotationCollection, ContentResource, Selector, Manifest, Canvas, AnnotationPage, Annotation, Service, ResourceProvider, Collection } from '@iiif/presentation-3';
import { CollectionNormalized, ManifestNormalized, CanvasNormalized, AnnotationPageNormalized, AnnotationNormalized, RangeNormalized, ServiceNormalized, ResourceProviderNormalized } from '@iiif/presentation-3-normalized';

declare const ADD_MAPPING = "@iiif/ADD_MAPPING";
declare const ADD_MAPPINGS = "@iiif/ADD_MAPPINGS";
declare const addMapping: typesafe_actions.PayloadActionCreator<"@iiif/ADD_MAPPING", {
    id: string;
    type: string;
}>;
declare const addMappings: typesafe_actions.PayloadActionCreator<"@iiif/ADD_MAPPINGS", {
    mapping: {
        [id: string]: string;
    };
}>;
declare const mappingActions: {
    addMapping: typesafe_actions.PayloadActionCreator<"@iiif/ADD_MAPPING", {
        id: string;
        type: string;
    }>;
    addMappings: typesafe_actions.PayloadActionCreator<"@iiif/ADD_MAPPINGS", {
        mapping: {
            [id: string]: string;
        };
    }>;
};
type MappingActions = ActionType<typeof mappingActions>;

declare const IMPORT_ENTITIES = "@iiif/IMPORT_ENTITIES";
declare const MODIFY_ENTITY_FIELD = "@iiif/MODIFY_ENTITY_FIELD";
declare const REORDER_ENTITY_FIELD = "@iiif/REORDER_ENTITY_FIELD";
declare const ADD_REFERENCE = "@iiif/ADD_REFERENCE";
declare const UPDATE_REFERENCE = "@iiif/UPDATE_REFERENCE";
declare const REMOVE_REFERENCE = "@iiif/REMOVE_REFERENCE";
declare const ADD_METADATA = "@iiif/ADD_METADATA";
declare const REMOVE_METADATA = "@iiif/REMOVE_METADATA";
declare const UPDATE_METADATA = "@iiif/UPDATE_METADATA";
declare const REORDER_METADATA = "@iiif/REORDER_METADATA";
declare const importEntities: typesafe_actions.PayloadActionCreator<"@iiif/IMPORT_ENTITIES", {
    entities: Partial<Entities>;
}>;
declare const modifyEntityField: typesafe_actions.PayloadActionCreator<"@iiif/MODIFY_ENTITY_FIELD", {
    type: keyof Entities;
    id: string;
    key: string;
    value: any;
}>;
declare const reorderEntityField: typesafe_actions.PayloadActionCreator<"@iiif/REORDER_ENTITY_FIELD", {
    type: keyof Entities;
    id: string;
    key: string;
    startIndex: number;
    endIndex: number;
}>;
declare const addReference: typesafe_actions.PayloadActionCreator<"@iiif/ADD_REFERENCE", {
    type: keyof Entities;
    id: string;
    key: string;
    index?: number | undefined;
    reference: SpecificResource | ({
        id: string;
        type: string;
    } & any);
}>;
declare const removeReference: typesafe_actions.PayloadActionCreator<"@iiif/REMOVE_REFERENCE", {
    type: keyof Entities;
    id: string;
    key: string;
    index?: number | undefined;
    reference: SpecificResource | ({
        id: string;
        type: string;
    } & any);
}>;
declare const updateReference: typesafe_actions.PayloadActionCreator<"@iiif/UPDATE_REFERENCE", {
    type: keyof Entities;
    id: string;
    key: string;
    index: number;
    reference: SpecificResource | ({
        id: string;
        type: string;
    } & any);
}>;
declare const addMetadata: typesafe_actions.PayloadActionCreator<"@iiif/ADD_METADATA", {
    id: string;
    type: keyof Entities;
    beforeIndex?: number | undefined;
    label: InternationalString;
    value: InternationalString;
}>;
declare const updateMetadata: typesafe_actions.PayloadActionCreator<"@iiif/UPDATE_METADATA", {
    id: string;
    type: keyof Entities;
    atIndex?: number | undefined;
    label: InternationalString;
    value: InternationalString;
}>;
declare const removeMetadata: typesafe_actions.PayloadActionCreator<"@iiif/REMOVE_METADATA", {
    id: string;
    type: keyof Entities;
    atIndex: number;
}>;
declare const reorderMetadata: typesafe_actions.PayloadActionCreator<"@iiif/REORDER_METADATA", {
    id: string;
    type: keyof Entities;
    startIndex: number;
    endIndex: number;
}>;
declare const entityActions: {
    importEntities: typesafe_actions.PayloadActionCreator<"@iiif/IMPORT_ENTITIES", {
        entities: Partial<Entities>;
    }>;
    modifyEntityField: typesafe_actions.PayloadActionCreator<"@iiif/MODIFY_ENTITY_FIELD", {
        type: keyof Entities;
        id: string;
        key: string;
        value: any;
    }>;
    reorderEntityField: typesafe_actions.PayloadActionCreator<"@iiif/REORDER_ENTITY_FIELD", {
        type: keyof Entities;
        id: string;
        key: string;
        startIndex: number;
        endIndex: number;
    }>;
    addReference: typesafe_actions.PayloadActionCreator<"@iiif/ADD_REFERENCE", {
        type: keyof Entities;
        id: string;
        key: string;
        index?: number | undefined;
        reference: SpecificResource | ({
            id: string;
            type: string;
        } & any);
    }>;
    removeReference: typesafe_actions.PayloadActionCreator<"@iiif/REMOVE_REFERENCE", {
        type: keyof Entities;
        id: string;
        key: string;
        index?: number | undefined;
        reference: SpecificResource | ({
            id: string;
            type: string;
        } & any);
    }>;
    updateReference: typesafe_actions.PayloadActionCreator<"@iiif/UPDATE_REFERENCE", {
        type: keyof Entities;
        id: string;
        key: string;
        index: number;
        reference: SpecificResource | ({
            id: string;
            type: string;
        } & any);
    }>;
    addMetadata: typesafe_actions.PayloadActionCreator<"@iiif/ADD_METADATA", {
        id: string;
        type: keyof Entities;
        beforeIndex?: number | undefined;
        label: InternationalString;
        value: InternationalString;
    }>;
    removeMetadata: typesafe_actions.PayloadActionCreator<"@iiif/REMOVE_METADATA", {
        id: string;
        type: keyof Entities;
        atIndex: number;
    }>;
    updateMetadata: typesafe_actions.PayloadActionCreator<"@iiif/UPDATE_METADATA", {
        id: string;
        type: keyof Entities;
        atIndex?: number | undefined;
        label: InternationalString;
        value: InternationalString;
    }>;
    reorderMetadata: typesafe_actions.PayloadActionCreator<"@iiif/REORDER_METADATA", {
        id: string;
        type: keyof Entities;
        startIndex: number;
        endIndex: number;
    }>;
};
type EntityActions = ActionType<typeof entityActions>;

declare const SET_META_VALUE = "@iiif/SET_META_VALUE";
declare const SET_META_VALUE_DYNAMIC = "@iiif/SET_META_VALUE_DYNAMIC";
declare const UNSET_META_VALUE = "@iiif/UNSET_META_VALUE";
declare const metaActions: {
    setMetaValue: typesafe_actions.PayloadActionCreator<"@iiif/SET_META_VALUE", {
        id: string;
        meta: string;
        key: string;
        value: any;
    }>;
    setMetaValueDynamic: typesafe_actions.PayloadActionCreator<"@iiif/SET_META_VALUE_DYNAMIC", {
        id: string;
        meta: string;
        key: string;
        updateValue: (oldValue: any) => any;
    }>;
    unsetMetaValue: typesafe_actions.PayloadActionCreator<"@iiif/UNSET_META_VALUE", {
        id: string;
        meta: string;
        key: string;
    }>;
};
type MetaActions = ActionType<typeof metaActions>;

declare const RESOURCE_ERROR = "RESOURCE_ERROR";
declare const RESOURCE_LOADING = "RESOURCE_LOADING";
declare const RESOURCE_READY = "RESOURCE_READY";
declare const REQUEST_RESOURCE = "@iiif/REQUEST_RESOURCE";
declare const REQUEST_ERROR = "@iiif/REQUEST_ERROR";
declare const REQUEST_MISMATCH = "@iiif/REQUEST_MISMATCH";
declare const REQUEST_COMPLETE = "@iiif/REQUEST_COMPLETE";
declare const REQUEST_OFFLINE_RESOURCE = "@iiif/REQUEST_OFFLINE_RESOURCE";
declare const requestResource: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_RESOURCE", {
    id: string;
}>;
declare const requestError: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_ERROR", {
    id: string;
    message: string;
}>;
declare const requestMismatch: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_MISMATCH", {
    requestId: string;
    actualId: string;
}>;
declare const requestComplete: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_COMPLETE", {
    id: string;
}>;
declare const requestOfflineResource: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_OFFLINE_RESOURCE", {
    id: string;
    entity: unknown;
}>;
declare const requestActions: {
    requestResource: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_RESOURCE", {
        id: string;
    }>;
    requestError: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_ERROR", {
        id: string;
        message: string;
    }>;
    requestMismatch: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_MISMATCH", {
        requestId: string;
        actualId: string;
    }>;
    requestComplete: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_COMPLETE", {
        id: string;
    }>;
    requestOfflineResource: typesafe_actions.PayloadActionCreator<"@iiif/REQUEST_OFFLINE_RESOURCE", {
        id: string;
        entity: unknown;
    }>;
};
type RequestActions = ActionType<typeof requestActions>;

declare global {
    interface A {
    }
}
type MetaState = Record<string, Record<string, Record<string, any>>>;
type RequestState = {
    [id: string]: {
        loadingState: 'RESOURCE_ERROR' | 'RESOURCE_LOADING' | 'RESOURCE_READY';
        uriMismatch: boolean;
        requestUri: string;
        resourceUri: string;
        error?: string;
    };
};
type PaginationState = {
    pages: Array<{
        id: string;
        type: "Collection";
        order: number;
        startIndex: number;
        pageLength: number;
    }>;
    page: number;
    totalItems?: number;
    totalPages?: number;
    currentLength: number;
    next: string | null;
    previous: string | null;
    currentPage: string | null;
    currentPageIndex: number | null;
    isFullyLoaded: boolean;
    isFetching: boolean;
    error?: any;
};
type NormalizedEntity = CollectionNormalized | ManifestNormalized | CanvasNormalized | AnnotationPageNormalized | AnnotationCollection | AnnotationNormalized | ContentResource | RangeNormalized | ServiceNormalized | ResourceProviderNormalized | Selector;
type RefToNormalized<Ref extends {
    type?: string;
}> = Ref['type'] extends 'Manifest' ? ManifestNormalized : Ref['type'] extends 'Canvas' ? CanvasNormalized : Ref['type'] extends 'AnnotationPage' ? AnnotationPageNormalized : Ref['type'] extends 'AnnotationCollection' ? AnnotationCollection : Ref['type'] extends 'Annotation' ? AnnotationNormalized : Ref['type'] extends 'Range' ? RangeNormalized : Ref['type'] extends 'Service' ? ServiceNormalized : Ref['type'] extends 'ContentResource' ? ContentResource : Ref['type'] extends 'ResourceProvider' ? ResourceProviderNormalized : Ref['type'] extends 'Collection' ? CollectionNormalized : any;
type RefToFull<Ref extends {
    type?: string;
}> = Ref['type'] extends 'Manifest' ? Manifest : Ref['type'] extends 'Canvas' ? Canvas : Ref['type'] extends 'AnnotationPage' ? AnnotationPage : Ref['type'] extends 'AnnotationCollection' ? AnnotationCollection : Ref['type'] extends 'Annotation' ? Annotation : Ref['type'] extends 'Range' ? Range : Ref['type'] extends 'Service' ? Service : Ref['type'] extends 'ContentResource' ? ContentResource : Ref['type'] extends 'ResourceProvider' ? ResourceProvider : Ref['type'] extends 'Collection' ? Collection : any;
type Entities = {
    Collection: {
        [id: string]: CollectionNormalized;
    };
    Manifest: {
        [id: string]: ManifestNormalized;
    };
    Canvas: {
        [id: string]: CanvasNormalized;
    };
    AnnotationPage: {
        [id: string]: AnnotationPageNormalized;
    };
    AnnotationCollection: {
        [id: string]: AnnotationCollection;
    };
    Annotation: {
        [id: string]: AnnotationNormalized;
    };
    ContentResource: {
        [id: string]: ContentResource;
    };
    Range: {
        [id: string]: RangeNormalized;
    };
    Service: {
        [id: string]: any;
    };
    Selector: {
        [id: string]: Selector;
    };
    Agent: {
        [id: string]: ResourceProviderNormalized;
    };
};
type EntityStore<Meta extends MetaState = MetaState> = {
    entities: Entities;
    mapping: Record<string, string>;
    requests: RequestState;
    meta: Meta;
};
type IIIFStore<Meta extends MetaState = MetaState> = {
    iiif: EntityStore<Meta>;
};
type AllActions = MappingActions | RequestActions | EntityActions | MetaActions;
type Reducer<TState, TAction> = (state: TState | undefined, action: TAction) => TState;
type ActionFromType<Type, Actions extends PayloadAction<any, any> = AllActions> = Actions extends {
    type: Type;
} ? Actions : never;

declare const BATCH_ACTIONS = "@iiif/BATCH";
declare const BATCH_IMPORT = "@iiif/BATCH_IMPORT";
declare const batchActions: typesafe_actions.PayloadActionCreator<"@iiif/BATCH", {
    actions: AllActions[];
}>;
declare const batchImport: typesafe_actions.PayloadActionCreator<"@iiif/BATCH_IMPORT", {
    state: EntityStore;
}>;
type BatchAction = ActionType<typeof batchActions | typeof batchImport>;

export { REQUEST_OFFLINE_RESOURCE as $, type AllActions as A, type BatchAction as B, ADD_MAPPING as C, ADD_MAPPINGS as D, type Entities as E, addMapping as F, addMappings as G, mappingActions as H, type IIIFStore as I, type MappingActions as J, SET_META_VALUE_DYNAMIC as K, UNSET_META_VALUE as L, type MetaState as M, type NormalizedEntity as N, metaActions as O, type PaginationState as P, type MetaActions as Q, type RequestState as R, SET_META_VALUE as S, RESOURCE_ERROR as T, UPDATE_REFERENCE as U, RESOURCE_LOADING as V, RESOURCE_READY as W, REQUEST_RESOURCE as X, REQUEST_ERROR as Y, REQUEST_MISMATCH as Z, REQUEST_COMPLETE as _, type RefToNormalized as a, requestResource as a0, requestError as a1, requestMismatch as a2, requestComplete as a3, requestOfflineResource as a4, requestActions as a5, type RequestActions as a6, BATCH_ACTIONS as a7, BATCH_IMPORT as a8, batchActions as a9, batchImport as aa, type RefToFull as b, type EntityStore as c, type Reducer as d, type ActionFromType as e, IMPORT_ENTITIES as f, MODIFY_ENTITY_FIELD as g, REORDER_ENTITY_FIELD as h, ADD_REFERENCE as i, REMOVE_REFERENCE as j, ADD_METADATA as k, REMOVE_METADATA as l, UPDATE_METADATA as m, REORDER_METADATA as n, importEntities as o, modifyEntityField as p, addReference as q, reorderEntityField as r, removeReference as s, addMetadata as t, updateReference as u, updateMetadata as v, removeMetadata as w, reorderMetadata as x, entityActions as y, type EntityActions as z };
