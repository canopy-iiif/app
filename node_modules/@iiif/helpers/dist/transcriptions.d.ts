import { CanvasNormalized, AnnotationPageNormalized, ManifestNormalized } from '@iiif/presentation-3-normalized';
import { C as CompatVault } from './compat-Amh8ckgU.js';
import { Canvas, AnnotationPage, Manifest } from '@iiif/presentation-3';
import { f as ParsedSelector } from './selector-types-Byn6bDja.js';
import './vault-DPnFP2uJ.js';
import './vault-actions-DIpISlMs.js';
import 'typesafe-actions';
import '@iiif/parser';
import './vault-store.js';
import 'zustand/vanilla';
import './vault.js';

interface Transcription {
    id: string;
    source: any;
    plaintext: string;
    segments: Array<{
        text: string;
        textRaw: string;
        granularity?: 'word' | 'line' | 'paragraph' | 'block' | 'page';
        language?: string;
        selector?: ParsedSelector;
        startRaw?: string;
        endRaw?: string;
    }>;
}
declare function canvasHasTranscriptionSync(vault: CompatVault, canvasRef: Canvas | CanvasNormalized | string, annotationPages?: AnnotationPage[] | AnnotationPageNormalized[]): boolean;
declare function canvasLoadExternalAnnotationPages(vault: CompatVault, canvasRef: Canvas): Promise<AnnotationPage[]>;
declare function canvasLoadExternalAnnotationPages(vault: CompatVault, canvasRef: CanvasNormalized): Promise<AnnotationPageNormalized[]>;
declare function timeStampToSeconds(time: string): number;
declare function vttToTranscription(vtt: string, id: string): Promise<Transcription | null>;
declare function annotationPageToTranscription(vault: CompatVault, annotationPage: AnnotationPageNormalized | AnnotationPage): Promise<Transcription | null>;
declare function getCanvasTranscription(vault: CompatVault, canvasRef: Canvas, networkCache?: Record<string, any>): Promise<Transcription | null>;
declare function manifestHasTranscriptions(vault: CompatVault, manifest: string | {
    id: string;
    type: string;
} | ManifestNormalized | Manifest, pagesToCheck?: number): Promise<boolean>;

export { annotationPageToTranscription, canvasHasTranscriptionSync, canvasLoadExternalAnnotationPages, getCanvasTranscription, manifestHasTranscriptions, timeStampToSeconds, vttToTranscription };
