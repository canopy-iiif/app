import { A as AllActions, N as NormalizedEntity, E as Entities, I as IIIFStore } from './vault-actions-DIpISlMs.js';
import { b as Vault } from './vault-DPnFP2uJ.js';
import { Reference } from '@iiif/presentation-3';
import 'typesafe-actions';
import '@iiif/presentation-3-normalized';
import '@iiif/parser';
import './vault-store.js';
import 'zustand/vanilla';

declare const actionListFromResource: (id: string, response: unknown) => AllActions[];

declare function areInputsEqual(newInputs: readonly unknown[] | unknown, lastInputs: readonly unknown[] | unknown): boolean;

declare function createFetchHelper<T>(vault: Vault, fetcher: (url: string, options?: T) => any | Promise<any>, { waitTimeout }?: {
    waitTimeout?: number;
}): (url: string, options?: T, mapper?: (r: any) => any) => NormalizedEntity | undefined | Promise<NormalizedEntity | undefined>;

declare function getDefaultEntities(): Entities;

declare function resolveIfExists<T extends NormalizedEntity>(state: IIIFStore, url: string, parent?: any): T | undefined;

declare function resolveList<T extends NormalizedEntity>(state: IIIFStore, items: Reference<T>[]): Array<NormalizedEntity>;

export { actionListFromResource, areInputsEqual, createFetchHelper, getDefaultEntities, resolveIfExists, resolveList };
