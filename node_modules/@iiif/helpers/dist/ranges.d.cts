import { InternationalString, Reference, SpecificResource, Range } from '@iiif/presentation-3';
import { RangeNormalized, ManifestNormalized } from '@iiif/presentation-3-normalized';
import { C as CompatVault } from './compat-CDGN4K25.cjs';
import './vault-CMO9TMRk.cjs';
import './vault-actions-DIpISlMs.cjs';
import 'typesafe-actions';
import '@iiif/parser';
import './vault-store.cjs';
import 'zustand/vanilla';
import './vault.cjs';

declare function createRangeHelper(vault?: CompatVault): {
    findFirstCanvasFromRange: (range: RangeNormalized) => {
        type: "Canvas";
        id: string;
    } | null;
    findAllCanvasesInRange: (range: RangeNormalized) => {
        type: "Canvas";
        id: string;
    }[];
    findManifestSelectedRange: (manifest: ManifestNormalized, canvasId: string) => RangeNormalized | null;
    findSelectedRange: (range: RangeNormalized, canvasId: string) => RangeNormalized | null;
    rangesToTableOfContentsTree: (rangeRefs: RangeNormalized[], label?: InternationalString | null) => RangeTableOfContentsNode | null;
    rangeToTableOfContentsTree: (rangeRef: RangeNormalized | Reference<'Range'>) => RangeTableOfContentsNode | null;
};
declare function findFirstCanvasFromRange(vault: CompatVault, range: RangeNormalized): null | Reference<'Canvas'>;
declare function findFirstCanvasFromRangeWithSelector(vault: CompatVault, range: RangeNormalized): null | SpecificResource<Reference<'Canvas'>>;
declare function findAllCanvasesInRange(vault: CompatVault, range: RangeNormalized): Array<Reference<'Canvas'>>;
declare function findManifestSelectedRange(vault: CompatVault, manifest: ManifestNormalized, canvasId: string): null | RangeNormalized;
declare function findSelectedRange(vault: CompatVault, range: RangeNormalized, canvasId: string): null | RangeNormalized;
interface RangeTableOfContentsNode {
    id: string;
    type: 'Canvas' | 'Range';
    label: InternationalString | null;
    resource?: SpecificResource;
    untitled?: boolean;
    isCanvasLeaf: boolean;
    isRangeLeaf: boolean;
    isVirtual?: boolean;
    firstCanvas?: SpecificResource<Reference<'Canvas'>> | null;
    items?: Array<RangeTableOfContentsNode>;
}
declare function rangesToTableOfContentsTree(vault: CompatVault, rangeRefs: RangeNormalized[] | Range[] | Reference<'Range'>[], label?: InternationalString | null): RangeTableOfContentsNode | null;
declare function rangeToTableOfContentsTree(vault: CompatVault, rangeRef: undefined | null | Range | RangeNormalized | Reference<'Range'>, seenIds?: string[]): RangeTableOfContentsNode | null;

export { type RangeTableOfContentsNode, createRangeHelper, findAllCanvasesInRange, findFirstCanvasFromRange, findFirstCanvasFromRangeWithSelector, findManifestSelectedRange, findSelectedRange, rangeToTableOfContentsTree, rangesToTableOfContentsTree };
