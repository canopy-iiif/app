import { W3CAnnotationTarget, Selector, ImageApiSelector } from '@iiif/presentation-3';
import { S as SupportedTarget } from './target-types-C7sWk-6g.js';
import { f as ParsedSelector, S as SvgShapeType } from './selector-types-Byn6bDja.js';
export { B as BoxSelector, P as PointSelector, R as RotationSelector, b as SelectorStyle, a as SupportedSelector, e as SupportedSelectors, c as SvgSelector, d as TemporalBoxSelector, T as TemporalSelector } from './selector-types-Byn6bDja.js';

declare function expandTarget(target: W3CAnnotationTarget | W3CAnnotationTarget[], options?: {
    typeMap?: Record<string, string>;
    domParser?: DOMParser;
    svgPreprocessor?: (svg: string) => string;
}): SupportedTarget;

declare function parseSelector(source: Selector | Selector[], { domParser, svgPreprocessor, iiifRenderingHints, }?: {
    domParser?: DOMParser;
    svgPreprocessor?: (svg: string) => string;
    iiifRenderingHints?: ImageApiSelector;
}): ParsedSelector;
type SelectorElement = {
    element: SVGElement;
    points: [number, number][];
    shapeType: SvgShapeType;
};
declare function isImageApiSelector(t: unknown): t is ImageApiSelector;
/**
 * Parse rotation "90", "180", "!90"
 */
declare function parseRotation(input: string): number;

export { ParsedSelector, type SelectorElement, SupportedTarget, SvgShapeType, expandTarget, isImageApiSelector, parseRotation, parseSelector };
