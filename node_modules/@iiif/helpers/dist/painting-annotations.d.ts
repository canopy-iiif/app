import { InternationalString, IIIFExternalWebResource, SpecificResource, ContentResource, ChoiceBody } from '@iiif/presentation-3';
import { AnnotationNormalized, CanvasNormalized } from '@iiif/presentation-3-normalized';
import { C as CompatVault } from './compat-Amh8ckgU.js';
import './vault-DPnFP2uJ.js';
import './vault-actions-DIpISlMs.js';
import 'typesafe-actions';
import '@iiif/parser';
import './vault-store.js';
import 'zustand/vanilla';
import './vault.js';

interface SingleChoice {
    type: 'single-choice';
    label?: InternationalString;
    items: Array<{
        id: string;
        label?: InternationalString;
        selected?: true;
    }>;
}
interface ComplexChoice {
    type: 'complex-choice';
    items: SingleChoice[];
}
type ChoiceDescription = SingleChoice | ComplexChoice;
interface Paintables {
    choice: ChoiceDescription | null;
    allChoices: ComplexChoice | null;
    types: string[];
    items: Array<{
        type: string;
        resource: IIIFExternalWebResource | SpecificResource;
        annotationId: string;
        annotation: AnnotationNormalized;
        target: any;
        selector: any;
    }>;
}

declare function createPaintingAnnotationsHelper(vault?: CompatVault): {
    getAllPaintingAnnotations: (canvasOrId: string | CanvasNormalized | undefined | null) => AnnotationNormalized[];
    getPaintables: (paintingAnnotationsOrCanvas: string | CanvasNormalized | AnnotationNormalized[], enabledChoices?: string[]) => Paintables;
    extractChoices: (paintingAnnotationsOrCanvas: string | CanvasNormalized | AnnotationNormalized[]) => ChoiceDescription | null;
};

declare function parseSpecificResource(resource: ContentResource): [ContentResource | ChoiceBody, {
    selector?: any;
}];

export { type ChoiceDescription, type ComplexChoice, type Paintables, type SingleChoice, createPaintingAnnotationsHelper, parseSpecificResource };
