import * as zustand_vanilla from 'zustand/vanilla';
import { SearchService, SearchServiceAutocomplete, SearchServiceAutocompleteResponse, SearchServiceAutocompleteQueryParams, Manifest, SearchServiceCommonHitSelectors, SearchServiceQueryParams, SearchServiceSearchResponse } from '@iiif/presentation-3';
import { ManifestNormalized } from '@iiif/presentation-3-normalized';

type Search1Service = SearchService & {
    service?: SearchServiceAutocomplete | SearchServiceAutocomplete[] | undefined;
};
interface Search1AutocompleteStore {
    hasAutocomplete: boolean;
    endpoint: string | undefined;
    results: SearchServiceAutocompleteResponse['terms'];
    lastQuery: SearchServiceAutocompleteQueryParams | null;
    loading: boolean;
    error: boolean;
    errorMessage: string;
    ignored: string[];
    setSearchService: (service: Search1Service) => void;
    clearSearch: () => void;
    search: (query: string, options?: {
        motivation?: string;
        date?: string;
        user?: string;
        headers?: HeadersInit;
    }) => void | Promise<void>;
}
declare function findSearch1Service(manifest: ManifestNormalized | Manifest): Search1Service | null;
declare function findAutocompleteService(service: Search1Service): SearchServiceAutocomplete | undefined;
declare const createSearch1AutocompleteStore: (service?: Search1Service | undefined, options?: {
    fetcher?: Fetcher<SearchServiceAutocompleteResponse>;
}) => zustand_vanilla.StoreApi<Search1AutocompleteStore>;
type SingleSearchHit = {
    '@type': 'search:Hit';
    annotations: string[];
    selectors: Array<SearchServiceCommonHitSelectors>;
    match?: string;
    before?: string;
    after?: string;
};
interface Search1Store {
    endpoint: string | undefined;
    service: Search1Service | undefined;
    lastQuery: SearchServiceQueryParams;
    resources: SearchServiceSearchResponse['resources'];
    hits: SingleSearchHit[];
    loading: boolean;
    error: boolean;
    hasAutocomplete: boolean;
    hasSearch: boolean;
    errorMessage: string;
    hitIndex: number;
    highlight: {
        results: SearchServiceSearchResponse['resources'] | null;
        hit: SingleSearchHit | null;
    };
    search: (query: SearchServiceQueryParams, options?: {
        headers?: HeadersInit;
    }) => void | Promise<void>;
    setSearchService: (service: Search1Service) => void;
    clearSearch: () => void;
    highlightHit: (index: number) => void;
    nextHit: () => void;
    previousHit: () => void;
}
type FetcherReturn<T> = Promise<[T | null, error: string | null]>;
type Fetcher<T> = (query: string, options: {
    signal: AbortSignal;
    headers?: HeadersInit;
}) => FetcherReturn<T>;
declare const createSearch1Store: (service?: Search1Service | string, options?: {
    fetcher?: Fetcher<SearchServiceSearchResponse>;
}) => zustand_vanilla.StoreApi<Search1Store>;

export { type Search1AutocompleteStore, type Search1Service, type Search1Store, type SingleSearchHit, createSearch1AutocompleteStore, createSearch1Store, findAutocompleteService, findSearch1Service };
