"use strict";
var IIIFHelpers = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // src/vault-utility.ts
  var vault_utility_exports = {};
  __export(vault_utility_exports, {
    actionListFromResource: () => actionListFromResource,
    areInputsEqual: () => areInputsEqual,
    createFetchHelper: () => createFetchHelper,
    getDefaultEntities: () => getDefaultEntities,
    resolveIfExists: () => resolveIfExists,
    resolveList: () => resolveList
  });

  // node_modules/.pnpm/@iiif+parser@2.2.0/node_modules/@iiif/parser/dist/chunk-J657UVVW.js
  var e = "http://library.stanford.edu/iiif/image-api/compliance.html#level0";
  var i = "http://library.stanford.edu/iiif/image-api/compliance.html#level1";
  var t = "http://library.stanford.edu/iiif/image-api/compliance.html#level2";
  var o = "http://library.stanford.edu/iiif/image-api/conformance.html#level0";
  var r = "http://library.stanford.edu/iiif/image-api/conformance.html#level1";
  var a = "http://library.stanford.edu/iiif/image-api/conformance.html#level2";
  var _ = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0";
  var I = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1";
  var l = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2";
  var p = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level0";
  var s = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1";
  var n = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2";
  var E = "http://iiif.io/api/image/1/level0.json";
  var c = "http://iiif.io/api/image/1/profiles/level0.json";
  var F = "http://iiif.io/api/image/1/level1.json";
  var m = "http://iiif.io/api/image/1/profiles/level1.json";
  var f = "http://iiif.io/api/image/1/level2.json";
  var x = "http://iiif.io/api/image/1/profiles/level2.json";
  var A = "http://iiif.io/api/image/2/level0.json";
  var L = "http://iiif.io/api/image/2/profiles/level0.json";
  var h = "http://iiif.io/api/image/2/level1.json";
  var y = "http://iiif.io/api/image/2/profiles/level1.json";
  var d = "http://iiif.io/api/image/2/level2.json";
  var g = "http://iiif.io/api/image/2/profiles/level2.json";
  var M = "level0";
  var O = "level1";
  var v = "level2";
  var u = "http://iiif.io/api/image/2/level0";
  var N = "http://iiif.io/api/image/2/level1";
  var G = "http://iiif.io/api/image/2/level2";
  var R = [G, t, a, l, n, f, x, d, g, v];
  var C = [...R, N, i, r, I, s, F, m, h, y, O];
  var B = [u, N, G, e, i, t, o, r, a, _, I, l, p, s, n, E, c, F, m, f, x, A, L, h, y, d, g, M, O, v];
  var P = B;

  // node_modules/.pnpm/@iiif+parser@2.2.0/node_modules/@iiif/parser/dist/chunk-NJNTZ6QT.js
  function r2(e3) {
    for (let n2 in e3)
      (typeof e3[n2] > "u" || e3[n2] === null) && delete e3[n2];
    return e3;
  }
  function i2(e3) {
    return Array.isArray(e3) ? e3 : e3 ? [e3] : [];
  }

  // node_modules/.pnpm/@iiif+parser@2.2.0/node_modules/@iiif/parser/dist/chunk-D22QKJZO.js
  var d2 = Object.defineProperty;
  var e2 = (b2, a3, c2) => a3 in b2 ? d2(b2, a3, { enumerable: true, configurable: true, writable: true, value: c2 }) : b2[a3] = c2;
  var f2 = (b2, a3, c2) => (e2(b2, typeof a3 != "symbol" ? a3 + "" : a3, c2), c2);

  // node_modules/.pnpm/@iiif+parser@2.2.0/node_modules/@iiif/parser/dist/chunk-RCT3CZAV.js
  var P2 = ["sc:Collection", "sc:Manifest", "sc:Canvas", "sc:AnnotationList", "oa:Annotation", "sc:Range", "sc:Layer", "sc:Sequence", "oa:Choice", "Service", "ContentResource"];
  function S(t3) {
    if (typeof t3 > "u" || t3 === null)
      throw new Error("Null or undefined is not a valid entity.");
    if (Array.isArray(t3))
      throw new Error("Array is not a valid entity");
    if (typeof t3 != "object")
      throw new Error(`${typeof t3} is not a valid entity`);
    if (typeof t3["@type"] == "string") {
      let e3 = P2.indexOf(t3["@type"]);
      if (e3 !== -1)
        return P2[e3];
    }
    if (t3.profile)
      return "Service";
    if (t3.format || t3["@type"])
      return "ContentResource";
    throw new Error("Resource type is not known");
  }
  var h2 = class t2 {
    constructor(e3, n2 = {}) {
      f2(this, "traversals");
      f2(this, "options");
      this.traversals = { collection: [], manifest: [], canvas: [], annotationList: [], sequence: [], annotation: [], contentResource: [], choice: [], range: [], service: [], layer: [], ...e3 }, this.options = { convertPropsToArray: true, mergeMemberProperties: true, allowUndefinedReturn: false, ...n2 };
    }
    static all(e3) {
      return new t2({ collection: [e3], manifest: [e3], canvas: [e3], annotationList: [e3], sequence: [e3], annotation: [e3], contentResource: [e3], choice: [e3], range: [e3], service: [e3], layer: [e3] });
    }
    traverseCollection(e3) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseCollectionItems(e3))), this.traversals.collection);
    }
    traverseCollectionItems(e3) {
      if (this.options.mergeMemberProperties) {
        let n2 = [...(e3.manifests || []).map((r3) => typeof r3 == "string" ? { "@id": r3, "@type": "sc:Manifest" } : r3), ...(e3.collections || []).map((r3) => typeof r3 == "string" ? { "@id": r3, "@type": "sc:Collection" } : r3), ...e3.members || []], i3 = [], a3 = n2.filter((r3) => i3.includes(r3["@id"]) ? false : (i3.push(r3["@id"]), true));
        delete e3.collections, delete e3.manifests, e3.members = a3;
      }
      return e3.manifests && (e3.manifests = e3.manifests.map((n2) => this.traverseManifest(typeof n2 == "string" ? { "@id": n2, "@type": "sc:Manifest" } : n2))), e3.collections && (e3.collections = e3.collections.map((n2) => this.traverseCollection(typeof n2 == "string" ? { "@id": n2, "@type": "sc:Collection" } : n2))), e3.members && (e3.members = e3.members.map((n2) => typeof n2 == "string" ? n2 : n2["@type"] === "sc:Collection" ? this.traverseCollection(n2) : n2["@type"] === "sc:Manifest" ? this.traverseManifest(n2) : this.traverseUnknown(n2))), e3;
    }
    traverseManifest(e3) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseManifestItems(e3))), this.traversals.manifest);
    }
    traverseManifestItems(e3) {
      return e3.sequences && (e3.sequences = e3.sequences.map((n2) => this.traverseSequence(n2))), e3.structures && (e3.structures = e3.structures.map((n2) => this.traverseRange(n2))), e3;
    }
    traverseSequence(e3) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseSequenceItems(e3))), this.traversals.sequence);
    }
    traverseSequenceItems(e3) {
      return e3.canvases && (e3.canvases = e3.canvases.map((n2) => this.traverseCanvas(n2))), e3;
    }
    traverseCanvas(e3) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseCanvasItems(e3))), this.traversals.canvas);
    }
    traverseCanvasItems(e3) {
      return e3.images && (e3.images = e3.images.map((n2) => this.traverseAnnotation(n2))), e3.otherContent && (e3.otherContent = e3.otherContent.map((n2) => this.traverseAnnotationList(n2))), e3;
    }
    traverseRange(e3) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseRangeItems(e3))), this.traversals.range);
    }
    traverseRangeItems(e3) {
      if (this.options.mergeMemberProperties) {
        let n2 = [...(e3.ranges || []).map((i3) => typeof i3 == "string" ? { "@id": i3, "@type": "sc:Range" } : i3), ...(e3.canvases || []).map((i3) => typeof i3 == "string" ? { "@id": i3, "@type": "sc:Canvas" } : i3), ...e3.members || []];
        delete e3.ranges, delete e3.canvases, e3.members = n2.length ? n2.map((i3) => this.traverseUnknown(i3)) : void 0;
      }
      return e3;
    }
    traverseAnnotationList(e3) {
      let n2 = typeof e3 == "string" ? { "@id": e3, "@type": "sc:AnnotationList" } : e3;
      return this.traverseType(this.traverseDescriptive(this.traverseAnnotationListItems(n2)), this.traversals.annotationList);
    }
    traverseAnnotationListItems(e3) {
      return e3.resources && (e3.resources = e3.resources.map((n2) => this.traverseAnnotation(n2))), e3;
    }
    traverseAnnotation(e3) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseAnnotationItems(e3))), this.traversals.annotation);
    }
    traverseAnnotationItems(e3) {
      return e3.resource && (Array.isArray(e3.resource) ? e3.resource = e3.resource.map((n2) => this.traverseContentResource(n2)) : e3.resource = this.traverseContentResource(e3.resource)), e3.on, e3;
    }
    traverseLayer(e3) {
      return this.traverseType(this.traverseLinking(this.traverseLayerItems(e3)), this.traversals.layer);
    }
    traverseLayerItems(e3) {
      return e3.otherContent && (e3.otherContent = e3.otherContent.map((n2) => this.traverseAnnotationList(n2))), e3;
    }
    traverseChoice(e3) {
      return this.traverseType(this.traverseChoiceItems(e3), this.traversals.choice);
    }
    traverseChoiceItems(e3) {
      return e3.default && e3.default !== "rdf:nil" && (e3.default = this.traverseContentResource(e3.default)), e3.item && e3.item !== "rdf:nil" && (e3.item = e3.item.map((n2) => this.traverseContentResource(n2))), e3;
    }
    traverseService(e3) {
      return this.traverseType(this.traverseLinking(e3), this.traversals.service);
    }
    traverseContentResource(e3) {
      return e3["@type"] === "oa:Choice" ? this.traverseChoice(e3) : this.traverseType(this.traverseDescriptive(this.traverseLinking(e3)), this.traversals.contentResource);
    }
    traverseUnknown(e3) {
      if (!e3["@type"] || typeof e3 == "string")
        return e3;
      switch (S(e3)) {
        case "sc:Collection":
          return this.traverseCollection(e3);
        case "sc:Manifest":
          return this.traverseManifest(e3);
        case "sc:Canvas":
          return this.traverseCanvas(e3);
        case "sc:Sequence":
          return this.traverseSequence(e3);
        case "sc:Range":
          return this.traverseRange(e3);
        case "oa:Annotation":
          return this.traverseAnnotation(e3);
        case "sc:AnnotationList":
          return this.traverseAnnotationList(e3);
        case "sc:Layer":
          return this.traverseLayer(e3);
        case "Service":
          return this.traverseService(e3);
        case "oa:Choice":
          return this.traverseChoice(e3);
        case "ContentResource":
          return this.traverseContentResource(e3);
      }
      return e3.profile ? this.traverseService(e3) : e3;
    }
    traverseImageResource(e3) {
      let n2 = Array.isArray(e3), i3 = Array.isArray(e3) ? e3 : [e3], a3 = [];
      for (let r3 of i3)
        typeof r3 == "string" ? a3.push(this.traverseContentResource({ "@id": r3, "@type": "dctypes:Image" })) : a3.push(this.traverseContentResource(r3));
      return !n2 && !this.options.convertPropsToArray ? a3[0] : a3;
    }
    traverseDescriptive(e3) {
      return e3.thumbnail && (e3.thumbnail = this.traverseImageResource(e3.thumbnail)), e3.logo && (e3.logo = this.traverseImageResource(e3.logo)), e3;
    }
    traverseOneOrMoreServices(e3) {
      let n2 = Array.isArray(e3), i3 = Array.isArray(e3) ? e3 : [e3], a3 = [];
      for (let r3 of i3)
        a3.push(this.traverseService(r3));
      return !n2 && !this.options.convertPropsToArray ? a3[0] : a3;
    }
    traverseLinking(e3) {
      return e3.related && (e3.related = this.traverseOneOrManyType(e3.related, this.traversals.contentResource)), e3.rendering && (e3.rendering = this.traverseOneOrManyType(e3.rendering, this.traversals.contentResource)), e3.service && (e3.service = this.traverseOneOrMoreServices(e3.service)), e3.seeAlso && (e3.seeAlso = this.traverseOneOrManyType(e3.seeAlso, this.traversals.contentResource)), e3.within && (typeof e3.within == "string" || (e3.within = this.traverseOneOrManyType(e3.within, this.traversals.contentResource))), e3.startCanvas && (typeof e3.startCanvas == "string" ? e3.startCanvas = this.traverseType({ "@id": e3.startCanvas, "@type": "sc:Canvas" }, this.traversals.canvas) : e3.startCanvas && this.traverseType(e3.startCanvas, this.traversals.canvas)), e3.contentLayer && (typeof e3.contentLayer == "string" ? e3.contentLayer = this.traverseLayer({ "@id": e3.contentLayer, "@type": "sc:Layer" }) : e3.contentLayer = this.traverseLayer(e3.contentLayer)), e3;
    }
    traverseOneOrManyType(e3, n2) {
      if (!Array.isArray(e3))
        if (this.options.convertPropsToArray)
          e3 = [e3];
        else
          return this.traverseType(e3, n2);
      return e3.map((i3) => this.traverseType(i3, n2));
    }
    traverseType(e3, n2) {
      return n2.reduce((i3, a3) => {
        let r3 = a3(i3);
        return typeof r3 > "u" && !this.options.allowUndefinedReturn ? i3 : r3;
      }, e3);
    }
  };
  var O2 = "http://library.stanford.edu/iiif/image-api/compliance.html#level1";
  var w = "http://library.stanford.edu/iiif/image-api/compliance.html#level2";
  var b = "http://library.stanford.edu/iiif/image-api/conformance.html#level1";
  var F2 = "http://library.stanford.edu/iiif/image-api/conformance.html#level2";
  var D = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1";
  var N2 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2";
  var k = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1";
  var G2 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2";
  var j = "http://iiif.io/api/image/1/level1.json";
  var q = "http://iiif.io/api/image/1/profiles/level1.json";
  var V = "http://iiif.io/api/image/1/level2.json";
  var U = "http://iiif.io/api/image/1/profiles/level2.json";
  var $ = "http://iiif.io/api/image/2/level1.json";
  var W = "http://iiif.io/api/image/2/profiles/level1.json";
  var B2 = "http://iiif.io/api/image/2/level2.json";
  var H = "http://iiif.io/api/image/2/profiles/level2.json";
  var J = "level1";
  var z = "level2";
  var K = "http://iiif.io/api/image/2/level1";
  var Q = "http://iiif.io/api/image/2/level2";
  var _2 = [K, Q, O2, w, b, F2, D, N2, k, G2, j, q, V, U, $, W, B2, H, J, z];
  var y2 = { attributionLabel: "Attribution", lang: "none", providerId: "http://example.org/provider", providerName: "" };
  function X(t3) {
    if (typeof t3 == "string")
      return [t3];
    if (!t3)
      return [];
    let e3 = Array.isArray(t3) ? t3 : [t3], n2 = [];
    for (let i3 of e3) {
      if (typeof i3 == "string") {
        n2.push(i3);
        continue;
      }
      n2.push({ "@language": i3["@language"] || i3.language, "@value": i3["@value"] || i3.value });
    }
    return n2;
  }
  function u2(t3, e3 = "none") {
    if (!t3)
      return { none: [""] };
    let n2 = X(t3), i3 = {};
    for (let a3 of n2) {
      if (typeof a3 == "string") {
        i3[e3] = i3[e3] ? i3[e3] : [], i3[e3].push(a3 || "");
        continue;
      }
      if (!a3["@language"]) {
        i3[e3] = i3[e3] ? i3[e3] : [], i3[e3].push(a3["@value"] || "");
        continue;
      }
      let r3 = a3["@language"];
      i3[r3] = i3[r3] ? i3[r3] : [], i3[r3].push(a3["@value"] || "");
    }
    return Object.keys(i3).length === 0 ? { none: [""] } : i3;
  }
  function L2(t3) {
    if (Array.isArray(t3))
      return L2(t3.find((e3) => typeof e3 == "string"));
    if (R.indexOf(t3) !== -1)
      return "level2";
    if (_2.indexOf(t3) !== -1)
      return "level1";
    if (P.indexOf(t3) !== -1)
      return "level0";
    if (typeof t3 == "string")
      return t3;
  }
  function Y(t3) {
    let e3 = Array.isArray(t3) ? t3 : [t3];
    for (let n2 of e3)
      switch (n2) {
        case "http://iiif.io/api/image/2/context.json":
        case "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2":
          return "ImageService2";
        case "http://iiif.io/api/image/1/context.json":
        case "http://library.stanford.edu/iiif/image-api/1.1/context.json":
          return "ImageService1";
        case "http://iiif.io/api/annex/openannotation/context.json":
          return "ImageApiSelector";
      }
  }
  function Z(t3) {
    switch (t3) {
      case "http://iiif.io/api/image/2/level0.json":
      case "http://iiif.io/api/image/2/level1.json":
      case "http://iiif.io/api/image/2/level2.json":
        return "ImageService2";
      case "http://iiif.io/api/auth/1/kiosk":
      case "http://iiif.io/api/auth/1/login":
      case "http://iiif.io/api/auth/1/clickthrough":
      case "http://iiif.io/api/auth/1/external":
      case "http://iiif.io/api/auth/0/kiosk":
      case "http://iiif.io/api/auth/0/login":
      case "http://iiif.io/api/auth/0/clickthrough":
      case "http://iiif.io/api/auth/0/external":
        return "AuthCookieService1";
      case "http://iiif.io/api/auth/1/token":
      case "http://iiif.io/api/auth/0/token":
        return "AuthTokenService1";
      case "http://iiif.io/api/auth/1/logout":
      case "http://iiif.io/api/auth/0/logout":
        return "AuthLogoutService1";
      case "http://iiif.io/api/search/1/search":
      case "http://iiif.io/api/search/0/search":
        return "SearchService1";
      case "http://iiif.io/api/search/1/autocomplete":
      case "http://iiif.io/api/search/0/autocomplete":
        return "AutoCompleteService1";
    }
  }
  function R2(t3) {
    for (let e3 of ["sc", "oa", "dcterms", "dctypes", "iiif"])
      if (t3.startsWith(`${e3}:`))
        return t3.slice(e3.length + 1);
    return t3;
  }
  var ee = ["Collection", "Manifest", "Annotation", "AnnotationPage", "Range", "Service"];
  function m2(t3) {
    let e3 = t3["@id"] || t3.id, n2 = t3["@type"] || t3.type, i3 = t3.profile || void 0, a3 = t3["@context"] || void 0;
    if (i3) {
      let r3 = Z(i3);
      if (r3)
        return r3;
    }
    if (a3) {
      let r3 = Y(a3);
      if (r3)
        return r3;
    }
    if (n2) {
      if (Array.isArray(n2)) {
        if (n2.indexOf("oa:CssStylesheet") !== -1)
          return "CssStylesheet";
        if (n2.indexOf("cnt:ContentAsText") !== -1)
          return "TextualBody";
        n2 = n2[0];
      }
      for (let r3 of ["sc", "oa", "dcterms", "dctypes", "iiif"])
        if (n2.startsWith(`${r3}:`)) {
          n2 = n2.slice(r3.length + 1);
          break;
        }
      switch (n2) {
        case "Layer":
          return "AnnotationCollection";
        case "AnnotationList":
          return "AnnotationPage";
        case "cnt:ContentAsText":
          return "TextualBody";
      }
    }
    if (n2 && ee.indexOf(n2) !== -1)
      return n2;
    if (t3.format) {
      if (t3.format.startsWith("image/"))
        return "Image";
      if (t3.format.startsWith("text/") || t3.format === "application/pdf")
        return "Text";
      if (t3.format.startsWith("application/"))
        return "Dataset";
    }
    return e3 && (e3.endsWith(".jpg") || e3.endsWith(".png") || e3.endsWith(".jpeg")) ? "Image" : n2 || "unknown";
  }
  var te = /http(s)?:\/\/(creativecommons.org|rightsstatements.org)[^"'\\<\n]+/gm;
  function ne(t3) {
    let e3 = t3.match(te);
    return e3 ? e3[0] : t3;
  }
  function ie(t3, e3 = "Rights/License", n2 = "none") {
    let i3 = null, a3 = [], r3 = Array.isArray(t3) ? t3 : [t3];
    for (let s2 of r3) {
      let c2 = s2 ? ne(s2) : void 0;
      if (c2 && (c2.indexOf("creativecommons.org") !== -1 || c2.indexOf("rightsstatements.org") !== -1)) {
        c2.startsWith("https://") ? i3 = `http://${c2.slice(8)}` : i3 = c2;
        continue;
      }
      c2 && a3.push({ label: { [n2]: [e3] }, value: { [n2]: [c2] } });
    }
    return [i3, a3];
  }
  var re = ["http://iiif.io/api/presentation/2/context.json", "http://iiif.io/api/image/2/context.json", "http://iiif.io/api/image/1/context.json", "http://library.stanford.edu/iiif/image-api/1.1/context.json", "http://iiif.io/api/search/1/context.json", "http://iiif.io/api/search/0/context.json", "http://iiif.io/api/auth/1/context.json", "http://iiif.io/api/auth/0/context.json", "http://iiif.io/api/annex/openannotation/context.json"];
  function ae(t3) {
    if (t3) {
      let e3 = Array.isArray(t3) ? t3 : [t3], n2 = [];
      for (let i3 of e3)
        i3 === "http://iiif.io/api/presentation/2/context.json" && n2.push("http://iiif.io/api/presentation/3/context.json"), re.indexOf(i3) === -1 && n2.push(i3);
      if (e3.length)
        return n2.length === 1 ? n2[0] : n2;
    }
  }
  function se(t3) {
    return t3 ? t3.map((e3) => ({ label: u2(e3.label), value: u2(e3.value) })) : [];
  }
  var x2 = 0;
  function E2(t3, e3) {
    let n2 = encodeURI(t3.id || t3["@id"] || "").trim();
    return n2 && e3 ? `${n2}/${e3}` : n2 || (x2++, `http://example.org/${t3["@type"]}${e3 ? `/${e3}` : ""}/${x2}`);
  }
  function p2(t3) {
    let e3 = [...t3.behavior || []];
    t3.viewingHint && e3.push(t3.viewingHint);
    let n2;
    return Array.isArray(t3.motivation) ? n2 = t3.motivation.map(R2) : t3.motivation && (n2 = R2(t3.motivation)), { "@context": t3["@context"] ? ae(t3["@context"]) : void 0, id: (t3["@id"] || E2(t3)).trim(), type: m2(t3), behavior: e3.length ? e3 : void 0, height: t3.height ? t3.height : void 0, width: t3.width ? t3.width : void 0, motivation: n2, viewingDirection: t3.viewingDirection, profile: t3.profile, format: t3.format ? t3.format : void 0, duration: void 0, timeMode: void 0 };
  }
  function f3(t3) {
    let [e3, n2] = ie(t3.license), i3 = [...t3.metadata ? se(t3.metadata) : [], ...n2];
    return { rights: e3, metadata: i3.length ? i3 : void 0, label: t3.label ? u2(t3.label) : void 0, requiredStatement: t3.attribution ? { label: u2(y2.attributionLabel), value: u2(t3.attribution) } : void 0, navDate: t3.navDate, summary: t3.description ? u2(t3.description) : void 0, thumbnail: oe(t3.thumbnail) };
  }
  function oe(t3) {
    return t3 && (Array.isArray(t3) ? t3 : [t3]).map((n2) => typeof n2 == "string" ? { id: n2, type: "Image" } : (n2.type === "unknown" && (n2.type = "Image"), n2));
  }
  function pe(t3) {
    if (!t3.within)
      return;
    let e3 = Array.isArray(t3.within) ? t3.within : [t3.within], n2 = [];
    for (let i3 of e3)
      if (typeof i3 == "string") {
        if (i3)
          switch (t3["@type"]) {
            case "sc:Manifest":
              n2.push({ id: i3, type: "Collection" });
              break;
          }
      } else
        i3["@id"] && n2.push({ id: i3["@id"], type: m2(i3) });
    return n2.length ? n2 : void 0;
  }
  function l2(t3) {
    let e3 = t3.related ? Array.isArray(t3.related) ? t3.related : [t3.related] : [], n2 = t3.contentLayer;
    return { provider: t3.logo || e3.length ? [{ id: y2.providerId, type: "Agent", homepage: e3.length ? [e3[0]] : void 0, logo: t3.logo ? Array.isArray(t3.logo) ? t3.logo : [t3.logo] : void 0, label: u2(y2.providerName) }] : void 0, partOf: pe(t3), rendering: t3.rendering, seeAlso: t3.seeAlso, start: t3.startCanvas, service: t3.service ? i2(t3.service) : void 0, supplementary: n2 ? [n2] : void 0 };
  }
  function fe(t3) {
    return { chars: t3.chars, format: t3.format ? t3.format : void 0, language: t3.language };
  }
  function d3(t3, e3) {
    return t3 ? typeof t3 == "string" ? { id: t3, type: e3 } : typeof t3?.["@id"] == "string" ? { id: t3["@id"], type: e3 } : typeof t3.id == "string" ? { id: t3.id, type: e3 } : null : null;
  }
  function ce(t3) {
    let e3 = {};
    if (t3.first) {
      let n2 = d3(t3.first, "Collection");
      n2 && (e3.first = n2);
    }
    if ((t3.total || t3.total === 0) && (e3.total = t3.total), t3.prev) {
      let n2 = d3(t3.prev, "Collection");
      n2 && (e3.prev = n2);
    }
    if (t3.next) {
      let n2 = d3(t3.next, "Collection");
      n2 && (e3.next = n2);
    }
    return e3;
  }
  function le(t3) {
    let e3 = [];
    for (let n2 of t3) {
      let i3 = { ...n2 };
      i3.items && i3.items.length === 0 && delete i3.items, e3.push(i3);
    }
    return e3;
  }
  function ue(t3) {
    return r2({ ...p2(t3), ...f3(t3), ...l2(t3), ...ce(t3), items: le(t3.members) });
  }
  function he(t3) {
    let e3 = [], n2 = [], i3, a3;
    for (let s2 of t3.sequences || [])
      s2.canvases.length && e3.push(...s2.canvases), s2.behavior && n2.push(...s2.behavior), s2.viewingDirection && (a3 = s2.viewingDirection), s2.startCanvas && (i3 = s2.startCanvas);
    let r3 = p2(t3);
    return n2.length && (r3.behavior ? r3.behavior.push(...n2) : r3.behavior = n2), r2({ ...r3, ...f3(t3), ...l2(t3), viewingDirection: a3, start: i3, items: e3, structures: ve(t3.structures) });
  }
  function ve(t3) {
    if (!t3)
      return t3;
    let e3 = /* @__PURE__ */ new Map();
    for (let i3 of t3)
      e3.set(i3.id, i3);
    let n2 = [];
    for (let i3 of t3)
      if (i3.items) {
        let a3 = i3.items.map((r3) => typeof r3 == "string" ? (n2.push(r3), e3.get(r3) || r3) : r3 && r3.id ? (n2.push(r3.id), e3.get(r3.id) || r3) : r3);
        i3.items = a3;
      }
    return t3.filter((i3) => n2.indexOf(i3.id) === -1);
  }
  function de(t3) {
    return r2({ ...p2(t3), ...f3(t3), ...l2(t3), annotations: t3.otherContent && t3.otherContent.length ? t3.otherContent : void 0, items: t3.images && t3.images.length ? [{ id: E2(t3, "annotation-page"), type: "AnnotationPage", items: t3.images }] : void 0 });
  }
  function ye(t3) {
    return r2({ ...p2(t3), ...f3(t3), ...l2(t3), items: t3.resources && t3.resources.length ? t3.resources : void 0 });
  }
  function ge(t3) {
    return !t3.canvases || t3.canvases.length === 0 ? { canvases: [], behavior: [] } : { canvases: t3.canvases, behavior: t3.viewingHint ? [t3.viewingHint] : [], viewingDirection: t3.viewingDirection, startCanvas: t3.startCanvas };
  }
  function me(t3) {
    function e3(n2) {
      if (Array.isArray(n2)) {
        if (n2.length > 1)
          return { type: "List", items: n2.map(e3) };
        n2 = n2[0];
      }
      if (typeof n2 == "string")
        return encodeURI(n2).trim();
      if ("@type" in n2) {
        let i3;
        if (typeof n2.full == "string")
          i3 = n2.full;
        else if (n2.full["@type"] === "dctypes:Image")
          i3 = { id: n2.full["@id"], type: "Image" };
        else if (n2.full["@type"] === "sc:Canvas")
          i3 = { id: n2.full["@id"], type: "Canvas" };
        else
          throw new Error(`Unsupported source type on annotation: ${n2.full["@type"]}`);
        return { type: "SpecificResource", source: i3, selector: g2(n2.selector) };
      } else
        return encodeURI(n2["@id"]).trim();
    }
    return r2({ ...p2(t3), ...f3(t3), ...l2(t3), target: e3(t3.on), body: Array.isArray(t3.resource) ? t3.resource.map(T) : T(t3.resource) });
  }
  function T(t3) {
    return t3.type === "Choice" ? t3 : M2(t3);
  }
  function M2(t3) {
    let e3 = t3;
    return r2({ ...p2(e3), ...f3(e3), ...l2(e3), ...fe(e3) });
  }
  function Ce(t3) {
    let e3 = [];
    return t3.default && t3.default !== "rdf:nil" && e3.push(t3.default), t3.item && t3.item !== "rdf:nil" && e3.push(...t3.item), r2({ ...p2(t3), ...f3(t3), items: e3 });
  }
  function Ae(t3) {
    return r2({ ...p2(t3), ...f3(t3), ...l2(t3), items: t3.members });
  }
  function Ie(t3) {
    let { "@id": e3, "@type": n2, "@context": i3, profile: a3, ...r3 } = t3, s2 = {};
    return e3 && (s2["@id"] = e3), s2["@type"] = m2(t3), s2["@type"] === "unknown" && (i3 && i3.length && (s2["@context"] = i3), s2["@type"] = "Service"), a3 && (s2.profile = L2(a3)), r2({ ...s2, ...r3 });
  }
  function Pe(t3) {
    return r2({ ...p2(t3), ...f3(t3), ...l2(t3) });
  }
  var _e = new h2({ collection: [ue], manifest: [he], canvas: [de], annotationList: [ye], sequence: [ge], annotation: [me], contentResource: [M2], choice: [Ce], range: [Ae], service: [Ie], layer: [Pe] });
  function be(t3) {
    return t3 && t3["@context"] && (t3["@context"] === "http://iiif.io/api/presentation/2/context.json" || t3["@context"].indexOf("http://iiif.io/api/presentation/2/context.json") !== -1 || t3["@context"] === "http://www.shared-canvas.org/ns/context.json") || t3["@context"] === "http://iiif.io/api/image/2/context.json" || t3["@id"] && t3["@type"] === "sc:Collection" || t3["@id"] && t3["@type"] === "sc:Manifest" ? (t3["@context"] || (t3["@context"] = "http://iiif.io/api/presentation/2/context.json"), _e.traverseUnknown(t3)) : t3;
  }
  function g2(t3) {
    if ((Array.isArray(t3["@type"]) && t3["@type"].includes("oa:SvgSelector") || t3["@type"] == "oa:SvgSelector") && ("chars" in t3 || "value" in t3))
      return { type: "SvgSelector", value: "chars" in t3 ? t3.chars : t3.value };
    if (t3["@type"] === "oa:FragmentSelector")
      return { type: "FragmentSelector", value: t3.value };
    if (t3["@type"] === "oa:Choice")
      return [g2(t3.default), ...(Array.isArray(t3.item) ? t3.item : [t3.item]).map(g2)];
    if (t3["@type"] == "iiif:ImageApiSelector")
      return { type: "ImageApiSelector", region: "region" in t3 ? t3.region : void 0, rotation: "rotation" in t3 ? t3.rotation : void 0 };
    throw new Error(`Unsupported selector type: ${t3["@type"]}`);
  }

  // node_modules/.pnpm/@iiif+parser@2.2.0/node_modules/@iiif/parser/dist/chunk-ERHCHADU.js
  function v2(a3) {
    return typeof a3 == "string" ? false : a3 && !a3.type && "source" in a3 ? (a3.type = "SpecificResource", true) : !!a3 && a3.type === "SpecificResource";
  }
  function o2(...a3) {
    return (e3) => a3.reduce((t3, n2) => n2(t3), e3);
  }
  var p3 = ["Collection", "Manifest", "Canvas", "AnnotationPage", "AnnotationCollection", "Annotation", "ContentResource", "Range", "Service", "Selector", "Agent"];
  function y3(a3, e3) {
    if (typeof a3 > "u" || a3 === null)
      throw new Error("Null or undefined is not a valid entity.");
    if (Array.isArray(a3))
      throw new Error("Array is not a valid entity");
    if (typeof a3 != "object") {
      if (e3)
        return e3;
      throw new Error(`${typeof a3} is not a valid entity`);
    }
    if (typeof a3.type == "string") {
      let t3 = p3.indexOf(a3.type);
      if (t3 !== -1)
        return p3[t3];
    }
    if (a3.profile)
      return "Service";
    throw new Error("Resource type is not known");
  }
  var l3 = class a2 {
    constructor(e3, t3 = {}) {
      f2(this, "traversals");
      f2(this, "options");
      f2(this, "_traverseManifest", o2(this.traverseManifestItems.bind(this), this.traverseNavPlace.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this), this.traverseLinkedCanvases.bind(this), this.traverseManifestStructures.bind(this), this.traverseInlineAnnotationPages.bind(this)));
      f2(this, "_traverseCanvas", o2(this.traverseCanvasItems.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this), this.traverseLinkedCanvases.bind(this), this.traverseInlineAnnotationPages.bind(this)));
      f2(this, "_traverseAnnotationPage", o2(this.traverseAnnotationPageItems.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this)));
      f2(this, "_traverseRange", o2(this.traverseRangeRanges.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this), this.traverseLinkedCanvases.bind(this)));
      this.traversals = { collection: [], manifest: [], canvas: [], annotationCollection: [], annotationPage: [], annotation: [], contentResource: [], choice: [], range: [], service: [], agent: [], specificResource: [], geoJson: [], ...e3 }, this.options = { allowUndefinedReturn: false, ...t3 };
    }
    static all(e3) {
      return new a2({ collection: [e3], manifest: [e3], canvas: [e3], annotationCollection: [e3], annotationPage: [e3], annotation: [e3], contentResource: [e3], choice: [e3], range: [e3], service: [e3], geoJson: [e3], specificResource: [e3], agent: [e3] });
    }
    traverseDescriptive(e3) {
      return e3.thumbnail && (e3.thumbnail = i2(e3.thumbnail).map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.provider && (e3.provider = e3.provider.map((t3) => this.traverseAgent(t3, e3))), e3;
    }
    traverseLinking(e3) {
      return e3.seeAlso && (e3.seeAlso = e3.seeAlso.map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.service && (e3.service = i2(e3.service).map((t3) => this.traverseService(t3))), e3.services && (e3.services = i2(e3.services).map((t3) => this.traverseService(t3, e3))), e3.logo && (e3.logo = e3.logo.map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.homepage && (e3.homepage = i2(e3.homepage).map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.partOf && (e3.partOf = e3.partOf.map((t3) => typeof t3 == "string" || !t3.type ? this.traverseType(t3, { parent: e3 }, this.traversals.contentResource) : t3.type === "Canvas" ? this.traverseType(t3, { parent: e3 }, this.traversals.canvas) : t3.type === "AnnotationCollection" ? this.traverseType(t3, { parent: e3 }, this.traversals.annotationCollection) : t3.type === "Collection" ? this.traverseType(t3, { parent: e3 }, this.traversals.collection) : this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.start && (v2(e3.start) ? e3.start = this.traverseSpecificResource(e3.start, "Canvas", e3) : e3.start = this.traverseType(e3.start, { parent: e3 }, this.traversals.canvas)), e3.rendering && (e3.rendering = e3.rendering.map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.supplementary && (e3.supplementary = e3.supplementary.map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3;
    }
    traverseCollectionItems(e3) {
      return e3.items && e3.items.map((t3) => t3.type === "Collection" ? this.traverseCollection(t3) : this.traverseManifest(t3)), e3;
    }
    traverseCollection(e3, t3) {
      return this.traverseType(this.traverseDescriptive(this.traverseNavPlace(this.traverseInlineAnnotationPages(this.traverseLinking(this.traverseLinkedCanvases(this.traverseCollectionItems(e3)))))), { parent: t3 }, this.traversals.collection);
    }
    traverseGeoJson(e3, t3) {
      return this.traverseType(e3, { parent: t3 }, this.traversals.geoJson);
    }
    traverseNavPlace(e3) {
      return e3.navPlace && (e3.navPlace = this.traverseGeoJson(e3.navPlace, e3)), e3;
    }
    traverseManifestItems(e3) {
      return e3.items && (e3.items = e3.items.map((t3) => this.traverseCanvas(t3))), e3;
    }
    traverseManifestStructures(e3) {
      return e3.structures && (e3.structures = e3.structures.map((t3) => this.traverseRange(t3))), e3;
    }
    traverseManifest(e3, t3) {
      return this.traverseType(this._traverseManifest(e3), { parent: t3 }, this.traversals.manifest);
    }
    traverseCanvasItems(e3) {
      return e3.items = (e3.items || []).map((t3) => this.traverseAnnotationPage(t3, e3)), e3;
    }
    traverseInlineAnnotationPages(e3) {
      return typeof e3 == "string" || !e3 || e3.annotations && (e3.annotations = e3.annotations.map((t3) => this.traverseAnnotationPage(t3, e3))), e3;
    }
    traverseCanvas(e3, t3) {
      return this.traverseType(this._traverseCanvas(e3), { parent: t3 }, this.traversals.canvas);
    }
    traverseAnnotationPageItems(e3) {
      return e3.items && (e3.items = e3.items.map((t3) => this.traverseAnnotation(t3, e3))), e3;
    }
    traverseAnnotationPage(e3, t3) {
      return this.traverseType(this._traverseAnnotationPage(e3), { parent: t3 }, this.traversals.annotationPage);
    }
    traverseAnnotationBody(e3) {
      return Array.isArray(e3.body) ? e3.body = e3.body.map((t3) => this.traverseContentResource(t3, e3)) : e3.body && (e3.body = this.traverseContentResource(e3.body, e3)), e3;
    }
    traverseLinkedCanvases(e3) {
      return e3.placeholderCanvas && (e3.placeholderCanvas = this.traverseCanvas(e3.placeholderCanvas)), e3.accompanyingCanvas && (e3.accompanyingCanvas = this.traverseCanvas(e3.accompanyingCanvas)), e3;
    }
    traverseAnnotation(e3, t3) {
      return this.traverseType(this.traverseLinking(this.traverseAnnotationBody(this.traverseDescriptive(e3))), { parent: t3 }, this.traversals.annotation);
    }
    traverseContentResourceLinking(e3) {
      return typeof e3 == "string" || !e3 || e3 && e3.service && (e3.service = i2(e3.service || []).map((t3) => this.traverseService(t3, e3))), e3;
    }
    traverseContentResource(e3, t3) {
      return e3.type === "Choice" && (e3.items = e3.items.map((n2) => this.traverseContentResource(n2, e3))), v2(e3) ? this.traverseSpecificResource(e3, "ContentResource") : this.traverseType(this.traverseInlineAnnotationPages(this.traverseContentResourceLinking(e3)), { parent: t3 }, this.traversals.contentResource);
    }
    traverseSpecificResource(e3, t3, n2) {
      let s2 = e3.source;
      return typeof e3.source == "string" && (s2 = { id: e3.source, type: t3 || "unknown" }), this.traverseType({ ...e3, source: t3 === "Canvas" || s2.type === "Canvas" ? this.traverseType(s2, { parent: n2 }, this.traversals.canvas) : t3 === "ContentResource" ? this.traverseContentResource(s2, { parent: n2 }) : this.traverseUnknown(s2, { parent: n2, typeHint: t3 }) }, { parent: n2 }, this.traversals.specificResource);
    }
    traverseRangeRanges(e3) {
      return e3.items && (e3.items = e3.items.map((t3) => typeof t3 == "string" ? this.traverseCanvas({ id: t3, type: "Canvas" }, e3) : v2(t3) ? this.traverseSpecificResource(t3, "Canvas", e3) : t3.type === "Manifest" ? this.traverseManifest(t3, e3) : this.traverseRange(t3, e3))), e3;
    }
    traverseRange(e3, t3) {
      return this.traverseType(this._traverseRange(e3), { parent: t3 }, this.traversals.range);
    }
    traverseAgent(e3, t3) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(e3)), { parent: t3 }, this.traversals.agent);
    }
    traverseType(e3, t3, n2) {
      return n2.reduce((s2, c2) => {
        let h3 = c2(s2, t3);
        return typeof h3 > "u" && !this.options.allowUndefinedReturn ? s2 : h3;
      }, e3);
    }
    traverseService(e3, t3) {
      let n2 = Object.assign({}, e3);
      return n2 && n2.service && (n2.service = i2(n2.service).map((s2) => this.traverseService(s2))), this.traverseType(n2, { parent: t3 }, this.traversals.service);
    }
    traverseUnknown(e3, { parent: t3, typeHint: n2 } = {}) {
      let s2 = y3(e3, n2);
      switch (s2) {
        case "Collection":
          return this.traverseCollection(e3, t3);
        case "Manifest":
          return this.traverseManifest(e3, t3);
        case "Canvas":
          return this.traverseCanvas(e3, t3);
        case "AnnotationPage":
          return this.traverseAnnotationPage(e3, t3);
        case "Annotation":
          return this.traverseAnnotation(e3, t3);
        case "ContentResource":
          return this.traverseContentResource(e3, t3);
        case "Range":
          return this.traverseRange(e3, t3);
        case "Service":
          return this.traverseService(e3, t3);
        case "Agent":
          return this.traverseAgent(e3, t3);
        default:
          throw new Error(`Unknown or unsupported resource type of ${s2}`);
      }
    }
  };

  // node_modules/.pnpm/@iiif+parser@2.2.0/node_modules/@iiif/parser/dist/chunk-NQRGLBGA.js
  var w2 = {};
  var d4 = "iiif-parser:hasPart";
  var g3 = "iiif-parser:partOf";
  var T2 = "iiif-parser:isExternal";
  var o3 = [];
  Object.freeze(o3);
  Object.freeze(w2);
  function oe2(e3) {
    if (e3 === w2 || Object.keys(e3).length === 0)
      return true;
    for (let n2 in e3)
      return false;
    return true;
  }
  function ae2(e3, n2) {
    if (n2 && n2["@explicit"]) {
      let i3 = {}, r3 = Object.keys(n2);
      for (let t3 of r3)
        t3 === g3 || t3 === "@explicit" || (oe2(n2[t3]) ? i3[t3] = e3[t3] : i3[t3] = n2[t3]);
      return i3;
    }
    return e3;
  }
  var K2 = { id: "https://iiif-parser/annotation-page", type: "AnnotationPage", behavior: o3, label: null, thumbnail: o3, summary: null, requiredStatement: null, metadata: o3, rights: null, provider: o3, items: o3, seeAlso: o3, homepage: o3, rendering: o3, service: o3 };
  var G3 = { id: "https://iiif-parser/empty-canvas", type: "Canvas", label: null, behavior: o3, thumbnail: o3, accompanyingCanvas: null, placeholderCanvas: null, summary: null, requiredStatement: null, metadata: o3, rights: null, navDate: null, provider: o3, items: o3, annotations: o3, seeAlso: o3, homepage: o3, partOf: o3, rendering: o3, service: o3, duration: 0, height: 0, width: 0 };
  var X2 = { id: "https://iiif-parser/empty-collection", type: "Collection", label: null, viewingDirection: "left-to-right", behavior: o3, thumbnail: o3, accompanyingCanvas: null, placeholderCanvas: null, summary: null, requiredStatement: null, metadata: o3, rights: null, navDate: null, provider: o3, items: o3, annotations: o3, seeAlso: o3, homepage: o3, partOf: o3, rendering: o3, service: o3, services: o3 };
  var Y2 = { id: "https://iiif-parser/empty-manifest", type: "Manifest", annotations: o3, behavior: o3, homepage: o3, items: o3, label: null, metadata: o3, navDate: null, provider: o3, partOf: o3, accompanyingCanvas: null, placeholderCanvas: null, rendering: o3, requiredStatement: null, rights: null, seeAlso: o3, service: o3, services: o3, start: null, structures: o3, summary: null, thumbnail: o3, viewingDirection: "left-to-right" };
  var J2 = { id: "https://iiif-parser/empty-canvas", type: "Range", label: null, behavior: o3, thumbnail: o3, accompanyingCanvas: null, placeholderCanvas: null, summary: null, requiredStatement: null, metadata: o3, rights: null, navDate: null, provider: o3, items: o3, annotations: o3, seeAlso: o3, homepage: o3, partOf: o3, rendering: o3, service: o3, start: null, supplementary: null, viewingDirection: "left-to-right" };
  var B3 = { id: "https://iiif-parser/empty-agent", type: "Agent", label: {}, logo: o3, seeAlso: o3, homepage: o3 };
  var Q2 = { id: "https://iiif-parser/empty-service", type: "UnknownService" };
  function k2(e3, n2 = {}) {
    if (Array.isArray(e3))
      return k2(e3[0]);
    if (typeof e3 == "string") {
      let [i3, r3] = e3.split("#");
      return r3 ? { type: "SpecificResource", source: { id: i3, type: n2.typeHint || "Unknown" }, selector: { type: "FragmentSelector", value: r3 } } : { type: "SpecificResource", source: { id: i3, type: n2.typeMap && n2.typeMap[i3] || n2.typeHint || "Unknown" } };
    }
    if (e3.type === "Choice" || e3.type === "List" || e3.type === "Composite" || e3.type === "Independents")
      return k2(e3.items[0]);
    if (!e3.type && "source" in e3 && (e3.type = "SpecificResource"), e3.type === "SpecificResource")
      return e3.source.type === "Canvas" && e3.source.partOf && typeof e3.source.partOf == "string" && (e3.source.partOf = [{ id: e3.source.partOf, type: "Manifest" }]), e3.selector ? { type: "SpecificResource", source: e3.source, selector: e3.selector } : { type: "SpecificResource", source: e3.source };
    if (e3.id) {
      e3.type === "Canvas" && e3.partOf && typeof e3.partOf == "string" && (e3.partOf = [{ id: e3.partOf, type: "Manifest" }]);
      let [i3, r3] = e3.id.split("#");
      return r3 ? { type: "SpecificResource", source: { ...e3, id: i3 }, selector: { type: "FragmentSelector", value: r3 } } : { type: "SpecificResource", source: { ...e3, id: i3 } };
    }
    return { type: "SpecificResource", source: e3 };
  }
  function se2() {
    return { Collection: {}, Manifest: {}, Canvas: {}, AnnotationPage: {}, AnnotationCollection: {}, Annotation: {}, ContentResource: {}, Range: {}, Service: {}, Selector: {}, Agent: {} };
  }
  function Z2(e3, n2) {
    if (typeof e3 == "string")
      return { id: e3, type: n2 };
    if (!e3.id)
      throw new Error(`Invalid resource does not have an ID (${JSON.stringify(e3)}, ${n2})`);
    return e3;
  }
  function le2(e3, n2) {
    return (i3, r3) => {
      let t3 = e3[i3] ? e3[i3] : {};
      return (a3, s2) => {
        let c2 = Z2(a3, r3 || i3);
        return c2 && c2.id && i3 ? (t3[c2.id] = t3[c2.id] ? W2(t3[c2.id], c2, { parent: s2.parent, isTopLevel: n2.id === c2.id }) : W2({ id: c2.id, type: c2.type }, c2, { parent: s2.parent, isTopLevel: n2.id === c2.id }), { id: c2.id, type: i3 === "ContentResource" ? i3 : c2.type }) : c2;
      };
    };
  }
  function $2(e3, n2, i3) {
    if (!n2)
      return e3;
    if (Array.isArray(e3)) {
      if (!Array.isArray(n2))
        throw new Error("Cannot merge array with non-array");
      let r3 = [...e3];
      for (let t3 of n2)
        if (t3["@id"] && !t3.id && (t3.id = t3["@id"]), t3["@type"] && !t3.type && (t3.type = t3["@type"]), t3 != null)
          if (Array.isArray(t3))
            r3.push(t3);
          else if (typeof t3 == "object" && t3.id && t3.type) {
            let a3 = r3.findIndex((s2) => s2.id === t3.id && s2.type === t3.type);
            a3 >= 0 && (r3[a3] = $2(r3[a3], t3));
          } else
            e3.indexOf(t3) === -1 && r3.push(t3);
      return r3;
    } else if (typeof e3 == "object") {
      if (Array.isArray(n2) || typeof n2 != "object")
        throw new Error("Cannot merge object with non-object");
      let r3 = { ...e3 }, t3 = [], a3 = [], s2 = Object.keys(e3).filter((l4) => l4 !== d4 && l4 !== "id" && l4 !== "type"), c2 = {}, A2 = {};
      for (let [l4, u3] of Object.entries(n2)) {
        if (l4 === d4 || l4 === "id" || l4 === "type")
          continue;
        let y4 = r3[l4];
        y4 === u3 ? a3.push(l4) : y4 === o3 || !y4 ? (t3.push(l4), r3[l4] = u3) : (y4 && u3 && (c2[l4] = y4, A2[l4] = u3), r3[l4] = $2(y4, u3), r3[l4] === c2[l4] && (a3.push(l4), delete c2[l4]));
      }
      if (i3 && (i3.parent && i3.parent.id || i3.isTopLevel)) {
        let l4 = [], u3 = {};
        if (i3.parent ? u3[g3] = i3.parent.id : i3.isTopLevel && (u3[g3] = e3.id), r3[d4] && r3[d4].length) {
          let y4 = !(r3[d4] || []).find((v3) => v3["@explicit"]), C2 = t3.length > 0 || a3.length !== s2.length;
          if (y4 && C2)
            for (let v3 of r3[d4]) {
              let p4 = { ...v3 }, _3 = Object.keys(c2);
              if (p4) {
                p4["@explicit"] = true;
                for (let M3 of s2)
                  M3 !== d4 && (p4[M3] = w2);
                for (let M3 of _3)
                  p4[M3] = c2[M3];
              }
              l4.push(p4);
            }
          else
            l4.push(...r3[d4]);
          if (C2) {
            let v3 = Object.keys(A2);
            u3["@explicit"] = true;
            for (let p4 of t3)
              u3[p4] = w2;
            for (let p4 of a3)
              u3[p4] = w2;
            for (let p4 of v3)
              u3[p4] = A2[p4];
          }
        }
        u3.id = r3.id, u3.type = r3.type, l4.push(u3), r3[d4] = l4;
      }
      return r3;
    } else if (e3)
      return e3;
    return n2;
  }
  function W2(e3, n2, i3) {
    if (typeof e3 == "string")
      return e3;
    if (n2.id !== e3.id || n2.type !== e3.type) {
      if (n2.type === "ImageService3")
        return n2;
      if (e3.type === "ImageService3")
        return e3;
      throw new Error(`Can only merge entities with identical identifiers and type! ${n2.type}(${n2.id}) => ${e3.type}(${e3.id})`);
    }
    return $2({ ...e3 }, n2, i3);
  }
  function ce2(e3) {
    return (n2, i3) => (r3) => {
      let { id: t3, type: a3 } = Z2(r3, i3 || n2);
      if (typeof t3 > "u")
        throw new Error("Found invalid entity without an ID.");
      return n2 === "ContentResource" || n2 === "Service" ? e3[t3] = n2 : e3[t3] = a3, r3;
    };
  }
  function fe2(e3) {
    let n2 = Object.assign({}, e3);
    if (n2["@id"] && (n2.id = n2["@id"]), n2["@type"] && (n2.type = n2["@type"]), n2.service) {
      let i3 = [];
      n2.service = Array.isArray(n2.service) ? n2.service : [n2.service];
      for (let r3 of n2.service)
        i3.push({ id: r3["@id"] || r3.id, type: r3["@type"] || r3.type });
      n2.service = i3;
    }
    return Object.assign({}, Q2, n2);
  }
  function ue2(e3) {
    return (n2) => {
      e3.Service = e3.Service ? e3.Service : {};
      let i3 = n2.id || n2["@id"], r3 = fe2(n2);
      return r3 && r3.id && (e3.Service[r3.id] ? e3.Service[i3] = W2(e3.Service[i3], r3) : e3.Service[i3] = r3), n2;
    };
  }
  function de2(e3) {
    let n2 = JSON.stringify(e3), i3 = 5381, r3 = n2.length;
    for (; r3; )
      i3 = i3 * 33 ^ n2.charCodeAt(--r3);
    let a3 = (i3 >>> 0).toString(16);
    return a3.length % 2 ? "0" + a3 : a3;
  }
  function U2(e3) {
    return (n2) => typeof n2 == "string" ? { id: n2, type: e3 } : n2.id ? n2.type ? n2 : { type: e3, ...n2 } : { id: `vault://${de2(n2)}`, type: e3, ...n2 };
  }
  function E3(e3) {
    return (n2) => ({ ...e3, ...n2 });
  }
  function D2(e3) {
    return Array.isArray(e3) ? e3 : [e3];
  }
  function pe2(e3) {
    return e3.body && (e3.body = D2(e3.body)), e3.seeAlso && (e3.seeAlso = D2(e3.seeAlso)), e3.audience && (e3.audience = D2(e3.audience)), e3.accessibility && (e3.accessibility = D2(e3.accessibility)), e3.motivation && (e3.motivation = D2(e3.motivation)), e3;
  }
  function ee2(e3, { typeHint: n2, partOfTypeHint: i3 } = {}) {
    if (typeof e3 == "string" && (e3 = { id: e3, type: n2 || "unknown" }), v2(e3))
      return typeof e3.source == "string" && (e3.source = { id: e3.source, type: n2 || "unknown" }), e3.source.type === "Canvas" && e3.source.partOf && typeof e3.source.partOf == "string" && (e3.source.partOf = [{ id: e3.source.partOf, type: i3 || "Manifest" }]), e3;
    let r3;
    if ((e3.id || "").indexOf("#") !== -1) {
      let [t3, a3] = (e3.id || "").split("#");
      e3.id = t3, a3 && (r3 = { type: "FragmentSelector", value: a3 });
    }
    return { type: "SpecificResource", source: e3, selector: r3 };
  }
  function ye2(e3) {
    let n2 = Object.assign({}, e3);
    return e3 && e3.items && (n2.items = e3.items.map((i3) => typeof i3 == "string" || i3.type === "Canvas" ? ee2(i3) : i3)), n2;
  }
  function me2(e3) {
    let n2 = Object.assign({}, e3);
    return n2.start ? (n2.start = ee2(n2.start, { typeHint: "Canvas" }), n2) : e3;
  }
  function ve2(e3) {
    let n2 = Object.assign({}, e3);
    return n2.target ? (n2.target = k2(n2.target, { typeHint: "Canvas" }), n2) : e3;
  }
  function ge2(e3) {
    return e3;
  }
  function q2(e3) {
    return typeof e3.items > "u" && (e3[T2] = true), e3;
  }
  function Ue(e3) {
    let n2 = be(e3), i3 = se2(), r3 = {}, t3 = le2(i3, n2), a3 = ce2(r3), c2 = new l3({ collection: [q2, E3(X2), a3("Collection"), t3("Collection")], manifest: [q2, E3(Y2), me2, a3("Manifest"), t3("Manifest")], canvas: [E3(G3), a3("Canvas"), t3("Canvas")], annotationPage: [q2, U2("AnnotationPage"), E3(K2), a3("AnnotationPage"), t3("AnnotationPage")], annotation: [U2("Annotation"), pe2, ve2, a3("Annotation"), t3("Annotation")], contentResource: [U2("ContentResource"), a3("ContentResource"), t3("ContentResource")], range: [E3(J2), ye2, a3("Range", "Canvas"), t3("Range", "Canvas")], agent: [E3(B3), a3("Agent"), t3("Agent")], specificResource: [ge2], service: [ue2(i3)] }).traverseUnknown(n2);
    return { entities: i3, resource: c2, mapping: r3 };
  }

  // src/vault/utility/typesafe-actions-runtime.ts
  var createAction = function createAction2(type) {
    return function() {
      const base = { type, getType: () => type, toString: () => type };
      return (payload, meta) => ({
        ...base,
        ...payload !== void 0 && { payload },
        ...meta !== void 0 && { meta }
      });
    };
  };

  // src/vault/actions/entity-actions.ts
  var IMPORT_ENTITIES = "@iiif/IMPORT_ENTITIES";
  var MODIFY_ENTITY_FIELD = "@iiif/MODIFY_ENTITY_FIELD";
  var REORDER_ENTITY_FIELD = "@iiif/REORDER_ENTITY_FIELD";
  var ADD_REFERENCE = "@iiif/ADD_REFERENCE";
  var UPDATE_REFERENCE = "@iiif/UPDATE_REFERENCE";
  var REMOVE_REFERENCE = "@iiif/REMOVE_REFERENCE";
  var ADD_METADATA = "@iiif/ADD_METADATA";
  var REMOVE_METADATA = "@iiif/REMOVE_METADATA";
  var UPDATE_METADATA = "@iiif/UPDATE_METADATA";
  var REORDER_METADATA = "@iiif/REORDER_METADATA";
  var importEntities = createAction(IMPORT_ENTITIES)();
  var modifyEntityField = createAction(MODIFY_ENTITY_FIELD)();
  var reorderEntityField = createAction(REORDER_ENTITY_FIELD)();
  var addReference = createAction(ADD_REFERENCE)();
  var removeReference = createAction(REMOVE_REFERENCE)();
  var updateReference = createAction(UPDATE_REFERENCE)();
  var addMetadata = createAction(ADD_METADATA)();
  var updateMetadata = createAction(UPDATE_METADATA)();
  var removeMetadata = createAction(REMOVE_METADATA)();
  var reorderMetadata = createAction(REORDER_METADATA)();

  // src/vault/actions/mapping-actions.ts
  var ADD_MAPPING = "@iiif/ADD_MAPPING";
  var ADD_MAPPINGS = "@iiif/ADD_MAPPINGS";
  var addMapping = createAction(ADD_MAPPING)();
  var addMappings = createAction(ADD_MAPPINGS)();

  // src/vault/actions/request-actions.ts
  var RESOURCE_ERROR = "RESOURCE_ERROR";
  var RESOURCE_LOADING = "RESOURCE_LOADING";
  var RESOURCE_READY = "RESOURCE_READY";
  var REQUEST_RESOURCE = "@iiif/REQUEST_RESOURCE";
  var REQUEST_ERROR = "@iiif/REQUEST_ERROR";
  var REQUEST_MISMATCH = "@iiif/REQUEST_MISMATCH";
  var REQUEST_COMPLETE = "@iiif/REQUEST_COMPLETE";
  var REQUEST_OFFLINE_RESOURCE = "@iiif/REQUEST_OFFLINE_RESOURCE";
  var requestResource = createAction(REQUEST_RESOURCE)();
  var requestError = createAction(REQUEST_ERROR)();
  var requestMismatch = createAction(REQUEST_MISMATCH)();
  var requestComplete = createAction(REQUEST_COMPLETE)();
  var requestOfflineResource = createAction(REQUEST_OFFLINE_RESOURCE)();

  // src/vault/actions/batch-actions.ts
  var BATCH_ACTIONS = "@iiif/BATCH";
  var BATCH_IMPORT = "@iiif/BATCH_IMPORT";
  var batchActions = createAction(BATCH_ACTIONS)();
  var batchImport = createAction(BATCH_IMPORT)();

  // src/vault/utility/action-list-from-resource.ts
  var actionListFromResource = (id, response) => {
    const { entities, resource, mapping } = Ue(response);
    if (resource.id === void 0) {
      return [requestError({ id, message: "ID is not defined in resource." })];
    }
    const actions = [importEntities({ entities }), addMappings({ mapping })];
    if (resource.id !== id) {
      actions.push(addMapping({ id, type: resource.type }));
      actions.push(requestMismatch({ requestId: id, actualId: resource.id }));
    }
    actions.push(requestComplete({ id }));
    return actions;
  };

  // src/vault/utility/are-inputs-equal.ts
  var safeIsNaN = Number.isNaN || function ponyfill(value) {
    return typeof value === "number" && value !== value;
  };
  function isEqual(first, second) {
    if (first === second) {
      return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
      return true;
    }
    return false;
  }
  function areInputsEqual(newInputs, lastInputs) {
    if (!Array.isArray(newInputs) || !Array.isArray(lastInputs)) {
      return newInputs === lastInputs;
    }
    if (newInputs.length !== lastInputs.length) {
      return false;
    }
    for (let i3 = 0; i3 < newInputs.length; i3++) {
      if (!isEqual(newInputs[i3], lastInputs[i3])) {
        return false;
      }
    }
    return true;
  }

  // src/vault/utility/resolve-if-exists.ts
  function resolveIfExists(state, url, parent) {
    const request = state.iiif.requests[url];
    const resourceType = state.iiif.mapping[url];
    if (!resourceType || !state.iiif.entities[resourceType][request.resourceUri]) {
      return void 0;
    }
    const fullEntity = state.iiif.entities[resourceType][request.resourceUri];
    if (fullEntity && fullEntity[d4]) {
      const framing = fullEntity[d4].find((t3) => {
        return parent ? t3[g3] === parent.id : t3[g3] === fullEntity.id;
      });
      return ae2(fullEntity, framing);
    }
    return fullEntity;
  }

  // src/vault/utility/is-promise.ts
  function isPromise(value) {
    return value && typeof value.then === "function";
  }

  // src/vault/utility/create-fetch-helper.ts
  function createFetchHelper(vault, fetcher, { waitTimeout = 30 } = {}) {
    return (url, options, mapper) => {
      const store = vault.getStore();
      const state = store.getState();
      const request = state.iiif.requests[url];
      if (request) {
        if (request.loadingState === RESOURCE_READY) {
          const resolvedEntity = resolveIfExists(state, url);
          if (resolvedEntity) {
            return resolvedEntity;
          }
        }
        switch (request.loadingState) {
          case RESOURCE_ERROR:
            break;
          case RESOURCE_LOADING: {
            return (async () => {
              let cleanupSubscription;
              let didContinue = false;
              try {
                const resolvedEntity = await Promise.race([
                  new Promise((resolve, reject) => {
                    if (didContinue) {
                      return;
                    }
                    cleanupSubscription = store.subscribe(() => {
                      const latestState = store.getState();
                      if (latestState.iiif.requests[url].loadingState === RESOURCE_ERROR) {
                        reject();
                        return;
                      }
                      if (latestState.iiif.requests[url].loadingState === RESOURCE_READY) {
                        const maybeResolvedEntity = resolveIfExists(latestState, url);
                        if (maybeResolvedEntity) {
                          resolve(maybeResolvedEntity);
                        } else {
                          reject();
                        }
                      }
                    });
                  }),
                  new Promise(
                    (resolve, reject) => setTimeout(
                      () => {
                        didContinue = true;
                        reject();
                      },
                      waitTimeout * 60 * 1e3
                    )
                  )
                ]);
                if (cleanupSubscription) {
                  cleanupSubscription();
                }
                if (resolvedEntity) {
                  return resolvedEntity;
                }
              } catch (e3) {
                if (cleanupSubscription) {
                  cleanupSubscription();
                }
              }
            })();
          }
        }
      }
      vault.dispatch(requestResource({ id: url }));
      const importResource = (resource) => {
        if (!resource) {
          return void 0;
        }
        if (!resource.id && !resource["@id"]) {
          if (resource["@type"]) {
            resource["@id"] = url;
            resource.id = url;
          } else {
            resource.id = url;
          }
        }
        const toDispatch = actionListFromResource(url, resource);
        vault.dispatch(batchActions({ actions: toDispatch }));
        return resolveIfExists(store.getState(), url);
      };
      try {
        const resourceOrPromise = fetcher(url, options);
        if (isPromise(resourceOrPromise)) {
          return (async () => {
            try {
              let data = await resourceOrPromise;
              if (mapper) {
                data = mapper(data);
              }
              return importResource(data);
            } catch (err) {
              vault.dispatch(requestError({ id: url, message: err.toString() }));
              throw err;
            }
          })();
        }
        return importResource(mapper ? mapper(resourceOrPromise) : resourceOrPromise);
      } catch (err) {
        vault.dispatch(requestError({ id: url, message: err.toString() }));
        throw err;
      }
    };
  }

  // src/vault/utility/get-default-entities.ts
  function getDefaultEntities() {
    return {
      Collection: {},
      Manifest: {},
      Canvas: {},
      AnnotationPage: {},
      AnnotationCollection: {},
      Annotation: {},
      ContentResource: {},
      Range: {},
      Service: {},
      Selector: {},
      Agent: {}
    };
  }

  // src/vault/utility/resolve-list.ts
  function resolveList(state, items) {
    const returnItems = [];
    for (const ref of items) {
      if (state.iiif.entities[ref.type] && state.iiif.entities[ref.type][ref.id]) {
        returnItems.push(state.iiif.entities[ref.type][ref.id]);
      }
    }
    return returnItems;
  }
  return __toCommonJS(vault_utility_exports);
})();
