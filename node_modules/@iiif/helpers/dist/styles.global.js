"use strict";
var IIIFHelpers = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // src/styles.ts
  var styles_exports = {};
  __export(styles_exports, {
    createStylesHelper: () => createStylesHelper
  });

  // src/compat.ts
  var metaState = {};
  var compatVault = {
    get(nonRef) {
      return nonRef;
    },
    setMetaValue([id, meta, key], value) {
      const oldValue = compatVault.getResourceMeta(id, meta);
      const oldValueItem = oldValue ? oldValue[key] : void 0;
      const newValue = typeof value === "function" ? value(oldValueItem) : value;
      metaState[id] = {
        ...metaState[id] || {},
        [meta]: {
          ...(metaState[id] || {})[meta] || {},
          [key]: newValue
        }
      };
    },
    getResourceMeta: (resource, metaKey) => {
      const resourceMeta = metaState[resource];
      if (!resourceMeta) {
        return void 0;
      }
      if (!metaKey) {
        return resourceMeta;
      }
      return resourceMeta[metaKey];
    },
    async load(id) {
      const idToLoad = typeof id === "string" ? id : id.id;
      return fetch(idToLoad).then((response) => response.json());
    },
    requestStatus(id) {
      return void 0;
    }
  };

  // src/styles.ts
  function createStylesHelper(vault = compatVault) {
    return {
      applyStyles(resource, scope, styles) {
        const id = typeof resource === "string" ? resource : resource.id;
        return vault.setMetaValue([id, "styles", scope], styles);
      },
      getAppliedStyles(resource) {
        const id = typeof resource === "string" ? resource : resource.id;
        return vault.getResourceMeta(id, "styles");
      }
    };
  }
  return __toCommonJS(styles_exports);
})();
