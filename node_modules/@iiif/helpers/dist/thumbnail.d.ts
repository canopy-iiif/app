import { Reference, CollectionItemSchemas, ContentResource } from '@iiif/presentation-3';
import { CollectionNormalized, ManifestNormalized, CanvasNormalized, AnnotationNormalized, AnnotationPageNormalized } from '@iiif/presentation-3-normalized';
import { C as CompatVault } from './compat-Amh8ckgU.js';
import { c as ImageServiceLoader, F as FixedSizeImage, d as FixedSizeImageService, V as VariableSizeImage, U as UnknownSizeImage, e as ImageCandidate, f as ImageCandidateRequest } from './image-service-loader-D7YX4Vxb.js';
import './vault-DPnFP2uJ.js';
import './vault-actions-DIpISlMs.js';
import 'typesafe-actions';
import '@iiif/parser';
import './vault-store.js';
import 'zustand/vanilla';
import './vault.js';

declare const imageServiceLoader: ImageServiceLoader;
type ThumbnailInput = string | Reference<CollectionItemSchemas> | Reference<'Collection'> | Reference<'Manifest'> | Reference<'Canvas'> | Reference<'Annotation'> | Reference<'AnnotationPage'> | Reference<'ContentResource'> | CollectionNormalized | ManifestNormalized | CanvasNormalized | AnnotationNormalized | AnnotationPageNormalized | ContentResource | undefined;
type ThumbnailOutput = Promise<{
    best: null | undefined | FixedSizeImage | FixedSizeImageService | VariableSizeImage | UnknownSizeImage;
    fallback: Array<ImageCandidate>;
    log: string[];
}>;
declare function getThumbnail(input: ThumbnailInput, { vault, dereference, ...options }?: ImageCandidateRequest & {
    vault?: CompatVault;
    dereference?: boolean;
}): ThumbnailOutput;
declare function createThumbnailHelper(vault?: CompatVault, dependencies?: {
    imageServiceLoader?: ImageServiceLoader;
}): {
    getBestThumbnailAtSize: (input: ThumbnailInput, request: ImageCandidateRequest, dereference?: boolean, candidates?: Array<ImageCandidate>, dimensions?: {
        width: number;
        height: number;
    }) => ThumbnailOutput;
};

export { type ThumbnailInput, type ThumbnailOutput, createThumbnailHelper, getThumbnail, imageServiceLoader };
