import {
  ImageServiceLoader,
  getFixedSizeFromImage
} from "./chunk-4I45SZTR.js";
import {
  compatVault
} from "./chunk-LVD5NUFB.js";

// src/thumbnail.ts
var imageServiceLoader = new ImageServiceLoader();
var helpers = /* @__PURE__ */ new Map();
function getThumbnail(input, {
  vault = compatVault,
  dereference = false,
  ...options
} = {}) {
  let helper = helpers.get(vault);
  if (!helper) {
    helper = createThumbnailHelper(vault);
    helpers.set(vault, helper);
  }
  return helper.getBestThumbnailAtSize(input, options, dereference);
}
function createThumbnailHelper(vault = compatVault, dependencies = {}) {
  const loader = dependencies.imageServiceLoader || imageServiceLoader;
  async function getBestThumbnailAtSize(input, request, dereference = false, candidates = [], dimensions) {
    const thumbnailNotFound = () => loader.getThumbnailFromResource(void 0, request, dereference, candidates);
    if (!input) {
      return await loader.getThumbnailFromResource(void 0, request, dereference, candidates);
    }
    if (typeof input === "string") {
      const fixed = getFixedSizeFromImage(input);
      if (fixed) {
        candidates.push(fixed);
      }
      return await loader.getThumbnailFromResource(void 0, request, dereference, candidates);
    }
    const fullInput = vault.get(input, { skipSelfReturn: false });
    if (typeof fullInput === "string") {
      return { best: getFixedSizeFromImage(fullInput), fallback: [], log: [] };
    }
    if (!fullInput) {
      return await thumbnailNotFound();
    }
    const parseThumbnail = async (resource) => {
      if (resource && resource.thumbnail && resource.thumbnail.length) {
        const thumbnail = vault.get(resource.thumbnail[0]);
        const potentialThumbnails = await loader.getImageCandidates(thumbnail, dereference);
        if (potentialThumbnails && potentialThumbnails.length) {
          candidates.push(...potentialThumbnails);
        }
      }
    };
    await parseThumbnail(fullInput);
    switch (fullInput.type) {
      case "Annotation": {
        const contentResources = Array.isArray(fullInput.body) ? fullInput.body : [fullInput.body];
        const firstContentResources = vault.get(contentResources[0]);
        if (dimensions && !firstContentResources.width) {
          firstContentResources.width = dimensions.width;
          firstContentResources.height = dimensions.height;
        }
        return await loader.getThumbnailFromResource(firstContentResources, request, dereference, candidates);
      }
      case "Canvas": {
        const canvas = fullInput;
        return getBestThumbnailAtSize(canvas.items[0], request, dereference, candidates, {
          width: canvas.width,
          height: canvas.height
        });
      }
      case "AnnotationPage": {
        const annotationPage = fullInput;
        return getBestThumbnailAtSize(annotationPage.items[0], request, dereference, candidates, dimensions);
      }
      case "Choice": {
        const choice = fullInput;
        if (!choice.items || choice.items[0]) {
          return await thumbnailNotFound();
        }
        return getBestThumbnailAtSize(choice.items[0], request, dereference, candidates, dimensions);
      }
      case "Collection": {
        const collection = fullInput;
        const firstManifest = collection.items[0];
        if (!firstManifest) {
          return await thumbnailNotFound();
        }
        return getBestThumbnailAtSize(firstManifest, request, dereference, candidates, dimensions);
      }
      case "Manifest": {
        const manifest = fullInput;
        const firstCanvas = manifest.items[0];
        if (!firstCanvas) {
          return await thumbnailNotFound();
        }
        return getBestThumbnailAtSize(firstCanvas, request, dereference, candidates, dimensions);
      }
      case "SpecificResource":
      case "Image":
      case "Dataset":
      case "Sound":
      case "Text":
      case "TextualBody":
      case "Video":
        if (dimensions && !fullInput.width) {
          fullInput.width = dimensions.width;
          fullInput.height = dimensions.height;
        }
        return loader.getThumbnailFromResource(fullInput, request, dereference, candidates);
    }
    return await thumbnailNotFound();
  }
  return {
    getBestThumbnailAtSize
  };
}

export {
  imageServiceLoader,
  getThumbnail,
  createThumbnailHelper
};
