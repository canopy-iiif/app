"use strict";
var IIIFHelpers = (() => {
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // src/vault.ts
  var vault_exports2 = {};
  __export(vault_exports2, {
    Vault: () => Vault,
    globalVault: () => globalVault
  });

  // node_modules/.pnpm/@iiif+parser@2.2.0/node_modules/@iiif/parser/dist/chunk-J657UVVW.js
  var e = "http://library.stanford.edu/iiif/image-api/compliance.html#level0";
  var i = "http://library.stanford.edu/iiif/image-api/compliance.html#level1";
  var t = "http://library.stanford.edu/iiif/image-api/compliance.html#level2";
  var o = "http://library.stanford.edu/iiif/image-api/conformance.html#level0";
  var r = "http://library.stanford.edu/iiif/image-api/conformance.html#level1";
  var a = "http://library.stanford.edu/iiif/image-api/conformance.html#level2";
  var _ = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0";
  var I = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1";
  var l = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2";
  var p = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level0";
  var s = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1";
  var n = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2";
  var E = "http://iiif.io/api/image/1/level0.json";
  var c = "http://iiif.io/api/image/1/profiles/level0.json";
  var F = "http://iiif.io/api/image/1/level1.json";
  var m = "http://iiif.io/api/image/1/profiles/level1.json";
  var f = "http://iiif.io/api/image/1/level2.json";
  var x = "http://iiif.io/api/image/1/profiles/level2.json";
  var A = "http://iiif.io/api/image/2/level0.json";
  var L = "http://iiif.io/api/image/2/profiles/level0.json";
  var h = "http://iiif.io/api/image/2/level1.json";
  var y = "http://iiif.io/api/image/2/profiles/level1.json";
  var d = "http://iiif.io/api/image/2/level2.json";
  var g = "http://iiif.io/api/image/2/profiles/level2.json";
  var M = "level0";
  var O = "level1";
  var v = "level2";
  var u = "http://iiif.io/api/image/2/level0";
  var N = "http://iiif.io/api/image/2/level1";
  var G = "http://iiif.io/api/image/2/level2";
  var R = [G, t, a, l, n, f, x, d, g, v];
  var C = [...R, N, i, r, I, s, F, m, h, y, O];
  var B = [u, N, G, e, i, t, o, r, a, _, I, l, p, s, n, E, c, F, m, f, x, A, L, h, y, d, g, M, O, v];
  var P = B;

  // node_modules/.pnpm/@iiif+parser@2.2.0/node_modules/@iiif/parser/dist/chunk-NJNTZ6QT.js
  function r2(e3) {
    for (let n2 in e3)
      (typeof e3[n2] > "u" || e3[n2] === null) && delete e3[n2];
    return e3;
  }
  function i2(e3) {
    return Array.isArray(e3) ? e3 : e3 ? [e3] : [];
  }

  // node_modules/.pnpm/@iiif+parser@2.2.0/node_modules/@iiif/parser/dist/chunk-D22QKJZO.js
  var d2 = Object.defineProperty;
  var e2 = (b3, a3, c2) => a3 in b3 ? d2(b3, a3, { enumerable: true, configurable: true, writable: true, value: c2 }) : b3[a3] = c2;
  var f2 = (b3, a3, c2) => (e2(b3, typeof a3 != "symbol" ? a3 + "" : a3, c2), c2);

  // node_modules/.pnpm/@iiif+parser@2.2.0/node_modules/@iiif/parser/dist/chunk-RCT3CZAV.js
  var P2 = ["sc:Collection", "sc:Manifest", "sc:Canvas", "sc:AnnotationList", "oa:Annotation", "sc:Range", "sc:Layer", "sc:Sequence", "oa:Choice", "Service", "ContentResource"];
  function S(t3) {
    if (typeof t3 > "u" || t3 === null)
      throw new Error("Null or undefined is not a valid entity.");
    if (Array.isArray(t3))
      throw new Error("Array is not a valid entity");
    if (typeof t3 != "object")
      throw new Error(`${typeof t3} is not a valid entity`);
    if (typeof t3["@type"] == "string") {
      let e3 = P2.indexOf(t3["@type"]);
      if (e3 !== -1)
        return P2[e3];
    }
    if (t3.profile)
      return "Service";
    if (t3.format || t3["@type"])
      return "ContentResource";
    throw new Error("Resource type is not known");
  }
  var h2 = class t2 {
    constructor(e3, n2 = {}) {
      f2(this, "traversals");
      f2(this, "options");
      this.traversals = { collection: [], manifest: [], canvas: [], annotationList: [], sequence: [], annotation: [], contentResource: [], choice: [], range: [], service: [], layer: [], ...e3 }, this.options = { convertPropsToArray: true, mergeMemberProperties: true, allowUndefinedReturn: false, ...n2 };
    }
    static all(e3) {
      return new t2({ collection: [e3], manifest: [e3], canvas: [e3], annotationList: [e3], sequence: [e3], annotation: [e3], contentResource: [e3], choice: [e3], range: [e3], service: [e3], layer: [e3] });
    }
    traverseCollection(e3) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseCollectionItems(e3))), this.traversals.collection);
    }
    traverseCollectionItems(e3) {
      if (this.options.mergeMemberProperties) {
        let n2 = [...(e3.manifests || []).map((r3) => typeof r3 == "string" ? { "@id": r3, "@type": "sc:Manifest" } : r3), ...(e3.collections || []).map((r3) => typeof r3 == "string" ? { "@id": r3, "@type": "sc:Collection" } : r3), ...e3.members || []], i3 = [], a3 = n2.filter((r3) => i3.includes(r3["@id"]) ? false : (i3.push(r3["@id"]), true));
        delete e3.collections, delete e3.manifests, e3.members = a3;
      }
      return e3.manifests && (e3.manifests = e3.manifests.map((n2) => this.traverseManifest(typeof n2 == "string" ? { "@id": n2, "@type": "sc:Manifest" } : n2))), e3.collections && (e3.collections = e3.collections.map((n2) => this.traverseCollection(typeof n2 == "string" ? { "@id": n2, "@type": "sc:Collection" } : n2))), e3.members && (e3.members = e3.members.map((n2) => typeof n2 == "string" ? n2 : n2["@type"] === "sc:Collection" ? this.traverseCollection(n2) : n2["@type"] === "sc:Manifest" ? this.traverseManifest(n2) : this.traverseUnknown(n2))), e3;
    }
    traverseManifest(e3) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseManifestItems(e3))), this.traversals.manifest);
    }
    traverseManifestItems(e3) {
      return e3.sequences && (e3.sequences = e3.sequences.map((n2) => this.traverseSequence(n2))), e3.structures && (e3.structures = e3.structures.map((n2) => this.traverseRange(n2))), e3;
    }
    traverseSequence(e3) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseSequenceItems(e3))), this.traversals.sequence);
    }
    traverseSequenceItems(e3) {
      return e3.canvases && (e3.canvases = e3.canvases.map((n2) => this.traverseCanvas(n2))), e3;
    }
    traverseCanvas(e3) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseCanvasItems(e3))), this.traversals.canvas);
    }
    traverseCanvasItems(e3) {
      return e3.images && (e3.images = e3.images.map((n2) => this.traverseAnnotation(n2))), e3.otherContent && (e3.otherContent = e3.otherContent.map((n2) => this.traverseAnnotationList(n2))), e3;
    }
    traverseRange(e3) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseRangeItems(e3))), this.traversals.range);
    }
    traverseRangeItems(e3) {
      if (this.options.mergeMemberProperties) {
        let n2 = [...(e3.ranges || []).map((i3) => typeof i3 == "string" ? { "@id": i3, "@type": "sc:Range" } : i3), ...(e3.canvases || []).map((i3) => typeof i3 == "string" ? { "@id": i3, "@type": "sc:Canvas" } : i3), ...e3.members || []];
        delete e3.ranges, delete e3.canvases, e3.members = n2.length ? n2.map((i3) => this.traverseUnknown(i3)) : void 0;
      }
      return e3;
    }
    traverseAnnotationList(e3) {
      let n2 = typeof e3 == "string" ? { "@id": e3, "@type": "sc:AnnotationList" } : e3;
      return this.traverseType(this.traverseDescriptive(this.traverseAnnotationListItems(n2)), this.traversals.annotationList);
    }
    traverseAnnotationListItems(e3) {
      return e3.resources && (e3.resources = e3.resources.map((n2) => this.traverseAnnotation(n2))), e3;
    }
    traverseAnnotation(e3) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(this.traverseAnnotationItems(e3))), this.traversals.annotation);
    }
    traverseAnnotationItems(e3) {
      return e3.resource && (Array.isArray(e3.resource) ? e3.resource = e3.resource.map((n2) => this.traverseContentResource(n2)) : e3.resource = this.traverseContentResource(e3.resource)), e3.on, e3;
    }
    traverseLayer(e3) {
      return this.traverseType(this.traverseLinking(this.traverseLayerItems(e3)), this.traversals.layer);
    }
    traverseLayerItems(e3) {
      return e3.otherContent && (e3.otherContent = e3.otherContent.map((n2) => this.traverseAnnotationList(n2))), e3;
    }
    traverseChoice(e3) {
      return this.traverseType(this.traverseChoiceItems(e3), this.traversals.choice);
    }
    traverseChoiceItems(e3) {
      return e3.default && e3.default !== "rdf:nil" && (e3.default = this.traverseContentResource(e3.default)), e3.item && e3.item !== "rdf:nil" && (e3.item = e3.item.map((n2) => this.traverseContentResource(n2))), e3;
    }
    traverseService(e3) {
      return this.traverseType(this.traverseLinking(e3), this.traversals.service);
    }
    traverseContentResource(e3) {
      return e3["@type"] === "oa:Choice" ? this.traverseChoice(e3) : this.traverseType(this.traverseDescriptive(this.traverseLinking(e3)), this.traversals.contentResource);
    }
    traverseUnknown(e3) {
      if (!e3["@type"] || typeof e3 == "string")
        return e3;
      switch (S(e3)) {
        case "sc:Collection":
          return this.traverseCollection(e3);
        case "sc:Manifest":
          return this.traverseManifest(e3);
        case "sc:Canvas":
          return this.traverseCanvas(e3);
        case "sc:Sequence":
          return this.traverseSequence(e3);
        case "sc:Range":
          return this.traverseRange(e3);
        case "oa:Annotation":
          return this.traverseAnnotation(e3);
        case "sc:AnnotationList":
          return this.traverseAnnotationList(e3);
        case "sc:Layer":
          return this.traverseLayer(e3);
        case "Service":
          return this.traverseService(e3);
        case "oa:Choice":
          return this.traverseChoice(e3);
        case "ContentResource":
          return this.traverseContentResource(e3);
      }
      return e3.profile ? this.traverseService(e3) : e3;
    }
    traverseImageResource(e3) {
      let n2 = Array.isArray(e3), i3 = Array.isArray(e3) ? e3 : [e3], a3 = [];
      for (let r3 of i3)
        typeof r3 == "string" ? a3.push(this.traverseContentResource({ "@id": r3, "@type": "dctypes:Image" })) : a3.push(this.traverseContentResource(r3));
      return !n2 && !this.options.convertPropsToArray ? a3[0] : a3;
    }
    traverseDescriptive(e3) {
      return e3.thumbnail && (e3.thumbnail = this.traverseImageResource(e3.thumbnail)), e3.logo && (e3.logo = this.traverseImageResource(e3.logo)), e3;
    }
    traverseOneOrMoreServices(e3) {
      let n2 = Array.isArray(e3), i3 = Array.isArray(e3) ? e3 : [e3], a3 = [];
      for (let r3 of i3)
        a3.push(this.traverseService(r3));
      return !n2 && !this.options.convertPropsToArray ? a3[0] : a3;
    }
    traverseLinking(e3) {
      return e3.related && (e3.related = this.traverseOneOrManyType(e3.related, this.traversals.contentResource)), e3.rendering && (e3.rendering = this.traverseOneOrManyType(e3.rendering, this.traversals.contentResource)), e3.service && (e3.service = this.traverseOneOrMoreServices(e3.service)), e3.seeAlso && (e3.seeAlso = this.traverseOneOrManyType(e3.seeAlso, this.traversals.contentResource)), e3.within && (typeof e3.within == "string" || (e3.within = this.traverseOneOrManyType(e3.within, this.traversals.contentResource))), e3.startCanvas && (typeof e3.startCanvas == "string" ? e3.startCanvas = this.traverseType({ "@id": e3.startCanvas, "@type": "sc:Canvas" }, this.traversals.canvas) : e3.startCanvas && this.traverseType(e3.startCanvas, this.traversals.canvas)), e3.contentLayer && (typeof e3.contentLayer == "string" ? e3.contentLayer = this.traverseLayer({ "@id": e3.contentLayer, "@type": "sc:Layer" }) : e3.contentLayer = this.traverseLayer(e3.contentLayer)), e3;
    }
    traverseOneOrManyType(e3, n2) {
      if (!Array.isArray(e3))
        if (this.options.convertPropsToArray)
          e3 = [e3];
        else
          return this.traverseType(e3, n2);
      return e3.map((i3) => this.traverseType(i3, n2));
    }
    traverseType(e3, n2) {
      return n2.reduce((i3, a3) => {
        let r3 = a3(i3);
        return typeof r3 > "u" && !this.options.allowUndefinedReturn ? i3 : r3;
      }, e3);
    }
  };
  var O2 = "http://library.stanford.edu/iiif/image-api/compliance.html#level1";
  var w = "http://library.stanford.edu/iiif/image-api/compliance.html#level2";
  var b = "http://library.stanford.edu/iiif/image-api/conformance.html#level1";
  var F2 = "http://library.stanford.edu/iiif/image-api/conformance.html#level2";
  var D = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1";
  var N2 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2";
  var k = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1";
  var G2 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2";
  var j = "http://iiif.io/api/image/1/level1.json";
  var q = "http://iiif.io/api/image/1/profiles/level1.json";
  var V = "http://iiif.io/api/image/1/level2.json";
  var U = "http://iiif.io/api/image/1/profiles/level2.json";
  var $ = "http://iiif.io/api/image/2/level1.json";
  var W = "http://iiif.io/api/image/2/profiles/level1.json";
  var B2 = "http://iiif.io/api/image/2/level2.json";
  var H = "http://iiif.io/api/image/2/profiles/level2.json";
  var J = "level1";
  var z = "level2";
  var K = "http://iiif.io/api/image/2/level1";
  var Q = "http://iiif.io/api/image/2/level2";
  var _2 = [K, Q, O2, w, b, F2, D, N2, k, G2, j, q, V, U, $, W, B2, H, J, z];
  var y2 = { attributionLabel: "Attribution", lang: "none", providerId: "http://example.org/provider", providerName: "" };
  function X(t3) {
    if (typeof t3 == "string")
      return [t3];
    if (!t3)
      return [];
    let e3 = Array.isArray(t3) ? t3 : [t3], n2 = [];
    for (let i3 of e3) {
      if (typeof i3 == "string") {
        n2.push(i3);
        continue;
      }
      n2.push({ "@language": i3["@language"] || i3.language, "@value": i3["@value"] || i3.value });
    }
    return n2;
  }
  function u2(t3, e3 = "none") {
    if (!t3)
      return { none: [""] };
    let n2 = X(t3), i3 = {};
    for (let a3 of n2) {
      if (typeof a3 == "string") {
        i3[e3] = i3[e3] ? i3[e3] : [], i3[e3].push(a3 || "");
        continue;
      }
      if (!a3["@language"]) {
        i3[e3] = i3[e3] ? i3[e3] : [], i3[e3].push(a3["@value"] || "");
        continue;
      }
      let r3 = a3["@language"];
      i3[r3] = i3[r3] ? i3[r3] : [], i3[r3].push(a3["@value"] || "");
    }
    return Object.keys(i3).length === 0 ? { none: [""] } : i3;
  }
  function L2(t3) {
    if (Array.isArray(t3))
      return L2(t3.find((e3) => typeof e3 == "string"));
    if (R.indexOf(t3) !== -1)
      return "level2";
    if (_2.indexOf(t3) !== -1)
      return "level1";
    if (P.indexOf(t3) !== -1)
      return "level0";
    if (typeof t3 == "string")
      return t3;
  }
  function Y(t3) {
    let e3 = Array.isArray(t3) ? t3 : [t3];
    for (let n2 of e3)
      switch (n2) {
        case "http://iiif.io/api/image/2/context.json":
        case "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2":
          return "ImageService2";
        case "http://iiif.io/api/image/1/context.json":
        case "http://library.stanford.edu/iiif/image-api/1.1/context.json":
          return "ImageService1";
        case "http://iiif.io/api/annex/openannotation/context.json":
          return "ImageApiSelector";
      }
  }
  function Z(t3) {
    switch (t3) {
      case "http://iiif.io/api/image/2/level0.json":
      case "http://iiif.io/api/image/2/level1.json":
      case "http://iiif.io/api/image/2/level2.json":
        return "ImageService2";
      case "http://iiif.io/api/auth/1/kiosk":
      case "http://iiif.io/api/auth/1/login":
      case "http://iiif.io/api/auth/1/clickthrough":
      case "http://iiif.io/api/auth/1/external":
      case "http://iiif.io/api/auth/0/kiosk":
      case "http://iiif.io/api/auth/0/login":
      case "http://iiif.io/api/auth/0/clickthrough":
      case "http://iiif.io/api/auth/0/external":
        return "AuthCookieService1";
      case "http://iiif.io/api/auth/1/token":
      case "http://iiif.io/api/auth/0/token":
        return "AuthTokenService1";
      case "http://iiif.io/api/auth/1/logout":
      case "http://iiif.io/api/auth/0/logout":
        return "AuthLogoutService1";
      case "http://iiif.io/api/search/1/search":
      case "http://iiif.io/api/search/0/search":
        return "SearchService1";
      case "http://iiif.io/api/search/1/autocomplete":
      case "http://iiif.io/api/search/0/autocomplete":
        return "AutoCompleteService1";
    }
  }
  function R2(t3) {
    for (let e3 of ["sc", "oa", "dcterms", "dctypes", "iiif"])
      if (t3.startsWith(`${e3}:`))
        return t3.slice(e3.length + 1);
    return t3;
  }
  var ee = ["Collection", "Manifest", "Annotation", "AnnotationPage", "Range", "Service"];
  function m2(t3) {
    let e3 = t3["@id"] || t3.id, n2 = t3["@type"] || t3.type, i3 = t3.profile || void 0, a3 = t3["@context"] || void 0;
    if (i3) {
      let r3 = Z(i3);
      if (r3)
        return r3;
    }
    if (a3) {
      let r3 = Y(a3);
      if (r3)
        return r3;
    }
    if (n2) {
      if (Array.isArray(n2)) {
        if (n2.indexOf("oa:CssStylesheet") !== -1)
          return "CssStylesheet";
        if (n2.indexOf("cnt:ContentAsText") !== -1)
          return "TextualBody";
        n2 = n2[0];
      }
      for (let r3 of ["sc", "oa", "dcterms", "dctypes", "iiif"])
        if (n2.startsWith(`${r3}:`)) {
          n2 = n2.slice(r3.length + 1);
          break;
        }
      switch (n2) {
        case "Layer":
          return "AnnotationCollection";
        case "AnnotationList":
          return "AnnotationPage";
        case "cnt:ContentAsText":
          return "TextualBody";
      }
    }
    if (n2 && ee.indexOf(n2) !== -1)
      return n2;
    if (t3.format) {
      if (t3.format.startsWith("image/"))
        return "Image";
      if (t3.format.startsWith("text/") || t3.format === "application/pdf")
        return "Text";
      if (t3.format.startsWith("application/"))
        return "Dataset";
    }
    return e3 && (e3.endsWith(".jpg") || e3.endsWith(".png") || e3.endsWith(".jpeg")) ? "Image" : n2 || "unknown";
  }
  var te = /http(s)?:\/\/(creativecommons.org|rightsstatements.org)[^"'\\<\n]+/gm;
  function ne(t3) {
    let e3 = t3.match(te);
    return e3 ? e3[0] : t3;
  }
  function ie(t3, e3 = "Rights/License", n2 = "none") {
    let i3 = null, a3 = [], r3 = Array.isArray(t3) ? t3 : [t3];
    for (let s2 of r3) {
      let c2 = s2 ? ne(s2) : void 0;
      if (c2 && (c2.indexOf("creativecommons.org") !== -1 || c2.indexOf("rightsstatements.org") !== -1)) {
        c2.startsWith("https://") ? i3 = `http://${c2.slice(8)}` : i3 = c2;
        continue;
      }
      c2 && a3.push({ label: { [n2]: [e3] }, value: { [n2]: [c2] } });
    }
    return [i3, a3];
  }
  var re = ["http://iiif.io/api/presentation/2/context.json", "http://iiif.io/api/image/2/context.json", "http://iiif.io/api/image/1/context.json", "http://library.stanford.edu/iiif/image-api/1.1/context.json", "http://iiif.io/api/search/1/context.json", "http://iiif.io/api/search/0/context.json", "http://iiif.io/api/auth/1/context.json", "http://iiif.io/api/auth/0/context.json", "http://iiif.io/api/annex/openannotation/context.json"];
  function ae(t3) {
    if (t3) {
      let e3 = Array.isArray(t3) ? t3 : [t3], n2 = [];
      for (let i3 of e3)
        i3 === "http://iiif.io/api/presentation/2/context.json" && n2.push("http://iiif.io/api/presentation/3/context.json"), re.indexOf(i3) === -1 && n2.push(i3);
      if (e3.length)
        return n2.length === 1 ? n2[0] : n2;
    }
  }
  function se(t3) {
    return t3 ? t3.map((e3) => ({ label: u2(e3.label), value: u2(e3.value) })) : [];
  }
  var x2 = 0;
  function E2(t3, e3) {
    let n2 = encodeURI(t3.id || t3["@id"] || "").trim();
    return n2 && e3 ? `${n2}/${e3}` : n2 || (x2++, `http://example.org/${t3["@type"]}${e3 ? `/${e3}` : ""}/${x2}`);
  }
  function p2(t3) {
    let e3 = [...t3.behavior || []];
    t3.viewingHint && e3.push(t3.viewingHint);
    let n2;
    return Array.isArray(t3.motivation) ? n2 = t3.motivation.map(R2) : t3.motivation && (n2 = R2(t3.motivation)), { "@context": t3["@context"] ? ae(t3["@context"]) : void 0, id: (t3["@id"] || E2(t3)).trim(), type: m2(t3), behavior: e3.length ? e3 : void 0, height: t3.height ? t3.height : void 0, width: t3.width ? t3.width : void 0, motivation: n2, viewingDirection: t3.viewingDirection, profile: t3.profile, format: t3.format ? t3.format : void 0, duration: void 0, timeMode: void 0 };
  }
  function f3(t3) {
    let [e3, n2] = ie(t3.license), i3 = [...t3.metadata ? se(t3.metadata) : [], ...n2];
    return { rights: e3, metadata: i3.length ? i3 : void 0, label: t3.label ? u2(t3.label) : void 0, requiredStatement: t3.attribution ? { label: u2(y2.attributionLabel), value: u2(t3.attribution) } : void 0, navDate: t3.navDate, summary: t3.description ? u2(t3.description) : void 0, thumbnail: oe(t3.thumbnail) };
  }
  function oe(t3) {
    return t3 && (Array.isArray(t3) ? t3 : [t3]).map((n2) => typeof n2 == "string" ? { id: n2, type: "Image" } : (n2.type === "unknown" && (n2.type = "Image"), n2));
  }
  function pe(t3) {
    if (!t3.within)
      return;
    let e3 = Array.isArray(t3.within) ? t3.within : [t3.within], n2 = [];
    for (let i3 of e3)
      if (typeof i3 == "string") {
        if (i3)
          switch (t3["@type"]) {
            case "sc:Manifest":
              n2.push({ id: i3, type: "Collection" });
              break;
          }
      } else
        i3["@id"] && n2.push({ id: i3["@id"], type: m2(i3) });
    return n2.length ? n2 : void 0;
  }
  function l2(t3) {
    let e3 = t3.related ? Array.isArray(t3.related) ? t3.related : [t3.related] : [], n2 = t3.contentLayer;
    return { provider: t3.logo || e3.length ? [{ id: y2.providerId, type: "Agent", homepage: e3.length ? [e3[0]] : void 0, logo: t3.logo ? Array.isArray(t3.logo) ? t3.logo : [t3.logo] : void 0, label: u2(y2.providerName) }] : void 0, partOf: pe(t3), rendering: t3.rendering, seeAlso: t3.seeAlso, start: t3.startCanvas, service: t3.service ? i2(t3.service) : void 0, supplementary: n2 ? [n2] : void 0 };
  }
  function fe(t3) {
    return { chars: t3.chars, format: t3.format ? t3.format : void 0, language: t3.language };
  }
  function d3(t3, e3) {
    return t3 ? typeof t3 == "string" ? { id: t3, type: e3 } : typeof t3?.["@id"] == "string" ? { id: t3["@id"], type: e3 } : typeof t3.id == "string" ? { id: t3.id, type: e3 } : null : null;
  }
  function ce(t3) {
    let e3 = {};
    if (t3.first) {
      let n2 = d3(t3.first, "Collection");
      n2 && (e3.first = n2);
    }
    if ((t3.total || t3.total === 0) && (e3.total = t3.total), t3.prev) {
      let n2 = d3(t3.prev, "Collection");
      n2 && (e3.prev = n2);
    }
    if (t3.next) {
      let n2 = d3(t3.next, "Collection");
      n2 && (e3.next = n2);
    }
    return e3;
  }
  function le(t3) {
    let e3 = [];
    for (let n2 of t3) {
      let i3 = { ...n2 };
      i3.items && i3.items.length === 0 && delete i3.items, e3.push(i3);
    }
    return e3;
  }
  function ue(t3) {
    return r2({ ...p2(t3), ...f3(t3), ...l2(t3), ...ce(t3), items: le(t3.members) });
  }
  function he(t3) {
    let e3 = [], n2 = [], i3, a3;
    for (let s2 of t3.sequences || [])
      s2.canvases.length && e3.push(...s2.canvases), s2.behavior && n2.push(...s2.behavior), s2.viewingDirection && (a3 = s2.viewingDirection), s2.startCanvas && (i3 = s2.startCanvas);
    let r3 = p2(t3);
    return n2.length && (r3.behavior ? r3.behavior.push(...n2) : r3.behavior = n2), r2({ ...r3, ...f3(t3), ...l2(t3), viewingDirection: a3, start: i3, items: e3, structures: ve(t3.structures) });
  }
  function ve(t3) {
    if (!t3)
      return t3;
    let e3 = /* @__PURE__ */ new Map();
    for (let i3 of t3)
      e3.set(i3.id, i3);
    let n2 = [];
    for (let i3 of t3)
      if (i3.items) {
        let a3 = i3.items.map((r3) => typeof r3 == "string" ? (n2.push(r3), e3.get(r3) || r3) : r3 && r3.id ? (n2.push(r3.id), e3.get(r3.id) || r3) : r3);
        i3.items = a3;
      }
    return t3.filter((i3) => n2.indexOf(i3.id) === -1);
  }
  function de(t3) {
    return r2({ ...p2(t3), ...f3(t3), ...l2(t3), annotations: t3.otherContent && t3.otherContent.length ? t3.otherContent : void 0, items: t3.images && t3.images.length ? [{ id: E2(t3, "annotation-page"), type: "AnnotationPage", items: t3.images }] : void 0 });
  }
  function ye(t3) {
    return r2({ ...p2(t3), ...f3(t3), ...l2(t3), items: t3.resources && t3.resources.length ? t3.resources : void 0 });
  }
  function ge(t3) {
    return !t3.canvases || t3.canvases.length === 0 ? { canvases: [], behavior: [] } : { canvases: t3.canvases, behavior: t3.viewingHint ? [t3.viewingHint] : [], viewingDirection: t3.viewingDirection, startCanvas: t3.startCanvas };
  }
  function me(t3) {
    function e3(n2) {
      if (Array.isArray(n2)) {
        if (n2.length > 1)
          return { type: "List", items: n2.map(e3) };
        n2 = n2[0];
      }
      if (typeof n2 == "string")
        return encodeURI(n2).trim();
      if ("@type" in n2) {
        let i3;
        if (typeof n2.full == "string")
          i3 = n2.full;
        else if (n2.full["@type"] === "dctypes:Image")
          i3 = { id: n2.full["@id"], type: "Image" };
        else if (n2.full["@type"] === "sc:Canvas")
          i3 = { id: n2.full["@id"], type: "Canvas" };
        else
          throw new Error(`Unsupported source type on annotation: ${n2.full["@type"]}`);
        return { type: "SpecificResource", source: i3, selector: g2(n2.selector) };
      } else
        return encodeURI(n2["@id"]).trim();
    }
    return r2({ ...p2(t3), ...f3(t3), ...l2(t3), target: e3(t3.on), body: Array.isArray(t3.resource) ? t3.resource.map(T) : T(t3.resource) });
  }
  function T(t3) {
    return t3.type === "Choice" ? t3 : M2(t3);
  }
  function M2(t3) {
    let e3 = t3;
    return r2({ ...p2(e3), ...f3(e3), ...l2(e3), ...fe(e3) });
  }
  function Ce(t3) {
    let e3 = [];
    return t3.default && t3.default !== "rdf:nil" && e3.push(t3.default), t3.item && t3.item !== "rdf:nil" && e3.push(...t3.item), r2({ ...p2(t3), ...f3(t3), items: e3 });
  }
  function Ae(t3) {
    return r2({ ...p2(t3), ...f3(t3), ...l2(t3), items: t3.members });
  }
  function Ie(t3) {
    let { "@id": e3, "@type": n2, "@context": i3, profile: a3, ...r3 } = t3, s2 = {};
    return e3 && (s2["@id"] = e3), s2["@type"] = m2(t3), s2["@type"] === "unknown" && (i3 && i3.length && (s2["@context"] = i3), s2["@type"] = "Service"), a3 && (s2.profile = L2(a3)), r2({ ...s2, ...r3 });
  }
  function Pe(t3) {
    return r2({ ...p2(t3), ...f3(t3), ...l2(t3) });
  }
  var _e = new h2({ collection: [ue], manifest: [he], canvas: [de], annotationList: [ye], sequence: [ge], annotation: [me], contentResource: [M2], choice: [Ce], range: [Ae], service: [Ie], layer: [Pe] });
  function be(t3) {
    return t3 && t3["@context"] && (t3["@context"] === "http://iiif.io/api/presentation/2/context.json" || t3["@context"].indexOf("http://iiif.io/api/presentation/2/context.json") !== -1 || t3["@context"] === "http://www.shared-canvas.org/ns/context.json") || t3["@context"] === "http://iiif.io/api/image/2/context.json" || t3["@id"] && t3["@type"] === "sc:Collection" || t3["@id"] && t3["@type"] === "sc:Manifest" ? (t3["@context"] || (t3["@context"] = "http://iiif.io/api/presentation/2/context.json"), _e.traverseUnknown(t3)) : t3;
  }
  function g2(t3) {
    if ((Array.isArray(t3["@type"]) && t3["@type"].includes("oa:SvgSelector") || t3["@type"] == "oa:SvgSelector") && ("chars" in t3 || "value" in t3))
      return { type: "SvgSelector", value: "chars" in t3 ? t3.chars : t3.value };
    if (t3["@type"] === "oa:FragmentSelector")
      return { type: "FragmentSelector", value: t3.value };
    if (t3["@type"] === "oa:Choice")
      return [g2(t3.default), ...(Array.isArray(t3.item) ? t3.item : [t3.item]).map(g2)];
    if (t3["@type"] == "iiif:ImageApiSelector")
      return { type: "ImageApiSelector", region: "region" in t3 ? t3.region : void 0, rotation: "rotation" in t3 ? t3.rotation : void 0 };
    throw new Error(`Unsupported selector type: ${t3["@type"]}`);
  }

  // node_modules/.pnpm/@iiif+parser@2.2.0/node_modules/@iiif/parser/dist/chunk-ERHCHADU.js
  function v2(a3) {
    return typeof a3 == "string" ? false : a3 && !a3.type && "source" in a3 ? (a3.type = "SpecificResource", true) : !!a3 && a3.type === "SpecificResource";
  }
  function o2(...a3) {
    return (e3) => a3.reduce((t3, n2) => n2(t3), e3);
  }
  var p3 = ["Collection", "Manifest", "Canvas", "AnnotationPage", "AnnotationCollection", "Annotation", "ContentResource", "Range", "Service", "Selector", "Agent"];
  function y3(a3, e3) {
    if (typeof a3 > "u" || a3 === null)
      throw new Error("Null or undefined is not a valid entity.");
    if (Array.isArray(a3))
      throw new Error("Array is not a valid entity");
    if (typeof a3 != "object") {
      if (e3)
        return e3;
      throw new Error(`${typeof a3} is not a valid entity`);
    }
    if (typeof a3.type == "string") {
      let t3 = p3.indexOf(a3.type);
      if (t3 !== -1)
        return p3[t3];
    }
    if (a3.profile)
      return "Service";
    throw new Error("Resource type is not known");
  }
  var l3 = class a2 {
    constructor(e3, t3 = {}) {
      f2(this, "traversals");
      f2(this, "options");
      f2(this, "_traverseManifest", o2(this.traverseManifestItems.bind(this), this.traverseNavPlace.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this), this.traverseLinkedCanvases.bind(this), this.traverseManifestStructures.bind(this), this.traverseInlineAnnotationPages.bind(this)));
      f2(this, "_traverseCanvas", o2(this.traverseCanvasItems.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this), this.traverseLinkedCanvases.bind(this), this.traverseInlineAnnotationPages.bind(this)));
      f2(this, "_traverseAnnotationPage", o2(this.traverseAnnotationPageItems.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this)));
      f2(this, "_traverseRange", o2(this.traverseRangeRanges.bind(this), this.traverseLinking.bind(this), this.traverseDescriptive.bind(this), this.traverseLinkedCanvases.bind(this)));
      this.traversals = { collection: [], manifest: [], canvas: [], annotationCollection: [], annotationPage: [], annotation: [], contentResource: [], choice: [], range: [], service: [], agent: [], specificResource: [], geoJson: [], ...e3 }, this.options = { allowUndefinedReturn: false, ...t3 };
    }
    static all(e3) {
      return new a2({ collection: [e3], manifest: [e3], canvas: [e3], annotationCollection: [e3], annotationPage: [e3], annotation: [e3], contentResource: [e3], choice: [e3], range: [e3], service: [e3], geoJson: [e3], specificResource: [e3], agent: [e3] });
    }
    traverseDescriptive(e3) {
      return e3.thumbnail && (e3.thumbnail = i2(e3.thumbnail).map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.provider && (e3.provider = e3.provider.map((t3) => this.traverseAgent(t3, e3))), e3;
    }
    traverseLinking(e3) {
      return e3.seeAlso && (e3.seeAlso = e3.seeAlso.map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.service && (e3.service = i2(e3.service).map((t3) => this.traverseService(t3))), e3.services && (e3.services = i2(e3.services).map((t3) => this.traverseService(t3, e3))), e3.logo && (e3.logo = e3.logo.map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.homepage && (e3.homepage = i2(e3.homepage).map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.partOf && (e3.partOf = e3.partOf.map((t3) => typeof t3 == "string" || !t3.type ? this.traverseType(t3, { parent: e3 }, this.traversals.contentResource) : t3.type === "Canvas" ? this.traverseType(t3, { parent: e3 }, this.traversals.canvas) : t3.type === "AnnotationCollection" ? this.traverseType(t3, { parent: e3 }, this.traversals.annotationCollection) : t3.type === "Collection" ? this.traverseType(t3, { parent: e3 }, this.traversals.collection) : this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.start && (v2(e3.start) ? e3.start = this.traverseSpecificResource(e3.start, "Canvas", e3) : e3.start = this.traverseType(e3.start, { parent: e3 }, this.traversals.canvas)), e3.rendering && (e3.rendering = e3.rendering.map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3.supplementary && (e3.supplementary = e3.supplementary.map((t3) => this.traverseType(t3, { parent: e3 }, this.traversals.contentResource))), e3;
    }
    traverseCollectionItems(e3) {
      return e3.items && e3.items.map((t3) => t3.type === "Collection" ? this.traverseCollection(t3) : this.traverseManifest(t3)), e3;
    }
    traverseCollection(e3, t3) {
      return this.traverseType(this.traverseDescriptive(this.traverseNavPlace(this.traverseInlineAnnotationPages(this.traverseLinking(this.traverseLinkedCanvases(this.traverseCollectionItems(e3)))))), { parent: t3 }, this.traversals.collection);
    }
    traverseGeoJson(e3, t3) {
      return this.traverseType(e3, { parent: t3 }, this.traversals.geoJson);
    }
    traverseNavPlace(e3) {
      return e3.navPlace && (e3.navPlace = this.traverseGeoJson(e3.navPlace, e3)), e3;
    }
    traverseManifestItems(e3) {
      return e3.items && (e3.items = e3.items.map((t3) => this.traverseCanvas(t3))), e3;
    }
    traverseManifestStructures(e3) {
      return e3.structures && (e3.structures = e3.structures.map((t3) => this.traverseRange(t3))), e3;
    }
    traverseManifest(e3, t3) {
      return this.traverseType(this._traverseManifest(e3), { parent: t3 }, this.traversals.manifest);
    }
    traverseCanvasItems(e3) {
      return e3.items = (e3.items || []).map((t3) => this.traverseAnnotationPage(t3, e3)), e3;
    }
    traverseInlineAnnotationPages(e3) {
      return typeof e3 == "string" || !e3 || e3.annotations && (e3.annotations = e3.annotations.map((t3) => this.traverseAnnotationPage(t3, e3))), e3;
    }
    traverseCanvas(e3, t3) {
      return this.traverseType(this._traverseCanvas(e3), { parent: t3 }, this.traversals.canvas);
    }
    traverseAnnotationPageItems(e3) {
      return e3.items && (e3.items = e3.items.map((t3) => this.traverseAnnotation(t3, e3))), e3;
    }
    traverseAnnotationPage(e3, t3) {
      return this.traverseType(this._traverseAnnotationPage(e3), { parent: t3 }, this.traversals.annotationPage);
    }
    traverseAnnotationBody(e3) {
      return Array.isArray(e3.body) ? e3.body = e3.body.map((t3) => this.traverseContentResource(t3, e3)) : e3.body && (e3.body = this.traverseContentResource(e3.body, e3)), e3;
    }
    traverseLinkedCanvases(e3) {
      return e3.placeholderCanvas && (e3.placeholderCanvas = this.traverseCanvas(e3.placeholderCanvas)), e3.accompanyingCanvas && (e3.accompanyingCanvas = this.traverseCanvas(e3.accompanyingCanvas)), e3;
    }
    traverseAnnotation(e3, t3) {
      return this.traverseType(this.traverseLinking(this.traverseAnnotationBody(this.traverseDescriptive(e3))), { parent: t3 }, this.traversals.annotation);
    }
    traverseContentResourceLinking(e3) {
      return typeof e3 == "string" || !e3 || e3 && e3.service && (e3.service = i2(e3.service || []).map((t3) => this.traverseService(t3, e3))), e3;
    }
    traverseContentResource(e3, t3) {
      return e3.type === "Choice" && (e3.items = e3.items.map((n2) => this.traverseContentResource(n2, e3))), v2(e3) ? this.traverseSpecificResource(e3, "ContentResource") : this.traverseType(this.traverseInlineAnnotationPages(this.traverseContentResourceLinking(e3)), { parent: t3 }, this.traversals.contentResource);
    }
    traverseSpecificResource(e3, t3, n2) {
      let s2 = e3.source;
      return typeof e3.source == "string" && (s2 = { id: e3.source, type: t3 || "unknown" }), this.traverseType({ ...e3, source: t3 === "Canvas" || s2.type === "Canvas" ? this.traverseType(s2, { parent: n2 }, this.traversals.canvas) : t3 === "ContentResource" ? this.traverseContentResource(s2, { parent: n2 }) : this.traverseUnknown(s2, { parent: n2, typeHint: t3 }) }, { parent: n2 }, this.traversals.specificResource);
    }
    traverseRangeRanges(e3) {
      return e3.items && (e3.items = e3.items.map((t3) => typeof t3 == "string" ? this.traverseCanvas({ id: t3, type: "Canvas" }, e3) : v2(t3) ? this.traverseSpecificResource(t3, "Canvas", e3) : t3.type === "Manifest" ? this.traverseManifest(t3, e3) : this.traverseRange(t3, e3))), e3;
    }
    traverseRange(e3, t3) {
      return this.traverseType(this._traverseRange(e3), { parent: t3 }, this.traversals.range);
    }
    traverseAgent(e3, t3) {
      return this.traverseType(this.traverseDescriptive(this.traverseLinking(e3)), { parent: t3 }, this.traversals.agent);
    }
    traverseType(e3, t3, n2) {
      return n2.reduce((s2, c2) => {
        let h4 = c2(s2, t3);
        return typeof h4 > "u" && !this.options.allowUndefinedReturn ? s2 : h4;
      }, e3);
    }
    traverseService(e3, t3) {
      let n2 = Object.assign({}, e3);
      return n2 && n2.service && (n2.service = i2(n2.service).map((s2) => this.traverseService(s2))), this.traverseType(n2, { parent: t3 }, this.traversals.service);
    }
    traverseUnknown(e3, { parent: t3, typeHint: n2 } = {}) {
      let s2 = y3(e3, n2);
      switch (s2) {
        case "Collection":
          return this.traverseCollection(e3, t3);
        case "Manifest":
          return this.traverseManifest(e3, t3);
        case "Canvas":
          return this.traverseCanvas(e3, t3);
        case "AnnotationPage":
          return this.traverseAnnotationPage(e3, t3);
        case "Annotation":
          return this.traverseAnnotation(e3, t3);
        case "ContentResource":
          return this.traverseContentResource(e3, t3);
        case "Range":
          return this.traverseRange(e3, t3);
        case "Service":
          return this.traverseService(e3, t3);
        case "Agent":
          return this.traverseAgent(e3, t3);
        default:
          throw new Error(`Unknown or unsupported resource type of ${s2}`);
      }
    }
  };

  // node_modules/.pnpm/@iiif+parser@2.2.0/node_modules/@iiif/parser/dist/chunk-NQRGLBGA.js
  function L3(e3, n2) {
    let i3 = n2 || "unknown";
    if (!e3)
      return;
    if (typeof e3 == "string")
      return { id: e3, type: i3 };
    if (v2(e3))
      return L3(e3.source, n2);
    let r3 = i3 && i3 !== "unknown" ? i3 : e3.type || e3["@type"], t3 = e3.id || e3["@id"];
    if (r3 && r3.indexOf(":") !== -1 && (r3 = r3.split(":").pop()), t3 && r3)
      return { id: t3, type: r3 };
  }
  var w2 = {};
  var d4 = "iiif-parser:hasPart";
  var g3 = "iiif-parser:partOf";
  var T2 = "iiif-parser:isExternal";
  var m3 = "__$UNSET$__";
  var j2 = "__$UNWRAP$__";
  var o3 = [];
  Object.freeze(o3);
  Object.freeze(w2);
  function oe2(e3) {
    if (e3 === w2 || Object.keys(e3).length === 0)
      return true;
    for (let n2 in e3)
      return false;
    return true;
  }
  function ae2(e3, n2) {
    if (n2 && n2["@explicit"]) {
      let i3 = {}, r3 = Object.keys(n2);
      for (let t3 of r3)
        t3 === g3 || t3 === "@explicit" || (oe2(n2[t3]) ? i3[t3] = e3[t3] : i3[t3] = n2[t3]);
      return i3;
    }
    return e3;
  }
  function F3(e3, n2, i3) {
    let r3 = L3(n2);
    if (!r3)
      return [void 0, void 0];
    let t3 = e3.requests[r3.id], a3 = r3.type || e3.mapping[r3.id];
    if (!a3 || t3 && t3.resourceUri && (!e3.entities[a3] || !e3.entities[a3][t3.resourceUri]))
      return [void 0, void 0];
    let s2 = e3.entities[a3][t3 ? t3.resourceUri : r3.id];
    if (r3.type && !s2)
      return F3(e3, { id: r3.id }, i3);
    if (s2 && s2[d4]) {
      let c2 = s2[d4].find((l4) => i3 ? l4[g3] === i3.id : l4[g3] === s2.id);
      return [ae2(s2, c2), s2];
    }
    return [s2, s2];
  }
  var K2 = { id: "https://iiif-parser/annotation-page", type: "AnnotationPage", behavior: o3, label: null, thumbnail: o3, summary: null, requiredStatement: null, metadata: o3, rights: null, provider: o3, items: o3, seeAlso: o3, homepage: o3, rendering: o3, service: o3 };
  var G3 = { id: "https://iiif-parser/empty-canvas", type: "Canvas", label: null, behavior: o3, thumbnail: o3, accompanyingCanvas: null, placeholderCanvas: null, summary: null, requiredStatement: null, metadata: o3, rights: null, navDate: null, provider: o3, items: o3, annotations: o3, seeAlso: o3, homepage: o3, partOf: o3, rendering: o3, service: o3, duration: 0, height: 0, width: 0 };
  var X2 = { id: "https://iiif-parser/empty-collection", type: "Collection", label: null, viewingDirection: "left-to-right", behavior: o3, thumbnail: o3, accompanyingCanvas: null, placeholderCanvas: null, summary: null, requiredStatement: null, metadata: o3, rights: null, navDate: null, provider: o3, items: o3, annotations: o3, seeAlso: o3, homepage: o3, partOf: o3, rendering: o3, service: o3, services: o3 };
  var Y2 = { id: "https://iiif-parser/empty-manifest", type: "Manifest", annotations: o3, behavior: o3, homepage: o3, items: o3, label: null, metadata: o3, navDate: null, provider: o3, partOf: o3, accompanyingCanvas: null, placeholderCanvas: null, rendering: o3, requiredStatement: null, rights: null, seeAlso: o3, service: o3, services: o3, start: null, structures: o3, summary: null, thumbnail: o3, viewingDirection: "left-to-right" };
  var J2 = { id: "https://iiif-parser/empty-canvas", type: "Range", label: null, behavior: o3, thumbnail: o3, accompanyingCanvas: null, placeholderCanvas: null, summary: null, requiredStatement: null, metadata: o3, rights: null, navDate: null, provider: o3, items: o3, annotations: o3, seeAlso: o3, homepage: o3, partOf: o3, rendering: o3, service: o3, start: null, supplementary: null, viewingDirection: "left-to-right" };
  var B3 = { id: "https://iiif-parser/empty-agent", type: "Agent", label: {}, logo: o3, seeAlso: o3, homepage: o3 };
  var Q2 = { id: "https://iiif-parser/empty-service", type: "UnknownService" };
  function k2(e3, n2 = {}) {
    if (Array.isArray(e3))
      return k2(e3[0]);
    if (typeof e3 == "string") {
      let [i3, r3] = e3.split("#");
      return r3 ? { type: "SpecificResource", source: { id: i3, type: n2.typeHint || "Unknown" }, selector: { type: "FragmentSelector", value: r3 } } : { type: "SpecificResource", source: { id: i3, type: n2.typeMap && n2.typeMap[i3] || n2.typeHint || "Unknown" } };
    }
    if (e3.type === "Choice" || e3.type === "List" || e3.type === "Composite" || e3.type === "Independents")
      return k2(e3.items[0]);
    if (!e3.type && "source" in e3 && (e3.type = "SpecificResource"), e3.type === "SpecificResource")
      return e3.source.type === "Canvas" && e3.source.partOf && typeof e3.source.partOf == "string" && (e3.source.partOf = [{ id: e3.source.partOf, type: "Manifest" }]), e3.selector ? { type: "SpecificResource", source: e3.source, selector: e3.selector } : { type: "SpecificResource", source: e3.source };
    if (e3.id) {
      e3.type === "Canvas" && e3.partOf && typeof e3.partOf == "string" && (e3.partOf = [{ id: e3.partOf, type: "Manifest" }]);
      let [i3, r3] = e3.id.split("#");
      return r3 ? { type: "SpecificResource", source: { ...e3, id: i3 }, selector: { type: "FragmentSelector", value: r3 } } : { type: "SpecificResource", source: { ...e3, id: i3 } };
    }
    return { type: "SpecificResource", source: e3 };
  }
  function se2() {
    return { Collection: {}, Manifest: {}, Canvas: {}, AnnotationPage: {}, AnnotationCollection: {}, Annotation: {}, ContentResource: {}, Range: {}, Service: {}, Selector: {}, Agent: {} };
  }
  function Z2(e3, n2) {
    if (typeof e3 == "string")
      return { id: e3, type: n2 };
    if (!e3.id)
      throw new Error(`Invalid resource does not have an ID (${JSON.stringify(e3)}, ${n2})`);
    return e3;
  }
  function le2(e3, n2) {
    return (i3, r3) => {
      let t3 = e3[i3] ? e3[i3] : {};
      return (a3, s2) => {
        let c2 = Z2(a3, r3 || i3);
        return c2 && c2.id && i3 ? (t3[c2.id] = t3[c2.id] ? W2(t3[c2.id], c2, { parent: s2.parent, isTopLevel: n2.id === c2.id }) : W2({ id: c2.id, type: c2.type }, c2, { parent: s2.parent, isTopLevel: n2.id === c2.id }), { id: c2.id, type: i3 === "ContentResource" ? i3 : c2.type }) : c2;
      };
    };
  }
  function $2(e3, n2, i3) {
    if (!n2)
      return e3;
    if (Array.isArray(e3)) {
      if (!Array.isArray(n2))
        throw new Error("Cannot merge array with non-array");
      let r3 = [...e3];
      for (let t3 of n2)
        if (t3["@id"] && !t3.id && (t3.id = t3["@id"]), t3["@type"] && !t3.type && (t3.type = t3["@type"]), t3 != null)
          if (Array.isArray(t3))
            r3.push(t3);
          else if (typeof t3 == "object" && t3.id && t3.type) {
            let a3 = r3.findIndex((s2) => s2.id === t3.id && s2.type === t3.type);
            a3 >= 0 && (r3[a3] = $2(r3[a3], t3));
          } else
            e3.indexOf(t3) === -1 && r3.push(t3);
      return r3;
    } else if (typeof e3 == "object") {
      if (Array.isArray(n2) || typeof n2 != "object")
        throw new Error("Cannot merge object with non-object");
      let r3 = { ...e3 }, t3 = [], a3 = [], s2 = Object.keys(e3).filter((l4) => l4 !== d4 && l4 !== "id" && l4 !== "type"), c2 = {}, A2 = {};
      for (let [l4, u3] of Object.entries(n2)) {
        if (l4 === d4 || l4 === "id" || l4 === "type")
          continue;
        let y4 = r3[l4];
        y4 === u3 ? a3.push(l4) : y4 === o3 || !y4 ? (t3.push(l4), r3[l4] = u3) : (y4 && u3 && (c2[l4] = y4, A2[l4] = u3), r3[l4] = $2(y4, u3), r3[l4] === c2[l4] && (a3.push(l4), delete c2[l4]));
      }
      if (i3 && (i3.parent && i3.parent.id || i3.isTopLevel)) {
        let l4 = [], u3 = {};
        if (i3.parent ? u3[g3] = i3.parent.id : i3.isTopLevel && (u3[g3] = e3.id), r3[d4] && r3[d4].length) {
          let y4 = !(r3[d4] || []).find((v3) => v3["@explicit"]), C2 = t3.length > 0 || a3.length !== s2.length;
          if (y4 && C2)
            for (let v3 of r3[d4]) {
              let p4 = { ...v3 }, _3 = Object.keys(c2);
              if (p4) {
                p4["@explicit"] = true;
                for (let M3 of s2)
                  M3 !== d4 && (p4[M3] = w2);
                for (let M3 of _3)
                  p4[M3] = c2[M3];
              }
              l4.push(p4);
            }
          else
            l4.push(...r3[d4]);
          if (C2) {
            let v3 = Object.keys(A2);
            u3["@explicit"] = true;
            for (let p4 of t3)
              u3[p4] = w2;
            for (let p4 of a3)
              u3[p4] = w2;
            for (let p4 of v3)
              u3[p4] = A2[p4];
          }
        }
        u3.id = r3.id, u3.type = r3.type, l4.push(u3), r3[d4] = l4;
      }
      return r3;
    } else if (e3)
      return e3;
    return n2;
  }
  function W2(e3, n2, i3) {
    if (typeof e3 == "string")
      return e3;
    if (n2.id !== e3.id || n2.type !== e3.type) {
      if (n2.type === "ImageService3")
        return n2;
      if (e3.type === "ImageService3")
        return e3;
      throw new Error(`Can only merge entities with identical identifiers and type! ${n2.type}(${n2.id}) => ${e3.type}(${e3.id})`);
    }
    return $2({ ...e3 }, n2, i3);
  }
  function ce2(e3) {
    return (n2, i3) => (r3) => {
      let { id: t3, type: a3 } = Z2(r3, i3 || n2);
      if (typeof t3 > "u")
        throw new Error("Found invalid entity without an ID.");
      return n2 === "ContentResource" || n2 === "Service" ? e3[t3] = n2 : e3[t3] = a3, r3;
    };
  }
  function fe2(e3) {
    let n2 = Object.assign({}, e3);
    if (n2["@id"] && (n2.id = n2["@id"]), n2["@type"] && (n2.type = n2["@type"]), n2.service) {
      let i3 = [];
      n2.service = Array.isArray(n2.service) ? n2.service : [n2.service];
      for (let r3 of n2.service)
        i3.push({ id: r3["@id"] || r3.id, type: r3["@type"] || r3.type });
      n2.service = i3;
    }
    return Object.assign({}, Q2, n2);
  }
  function ue2(e3) {
    return (n2) => {
      e3.Service = e3.Service ? e3.Service : {};
      let i3 = n2.id || n2["@id"], r3 = fe2(n2);
      return r3 && r3.id && (e3.Service[r3.id] ? e3.Service[i3] = W2(e3.Service[i3], r3) : e3.Service[i3] = r3), n2;
    };
  }
  function de2(e3) {
    let n2 = JSON.stringify(e3), i3 = 5381, r3 = n2.length;
    for (; r3; )
      i3 = i3 * 33 ^ n2.charCodeAt(--r3);
    let a3 = (i3 >>> 0).toString(16);
    return a3.length % 2 ? "0" + a3 : a3;
  }
  function U2(e3) {
    return (n2) => typeof n2 == "string" ? { id: n2, type: e3 } : n2.id ? n2.type ? n2 : { type: e3, ...n2 } : { id: `vault://${de2(n2)}`, type: e3, ...n2 };
  }
  function E3(e3) {
    return (n2) => ({ ...e3, ...n2 });
  }
  function D2(e3) {
    return Array.isArray(e3) ? e3 : [e3];
  }
  function pe2(e3) {
    return e3.body && (e3.body = D2(e3.body)), e3.seeAlso && (e3.seeAlso = D2(e3.seeAlso)), e3.audience && (e3.audience = D2(e3.audience)), e3.accessibility && (e3.accessibility = D2(e3.accessibility)), e3.motivation && (e3.motivation = D2(e3.motivation)), e3;
  }
  function ee2(e3, { typeHint: n2, partOfTypeHint: i3 } = {}) {
    if (typeof e3 == "string" && (e3 = { id: e3, type: n2 || "unknown" }), v2(e3))
      return typeof e3.source == "string" && (e3.source = { id: e3.source, type: n2 || "unknown" }), e3.source.type === "Canvas" && e3.source.partOf && typeof e3.source.partOf == "string" && (e3.source.partOf = [{ id: e3.source.partOf, type: i3 || "Manifest" }]), e3;
    let r3;
    if ((e3.id || "").indexOf("#") !== -1) {
      let [t3, a3] = (e3.id || "").split("#");
      e3.id = t3, a3 && (r3 = { type: "FragmentSelector", value: a3 });
    }
    return { type: "SpecificResource", source: e3, selector: r3 };
  }
  function ye2(e3) {
    let n2 = Object.assign({}, e3);
    return e3 && e3.items && (n2.items = e3.items.map((i3) => typeof i3 == "string" || i3.type === "Canvas" ? ee2(i3) : i3)), n2;
  }
  function me2(e3) {
    let n2 = Object.assign({}, e3);
    return n2.start ? (n2.start = ee2(n2.start, { typeHint: "Canvas" }), n2) : e3;
  }
  function ve2(e3) {
    let n2 = Object.assign({}, e3);
    return n2.target ? (n2.target = k2(n2.target, { typeHint: "Canvas" }), n2) : e3;
  }
  function ge2(e3) {
    return e3;
  }
  function q2(e3) {
    return typeof e3.items > "u" && (e3[T2] = true), e3;
  }
  function Ue(e3) {
    let n2 = be(e3), i3 = se2(), r3 = {}, t3 = le2(i3, n2), a3 = ce2(r3), c2 = new l3({ collection: [q2, E3(X2), a3("Collection"), t3("Collection")], manifest: [q2, E3(Y2), me2, a3("Manifest"), t3("Manifest")], canvas: [E3(G3), a3("Canvas"), t3("Canvas")], annotationPage: [q2, U2("AnnotationPage"), E3(K2), a3("AnnotationPage"), t3("AnnotationPage")], annotation: [U2("Annotation"), pe2, ve2, a3("Annotation"), t3("Annotation")], contentResource: [U2("ContentResource"), a3("ContentResource"), t3("ContentResource")], range: [E3(J2), ye2, a3("Range", "Canvas"), t3("Range", "Canvas")], agent: [E3(B3), a3("Agent"), t3("Agent")], specificResource: [ge2], service: [ue2(i3)] }).traverseUnknown(n2);
    return { entities: i3, resource: c2, mapping: r3 };
  }
  function he2(e3) {
    let n2 = {};
    for (let [i3, r3] of e3) {
      if (i3 === j2 && r3 !== m3)
        return r3;
      r3 !== m3 && typeof r3 < "u" && r3 !== null && (n2[i3] = r3);
    }
    return n2;
  }
  function We(e3, n2, i3) {
    if (!n2.type || !n2.id)
      throw new Error("Unknown entity");
    if (!i3[n2.type])
      throw new Error(`Serializer not found for ${n2.type}`);
    function r3(t3, a3, s2 = 0) {
      let c2 = i3[t3.type];
      if (!c2)
        return m3;
      if (s2 > 20)
        throw new Error("Circular reference: " + t3.id + " " + t3.type);
      let [A2, l4] = F3(e3, t3.type ? t3 : t3.id, a3) || (t3.id && t3.type ? t3 : null);
      if (!A2)
        return m3;
      let u3 = c2(A2, e3, { parent: a3, isTopLevel: n2.id === t3.id, fullResource: l4 }), y4 = u3.next();
      for (; !y4.done; ) {
        let C2 = y4.value, v3 = m3;
        if (C2)
          if (Array.isArray(C2)) {
            let p4 = [];
            for (let _3 of C2)
              p4.push(r3(_3, t3, s2 + 1));
            v3 = p4;
          } else
            v3 = r3(C2, t3, s2 + 1);
        y4 = u3.next(v3);
      }
      return y4.value === m3 ? m3 : he2(y4.value);
    }
    return r3(n2);
  }
  function P3(e3, { allowSourceString: n2 = true, allowString: i3 = false, allowedStringType: r3 } = {}) {
    let t3 = (a3) => {
      if (n2 && a3 && a3.source && typeof a3.source != "string") {
        let s2 = Object.keys(a3.source);
        if (a3.source.id && a3.source.type && s2.length === 2)
          return { ...a3, source: a3.source.id };
      }
      return a3;
    };
    if (e3) {
      if (e3.source && e3.source.partOf)
        return t3(e3);
      let a3 = Object.keys(e3);
      if (a3.length === 2 && e3.type && e3.source || a3.length === 3 && e3.type && e3.source && a3.indexOf("selector") !== -1 && !e3.selector)
        return i3 && (!r3 || r3 === e3.source.type) ? e3.source.id : e3.source.type === "ContentResource" ? { type: "SpecificResource", source: e3.source.id } : e3.source;
      if (e3.selector && !Array.isArray(e3.selector) && typeof e3.selector != "string" && e3.selector.type === "FragmentSelector") {
        let s2 = `${e3.source.id}#${e3.selector.value}`;
        return i3 ? s2 : { id: s2, type: e3.source.type };
      }
    }
    return t3(e3);
  }
  function O3(e3) {
    if (!e3)
      return;
    let n2 = Object.keys(e3);
    if (n2.length !== 0) {
      if (n2.length === 1) {
        let i3 = n2[0];
        if (!i3)
          return "";
        let r3 = (e3[i3] || []).join("");
        return i3 === "@none" || i3 === "none" || i3 === "en" ? r3 : { "@language": i3, "@value": r3 };
      }
      return n2.map((i3) => ({ "@language": i3, "@value": (e3[i3] || []).join("") }));
    }
  }
  function ne2(e3) {
    return Array.isArray(e3) ? e3.map((n2) => ne2(n2)) : typeof e3 == "string" ? e3 : e3.type && e3.type === "Canvas" ? e3.id : e3;
  }
  function h3(e3, n2 = false) {
    if (e3)
      return e3.length > 1 && !n2 ? e3 : e3[0] || void 0;
  }
  function Se(e3) {
    if (e3) {
      if (typeof e3 == "string")
        return { "@id": e3 };
      if ("@id" in e3) {
        let n2 = { ...e3 };
        return delete n2["@type"], n2;
      }
      return { "@context": "http://iiif.io/api/image/2/context.json", "@id": e3.id, profile: `http://iiif.io/api/image/2/profiles/${e3.profile}.json` };
    }
  }
  function N3(e3, n2) {
    return [["@id", e3.id], ["@type", n2], ["format", e3.format], ["height", e3.height], ["width", e3.width], ["viewingDirection", e3.viewingDirection !== "left-to-right" ? e3.viewingDirection : void 0], ["license", e3.license ? e3.license : void 0]];
  }
  function* x3(e3) {
    let n2 = e3.provider ? yield e3.provider[0] : void 0;
    return [["label", O3(e3.label)], ["metadata", e3.metadata && e3.metadata.length ? e3.metadata.map((i3) => ({ label: O3(i3.label) || "", value: O3(i3.value) || "" })) : void 0], ["description", O3(e3.summary)], ["thumbnail", h3(yield e3.thumbnail)], ["navDate", e3.navDate], ["logo", n2 ? h3(n2.logo) : void 0], ["homepage", n2 ? n2.homepage : void 0], ["attribution", e3.requiredStatement ? O3(e3.requiredStatement.value) : void 0]];
  }
  function* I2(e3) {
    let n2 = e3.start && e3.start.type && e3.start.type === "SpecificResource" ? P3(e3.start) : e3.start;
    return [["seeAlso", h3(yield e3.seeAlso)], ["service", h3((e3.service || []).map(Se))], ["rendering", h3(yield e3.rendering)], ["startCanvas", n2 ? n2.id : void 0]];
  }
  function Re(e3) {
    return e3.type === "SpecificResource";
  }
  function Ae2(e3) {
    return e3 && e3.type === "FragmentSelector";
  }
  function Ce2(e3) {
    if (e3 && Re(e3)) {
      let n2 = e3.id, i3 = e3.selector ? Array.isArray(e3.selector) ? e3.selector[0] : e3.selector : void 0;
      return Ae2(i3) && (n2 += "#" + i3.value), n2;
    }
    return e3?.id;
  }
  var Ge = { Manifest: function* (e3, n2, { isTopLevel: i3 }) {
    return [...i3 ? [["@context", "http://iiif.io/api/presentation/2/context.json"]] : [], ...N3(e3, "sc:Manifest"), ...yield* x3(e3), ...yield* I2(e3), ["sequences", [{ "@id": `${e3.id}/sequence0`, "@type": "sc:Sequence", canvases: yield e3.items }]], ["structures", yield e3.structures]];
  }, Canvas: function* (e3) {
    let i3 = (yield e3.items)[0];
    return [...N3(e3, "sc:Canvas"), ...yield* x3(e3), ...yield* I2(e3), ["images", i3 ? [i3.resources] : void 0], ["annotations", e3.annotations && e3.annotations.length ? h3(yield e3.annotations) : void 0]];
  }, AnnotationPage: function* (e3) {
    return [...N3(e3, "sc:AnnotationList"), ...yield* x3(e3), ["resources", e3.items && e3.items.length ? h3(yield e3.items) : void 0]];
  }, Annotation: function* (e3) {
    return [["@id", e3.id], ["@type", "oa:Annotation"], ["motivation", "sc:painting"], ["on", ne2(e3.target)], ["resource", h3(yield e3.body, true)]];
  }, ContentResource: function* (e3) {
    switch (e3.type) {
      case "Image":
        return [...N3(e3, "dctypes:Image"), ...yield* x3(e3), ...yield* I2(e3)];
      case "Text":
      case "Dataset":
      default:
        return [...N3(e3, void 0), ...yield* x3(e3)];
    }
  }, AnnotationCollection: function* (e3) {
    return [["@id", e3.id], ["@type", "sc:Layer"], ["label", O3(e3.label)]];
  }, Collection: function* (e3) {
    return [...N3(e3, "sc:Collection"), ...yield* x3(e3), ...yield* I2(e3), ["members", yield* e3.items]];
  }, Range: function* (e3) {
    let n2 = [], i3 = [];
    if (e3.items)
      for (let r3 of e3.items) {
        let t3 = r3.type === "SpecificResource" ? r3.source : r3;
        if (t3) {
          let a3 = yield t3;
          n2.push({ "@id": Ce2(r3), "@type": t3.type, label: a3 ? a3.label : void 0, within: e3.id }), t3.type === "Canvas" && i3.push(t3.id);
        }
      }
    return [...N3(e3, "sc:Range"), ...yield* x3(e3), ...yield* I2(e3), ["canvases", i3.length === n2.length ? i3 : void 0], ["members", i3.length !== n2.length ? n2 : void 0]];
  } };
  function b2(e3) {
    return [["id", e3.id?.startsWith("vault://") ? void 0 : e3.id], ["type", e3.type], ["format", e3.format], ["profile", e3.profile], ["height", e3.height || void 0], ["width", e3.width || void 0], ["duration", e3.duration || void 0], ["viewingDirection", e3.viewingDirection !== "left-to-right" ? e3.viewingDirection : void 0], ["behavior", e3.behavior && e3.behavior.length ? e3.behavior : void 0], ["timeMode", e3.timeMode], ["motivation", Array.isArray(e3.motivation) ? e3.motivation[0] : e3.motivation], [d4, m3]];
  }
  function f4(e3) {
    if (e3 === m3 || !e3 || e3.length === 0)
      return;
    let n2 = e3.filter((i3) => i3 !== m3);
    if (n2.length !== 0)
      return n2;
  }
  function te2(e3) {
    if (e3 && e3.type && e3.type === "ImageService2") {
      let { id: n2, type: i3, profile: r3, ...t3 } = e3, a3 = typeof r3 == "string" ? r3 : Array.isArray(r3) ? r3.find((s2) => typeof s2 == "string") : "";
      return { "@id": n2, "@type": i3, profile: a3 ? a3.startsWith("http") ? a3 : `http://iiif.io/api/image/2/${a3}.json` : "http://iiif.io/api/image/2/level0.json", ...t3 };
    }
    return e3;
  }
  function ie2(e3) {
    if (Array.isArray(e3) || (e3 = e3 ? [e3] : []), !(!e3 || e3.length === 0))
      return e3.map(te2);
  }
  function* S2(e3) {
    return [["label", e3.label], ["metadata", f4(e3.metadata)], ["summary", e3.summary], ["requiredStatement", e3.requiredStatement], ["rights", Array.isArray(e3.rights) ? e3.rights[0] || void 0 : e3.rights || void 0], ["navDate", e3.navDate], ["language", e3.language], ["thumbnail", f4(yield e3.thumbnail)], ["placeholderCanvas", yield e3.placeholderCanvas], ["accompanyingCanvas", yield e3.accompanyingCanvas], ["provider", f4(yield e3.provider)]];
  }
  function* R3(e3, n2) {
    let i3 = [];
    for (let r3 of e3.partOf || [])
      r3.type === "Manifest" && n2.type === "Manifest" || i3.push(yield r3);
    return [["seeAlso", f4(yield e3.seeAlso)], ["service", f4(ie2(e3.service))], ["services", f4(ie2(e3.services))], ["rendering", f4(yield e3.rendering)], ["supplementary", f4(yield e3.supplementary)], ["homepage", f4(yield e3.homepage)], ["logo", f4(yield e3.logo)], ["partOf", f4(i3)], ["start", e3.start ? P3(e3.start) : e3.start]];
  }
  var Qe = { Manifest: function* (e3, n2, { isTopLevel: i3 }) {
    if (!i3)
      return [...b2(e3), ...yield* S2(e3), ["navPlace", e3.navPlace]];
    let r3 = "http://iiif.io/api/presentation/3/context.json";
    return (e3.navPlace || re2(e3)) && (r3 = ["http://iiif.io/api/presentation/3/context.json", "http://iiif.io/api/extension/navplace/context.json"]), [["@context", e3["@context"] ? e3["@context"] : r3], ...b2(e3), ...yield* S2(e3), ...yield* R3(e3), ["items", yield e3.items], ["structures", f4(yield e3.structures)], ["annotations", f4(yield e3.annotations)], ["navPlace", e3.navPlace]];
  }, Canvas: function* (e3, n2, { parent: i3 }) {
    return i3 && i3.type !== "Manifest" && i3.type !== "Canvas" ? [["id", e3.id]] : [...b2(e3), ...yield* S2(e3), ...yield* R3(e3, i3), ["items", yield e3.items], ["annotations", f4(yield e3.annotations)], ["navPlace", e3.navPlace]];
  }, Agent: function* (e3) {
    return [["id", e3.id], ["type", "Agent"], ["label", e3.label], ...yield* R3(e3)];
  }, AnnotationPage: function* (e3) {
    let n2 = Object.entries(e3).map(([r3, t3]) => [r3, Array.isArray(t3) ? f4(t3) : t3]).filter(([r3, t3]) => r3 !== "items" && r3 !== "id" && r3 !== d4 && r3 !== g3 && r3 !== T2), i3 = yield e3.items;
    return [["id", e3.id?.startsWith("vault://") ? void 0 : e3.id], ...n2, ...yield* R3(e3), ["items", i3.length || e3[T2] === false ? i3 : m3]];
  }, Service: function* (e3) {
    return [[j2, te2(e3)]];
  }, Annotation: function* (e3) {
    let n2 = Object.entries(e3).map(([r3, t3]) => r3 === "motivation" ? [r3, Array.isArray(t3) ? t3[0] : t3] : r3 === "target" ? [r3, P3(t3, { allowString: true, allowSourceString: true, allowedStringType: "Canvas" })] : [r3, Array.isArray(t3) ? f4(t3) : t3]).filter(([r3]) => r3 !== "body" && r3 !== d4 && r3 !== T2), i3;
    if (Array.isArray(e3.body)) {
      let r3 = [];
      for (let t3 of e3.body)
        if (t3 && v2(t3)) {
          let a3 = { ...t3 };
          t3.source.type !== "Canvas" ? a3.source = yield t3.source : a3.source = t3.source, r3.push(P3(a3, { allowSourceString: true }));
        } else
          r3.push(yield t3);
      i3 = r3;
    } else
      e3.body && v2(e3.body) ? (i3 = { ...e3.body }, i3.source = yield e3.body.source) : i3 = yield e3.body;
    return [...n2, ...yield* S2(e3), ...yield* R3(e3), ["body", i3.length === 1 ? i3[0] : i3]];
  }, ContentResource: function* (e3) {
    return ze([...b2(e3), ...yield* S2(e3), ...yield* R3(e3), ["annotations", f4(yield e3.annotations)], ["items", f4(yield e3.items)]], e3);
  }, AnnotationCollection: function* (e3) {
    return [["id", e3.id], ["type", "AnnotationCollection"], ["label", e3.label]];
  }, Collection: function* (e3, n2, { isTopLevel: i3 }) {
    if (i3) {
      let r3 = "http://iiif.io/api/presentation/3/context.json";
      return (e3.navPlace || re2(e3)) && (r3 = ["http://iiif.io/api/extension/navplace/context.json", "http://iiif.io/api/presentation/3/context.json"]), [["@context", r3], ...b2(e3), ...yield* S2(e3), ...yield* R3(e3), ["items", f4(yield e3.items)], ["navPlace", e3.navPlace]];
    }
    return [...b2(e3), ...yield* S2(e3), ["navPlace", e3.navPlace]];
  }, Range: function* (e3) {
    let n2 = [];
    for (let i3 of e3.items)
      i3.type === "Range" ? n2.push(yield i3) : i3 && i3.type === "SpecificResource" ? n2.push(P3(i3)) : n2.push(i3);
    return [...b2(e3), ...yield* S2(e3), ...yield* R3(e3), ["items", n2], ["annotations", f4(yield e3.annotations)], ["navPlace", e3.navPlace]];
  } };
  function ze(e3, n2) {
    let i3 = Object.keys(n2), r3 = e3.map(([t3]) => t3);
    for (let t3 of i3)
      t3 === d4 || t3 === T2 || r3.indexOf(t3) === -1 && typeof n2[t3] < "u" && e3.push([t3, n2[t3]]);
    return e3;
  }
  function re2(e3) {
    if (!e3.items || !Array.isArray(e3.items))
      return false;
    for (let n2 of e3.items)
      if (n2.navPlace)
        return true;
    return false;
  }

  // src/vault/utility/typesafe-actions-runtime.ts
  var createAction = function createAction2(type) {
    return function() {
      const base = { type, getType: () => type, toString: () => type };
      return (payload2, meta) => ({
        ...base,
        ...payload2 !== void 0 && { payload: payload2 },
        ...meta !== void 0 && { meta }
      });
    };
  };

  // src/vault/actions/entity-actions.ts
  var IMPORT_ENTITIES = "@iiif/IMPORT_ENTITIES";
  var MODIFY_ENTITY_FIELD = "@iiif/MODIFY_ENTITY_FIELD";
  var REORDER_ENTITY_FIELD = "@iiif/REORDER_ENTITY_FIELD";
  var ADD_REFERENCE = "@iiif/ADD_REFERENCE";
  var UPDATE_REFERENCE = "@iiif/UPDATE_REFERENCE";
  var REMOVE_REFERENCE = "@iiif/REMOVE_REFERENCE";
  var ADD_METADATA = "@iiif/ADD_METADATA";
  var REMOVE_METADATA = "@iiif/REMOVE_METADATA";
  var UPDATE_METADATA = "@iiif/UPDATE_METADATA";
  var REORDER_METADATA = "@iiif/REORDER_METADATA";
  var importEntities = createAction(IMPORT_ENTITIES)();
  var modifyEntityField = createAction(MODIFY_ENTITY_FIELD)();
  var reorderEntityField = createAction(REORDER_ENTITY_FIELD)();
  var addReference = createAction(ADD_REFERENCE)();
  var removeReference = createAction(REMOVE_REFERENCE)();
  var updateReference = createAction(UPDATE_REFERENCE)();
  var addMetadata = createAction(ADD_METADATA)();
  var updateMetadata = createAction(UPDATE_METADATA)();
  var removeMetadata = createAction(REMOVE_METADATA)();
  var reorderMetadata = createAction(REORDER_METADATA)();
  var entityActions = {
    importEntities,
    modifyEntityField,
    reorderEntityField,
    addReference,
    removeReference,
    updateReference,
    addMetadata,
    removeMetadata,
    updateMetadata,
    reorderMetadata
  };

  // src/vault/actions/mapping-actions.ts
  var ADD_MAPPING = "@iiif/ADD_MAPPING";
  var ADD_MAPPINGS = "@iiif/ADD_MAPPINGS";
  var addMapping = createAction(ADD_MAPPING)();
  var addMappings = createAction(ADD_MAPPINGS)();

  // src/vault/actions/meta-actions.ts
  var SET_META_VALUE = "@iiif/SET_META_VALUE";
  var SET_META_VALUE_DYNAMIC = "@iiif/SET_META_VALUE_DYNAMIC";
  var UNSET_META_VALUE = "@iiif/UNSET_META_VALUE";
  var setMetaValue = createAction(SET_META_VALUE)();
  var setMetaValueDynamic = createAction(SET_META_VALUE_DYNAMIC)();
  var unsetMetaValue = createAction(UNSET_META_VALUE)();
  var metaActions = {
    setMetaValue,
    setMetaValueDynamic,
    unsetMetaValue
  };

  // src/vault/actions/request-actions.ts
  var RESOURCE_ERROR = "RESOURCE_ERROR";
  var RESOURCE_LOADING = "RESOURCE_LOADING";
  var RESOURCE_READY = "RESOURCE_READY";
  var REQUEST_RESOURCE = "@iiif/REQUEST_RESOURCE";
  var REQUEST_ERROR = "@iiif/REQUEST_ERROR";
  var REQUEST_MISMATCH = "@iiif/REQUEST_MISMATCH";
  var REQUEST_COMPLETE = "@iiif/REQUEST_COMPLETE";
  var REQUEST_OFFLINE_RESOURCE = "@iiif/REQUEST_OFFLINE_RESOURCE";
  var requestResource = createAction(REQUEST_RESOURCE)();
  var requestError = createAction(REQUEST_ERROR)();
  var requestMismatch = createAction(REQUEST_MISMATCH)();
  var requestComplete = createAction(REQUEST_COMPLETE)();
  var requestOfflineResource = createAction(REQUEST_OFFLINE_RESOURCE)();

  // src/vault/actions/batch-actions.ts
  var BATCH_ACTIONS = "@iiif/BATCH";
  var BATCH_IMPORT = "@iiif/BATCH_IMPORT";
  var batchActions = createAction(BATCH_ACTIONS)();
  var batchImport = createAction(BATCH_IMPORT)();

  // src/vault/utility/action-list-from-resource.ts
  var actionListFromResource = (id, response) => {
    const { entities, resource, mapping } = Ue(response);
    if (resource.id === void 0) {
      return [requestError({ id, message: "ID is not defined in resource." })];
    }
    const actions = [importEntities({ entities }), addMappings({ mapping })];
    if (resource.id !== id) {
      actions.push(addMapping({ id, type: resource.type }));
      actions.push(requestMismatch({ requestId: id, actualId: resource.id }));
    }
    actions.push(requestComplete({ id }));
    return actions;
  };

  // src/vault/utility/are-inputs-equal.ts
  var safeIsNaN = Number.isNaN || function ponyfill(value) {
    return typeof value === "number" && value !== value;
  };
  function isEqual(first, second) {
    if (first === second) {
      return true;
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
      return true;
    }
    return false;
  }
  function areInputsEqual(newInputs, lastInputs) {
    if (!Array.isArray(newInputs) || !Array.isArray(lastInputs)) {
      return newInputs === lastInputs;
    }
    if (newInputs.length !== lastInputs.length) {
      return false;
    }
    for (let i3 = 0; i3 < newInputs.length; i3++) {
      if (!isEqual(newInputs[i3], lastInputs[i3])) {
        return false;
      }
    }
    return true;
  }

  // src/vault/utility/resolve-if-exists.ts
  function resolveIfExists(state, url, parent) {
    const request = state.iiif.requests[url];
    const resourceType = state.iiif.mapping[url];
    if (!resourceType || !state.iiif.entities[resourceType][request.resourceUri]) {
      return void 0;
    }
    const fullEntity = state.iiif.entities[resourceType][request.resourceUri];
    if (fullEntity && fullEntity[d4]) {
      const framing = fullEntity[d4].find((t3) => {
        return parent ? t3[g3] === parent.id : t3[g3] === fullEntity.id;
      });
      return ae2(fullEntity, framing);
    }
    return fullEntity;
  }

  // src/vault/utility/is-promise.ts
  function isPromise(value) {
    return value && typeof value.then === "function";
  }

  // src/vault/utility/create-fetch-helper.ts
  function createFetchHelper(vault, fetcher, { waitTimeout = 30 } = {}) {
    return (url, options, mapper) => {
      const store = vault.getStore();
      const state = store.getState();
      const request = state.iiif.requests[url];
      if (request) {
        if (request.loadingState === RESOURCE_READY) {
          const resolvedEntity = resolveIfExists(state, url);
          if (resolvedEntity) {
            return resolvedEntity;
          }
        }
        switch (request.loadingState) {
          case RESOURCE_ERROR:
            break;
          case RESOURCE_LOADING: {
            return (async () => {
              let cleanupSubscription;
              let didContinue = false;
              try {
                const resolvedEntity = await Promise.race([
                  new Promise((resolve, reject) => {
                    if (didContinue) {
                      return;
                    }
                    cleanupSubscription = store.subscribe(() => {
                      const latestState = store.getState();
                      if (latestState.iiif.requests[url].loadingState === RESOURCE_ERROR) {
                        reject();
                        return;
                      }
                      if (latestState.iiif.requests[url].loadingState === RESOURCE_READY) {
                        const maybeResolvedEntity = resolveIfExists(latestState, url);
                        if (maybeResolvedEntity) {
                          resolve(maybeResolvedEntity);
                        } else {
                          reject();
                        }
                      }
                    });
                  }),
                  new Promise(
                    (resolve, reject) => setTimeout(
                      () => {
                        didContinue = true;
                        reject();
                      },
                      waitTimeout * 60 * 1e3
                    )
                  )
                ]);
                if (cleanupSubscription) {
                  cleanupSubscription();
                }
                if (resolvedEntity) {
                  return resolvedEntity;
                }
              } catch (e3) {
                if (cleanupSubscription) {
                  cleanupSubscription();
                }
              }
            })();
          }
        }
      }
      vault.dispatch(requestResource({ id: url }));
      const importResource = (resource) => {
        if (!resource) {
          return void 0;
        }
        if (!resource.id && !resource["@id"]) {
          if (resource["@type"]) {
            resource["@id"] = url;
            resource.id = url;
          } else {
            resource.id = url;
          }
        }
        const toDispatch = actionListFromResource(url, resource);
        vault.dispatch(batchActions({ actions: toDispatch }));
        return resolveIfExists(store.getState(), url);
      };
      try {
        const resourceOrPromise = fetcher(url, options);
        if (isPromise(resourceOrPromise)) {
          return (async () => {
            try {
              let data = await resourceOrPromise;
              if (mapper) {
                data = mapper(data);
              }
              return importResource(data);
            } catch (err) {
              vault.dispatch(requestError({ id: url, message: err.toString() }));
              throw err;
            }
          })();
        }
        return importResource(mapper ? mapper(resourceOrPromise) : resourceOrPromise);
      } catch (err) {
        vault.dispatch(requestError({ id: url, message: err.toString() }));
        throw err;
      }
    };
  }

  // src/vault/utility/get-default-entities.ts
  function getDefaultEntities() {
    return {
      Collection: {},
      Manifest: {},
      Canvas: {},
      AnnotationPage: {},
      AnnotationCollection: {},
      Annotation: {},
      ContentResource: {},
      Range: {},
      Service: {},
      Selector: {},
      Agent: {}
    };
  }

  // node_modules/.pnpm/zustand@4.5.2_react@18.2.0/node_modules/zustand/esm/vanilla.mjs
  var import_meta = {};
  var createStoreImpl = (createState) => {
    let state;
    const listeners = /* @__PURE__ */ new Set();
    const setState = (partial, replace) => {
      const nextState = typeof partial === "function" ? partial(state) : partial;
      if (!Object.is(nextState, state)) {
        const previousState = state;
        state = (replace != null ? replace : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
        listeners.forEach((listener) => listener(state, previousState));
      }
    };
    const getState = () => state;
    const getInitialState = () => initialState;
    const subscribe = (listener) => {
      listeners.add(listener);
      return () => listeners.delete(listener);
    };
    const destroy = () => {
      if ((import_meta.env ? import_meta.env.MODE : void 0) !== "production") {
        console.warn(
          "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
        );
      }
      listeners.clear();
    };
    const api = { setState, getState, getInitialState, subscribe, destroy };
    const initialState = state = createState(setState, getState, api);
    return api;
  };
  var createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;

  // node_modules/.pnpm/zustand@4.5.2_react@18.2.0/node_modules/zustand/esm/middleware.mjs
  var import_meta2 = {};
  var reduxImpl = (reducer, initial) => (set, _get, api) => {
    api.dispatch = (action) => {
      set((state) => reducer(state, action), false, action);
      return action;
    };
    api.dispatchFromDevtools = true;
    return { dispatch: (...a3) => api.dispatch(...a3), ...initial };
  };
  var redux = reduxImpl;
  var trackedConnections = /* @__PURE__ */ new Map();
  var getTrackedConnectionState = (name) => {
    const api = trackedConnections.get(name);
    if (!api)
      return {};
    return Object.fromEntries(
      Object.entries(api.stores).map(([key, api2]) => [key, api2.getState()])
    );
  };
  var extractConnectionInformation = (store, extensionConnector, options) => {
    if (store === void 0) {
      return {
        type: "untracked",
        connection: extensionConnector.connect(options)
      };
    }
    const existingConnection = trackedConnections.get(options.name);
    if (existingConnection) {
      return { type: "tracked", store, ...existingConnection };
    }
    const newConnection = {
      connection: extensionConnector.connect(options),
      stores: {}
    };
    trackedConnections.set(options.name, newConnection);
    return { type: "tracked", store, ...newConnection };
  };
  var devtoolsImpl = (fn, devtoolsOptions = {}) => (set, get, api) => {
    const { enabled, anonymousActionType, store, ...options } = devtoolsOptions;
    let extensionConnector;
    try {
      extensionConnector = (enabled != null ? enabled : (import_meta2.env ? import_meta2.env.MODE : void 0) !== "production") && window.__REDUX_DEVTOOLS_EXTENSION__;
    } catch (e3) {
    }
    if (!extensionConnector) {
      if ((import_meta2.env ? import_meta2.env.MODE : void 0) !== "production" && enabled) {
        console.warn(
          "[zustand devtools middleware] Please install/enable Redux devtools extension"
        );
      }
      return fn(set, get, api);
    }
    const { connection, ...connectionInformation } = extractConnectionInformation(store, extensionConnector, options);
    let isRecording = true;
    api.setState = (state, replace, nameOrAction) => {
      const r3 = set(state, replace);
      if (!isRecording)
        return r3;
      const action = nameOrAction === void 0 ? { type: anonymousActionType || "anonymous" } : typeof nameOrAction === "string" ? { type: nameOrAction } : nameOrAction;
      if (store === void 0) {
        connection == null ? void 0 : connection.send(action, get());
        return r3;
      }
      connection == null ? void 0 : connection.send(
        {
          ...action,
          type: `${store}/${action.type}`
        },
        {
          ...getTrackedConnectionState(options.name),
          [store]: api.getState()
        }
      );
      return r3;
    };
    const setStateFromDevtools = (...a3) => {
      const originalIsRecording = isRecording;
      isRecording = false;
      set(...a3);
      isRecording = originalIsRecording;
    };
    const initialState = fn(api.setState, get, api);
    if (connectionInformation.type === "untracked") {
      connection == null ? void 0 : connection.init(initialState);
    } else {
      connectionInformation.stores[connectionInformation.store] = api;
      connection == null ? void 0 : connection.init(
        Object.fromEntries(
          Object.entries(connectionInformation.stores).map(([key, store2]) => [
            key,
            key === connectionInformation.store ? initialState : store2.getState()
          ])
        )
      );
    }
    if (api.dispatchFromDevtools && typeof api.dispatch === "function") {
      let didWarnAboutReservedActionType = false;
      const originalDispatch = api.dispatch;
      api.dispatch = (...a3) => {
        if ((import_meta2.env ? import_meta2.env.MODE : void 0) !== "production" && a3[0].type === "__setState" && !didWarnAboutReservedActionType) {
          console.warn(
            '[zustand devtools middleware] "__setState" action type is reserved to set state from the devtools. Avoid using it.'
          );
          didWarnAboutReservedActionType = true;
        }
        originalDispatch(...a3);
      };
    }
    connection.subscribe((message) => {
      var _a;
      switch (message.type) {
        case "ACTION":
          if (typeof message.payload !== "string") {
            console.error(
              "[zustand devtools middleware] Unsupported action format"
            );
            return;
          }
          return parseJsonThen(
            message.payload,
            (action) => {
              if (action.type === "__setState") {
                if (store === void 0) {
                  setStateFromDevtools(action.state);
                  return;
                }
                if (Object.keys(action.state).length !== 1) {
                  console.error(
                    `
                    [zustand devtools middleware] Unsupported __setState action format. 
                    When using 'store' option in devtools(), the 'state' should have only one key, which is a value of 'store' that was passed in devtools(),
                    and value of this only key should be a state object. Example: { "type": "__setState", "state": { "abc123Store": { "foo": "bar" } } }
                    `
                  );
                }
                const stateFromDevtools = action.state[store];
                if (stateFromDevtools === void 0 || stateFromDevtools === null) {
                  return;
                }
                if (JSON.stringify(api.getState()) !== JSON.stringify(stateFromDevtools)) {
                  setStateFromDevtools(stateFromDevtools);
                }
                return;
              }
              if (!api.dispatchFromDevtools)
                return;
              if (typeof api.dispatch !== "function")
                return;
              api.dispatch(action);
            }
          );
        case "DISPATCH":
          switch (message.payload.type) {
            case "RESET":
              setStateFromDevtools(initialState);
              if (store === void 0) {
                return connection == null ? void 0 : connection.init(api.getState());
              }
              return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));
            case "COMMIT":
              if (store === void 0) {
                connection == null ? void 0 : connection.init(api.getState());
                return;
              }
              return connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));
            case "ROLLBACK":
              return parseJsonThen(message.state, (state) => {
                if (store === void 0) {
                  setStateFromDevtools(state);
                  connection == null ? void 0 : connection.init(api.getState());
                  return;
                }
                setStateFromDevtools(state[store]);
                connection == null ? void 0 : connection.init(getTrackedConnectionState(options.name));
              });
            case "JUMP_TO_STATE":
            case "JUMP_TO_ACTION":
              return parseJsonThen(message.state, (state) => {
                if (store === void 0) {
                  setStateFromDevtools(state);
                  return;
                }
                if (JSON.stringify(api.getState()) !== JSON.stringify(state[store])) {
                  setStateFromDevtools(state[store]);
                }
              });
            case "IMPORT_STATE": {
              const { nextLiftedState } = message.payload;
              const lastComputedState = (_a = nextLiftedState.computedStates.slice(-1)[0]) == null ? void 0 : _a.state;
              if (!lastComputedState)
                return;
              if (store === void 0) {
                setStateFromDevtools(lastComputedState);
              } else {
                setStateFromDevtools(lastComputedState[store]);
              }
              connection == null ? void 0 : connection.send(
                null,
                // FIXME no-any
                nextLiftedState
              );
              return;
            }
            case "PAUSE_RECORDING":
              return isRecording = !isRecording;
          }
          return;
      }
    });
    return initialState;
  };
  var devtools = devtoolsImpl;
  var parseJsonThen = (stringified, f5) => {
    let parsed;
    try {
      parsed = JSON.parse(stringified);
    } catch (e3) {
      console.error(
        "[zustand devtools middleware] Could not parse the received json",
        e3
      );
    }
    if (parsed !== void 0)
      f5(parsed);
  };
  var subscribeWithSelectorImpl = (fn) => (set, get, api) => {
    const origSubscribe = api.subscribe;
    api.subscribe = (selector, optListener, options) => {
      let listener = selector;
      if (optListener) {
        const equalityFn = (options == null ? void 0 : options.equalityFn) || Object.is;
        let currentSlice = selector(api.getState());
        listener = (state) => {
          const nextSlice = selector(state);
          if (!equalityFn(currentSlice, nextSlice)) {
            const previousSlice = currentSlice;
            optListener(currentSlice = nextSlice, previousSlice);
          }
        };
        if (options == null ? void 0 : options.fireImmediately) {
          optListener(currentSlice, currentSlice);
        }
      }
      return origSubscribe(listener);
    };
    const initialState = fn(set, get, api);
    return initialState;
  };
  var subscribeWithSelector = subscribeWithSelectorImpl;

  // src/vault/store/reducers/mapping-reducer.ts
  var mappingReducer = (state = {}, action) => {
    switch (action.type) {
      case ADD_MAPPING:
        return {
          ...state,
          [action.payload.id]: action.payload.type
        };
      case ADD_MAPPINGS:
        return {
          ...state,
          ...action.payload.mapping
        };
      default:
        return state;
    }
  };

  // src/vault/utility/is-reference-list.ts
  function isReferenceList(state, id, type, key) {
    return !(!state[type] || !state[type][id] || !state[type][id][key] || !Array.isArray(state[type][id][key]));
  }

  // src/vault/utility/quick-merge.ts
  function quickMerge(a3, b3) {
    const newResource = {};
    const added = [];
    for (const [key, value] of Object.entries(a3 || {})) {
      added.push(key);
      const bValue = (b3 || {})[key];
      if (!bValue || bValue.length === 0) {
        newResource[key] = value;
        continue;
      }
      newResource[key] = bValue;
    }
    for (const [key, value] of Object.entries(b3 || {})) {
      if (added.indexOf(key) !== -1) {
        continue;
      }
      newResource[key] = value;
    }
    return newResource;
  }

  // src/vault/store/reducers/entities-reducer.ts
  function payload(action) {
    return action.payload;
  }
  function numberOr(a3, b3) {
    return typeof a3 === "undefined" ? b3 : a3;
  }
  var entitiesReducer = (state = getDefaultEntities(), action) => {
    const updateField = (entity, values) => {
      return {
        ...state,
        [payload(action).type]: {
          ...state[payload(action).type],
          [payload(action).id]: {
            ...entity,
            ...values
          }
        }
      };
    };
    switch (action.type) {
      case MODIFY_ENTITY_FIELD: {
        if (!state[payload(action).type] || !state[payload(action).type][payload(action).id]) {
          return state;
        }
        const entity = state[payload(action).type][payload(action).id];
        if (typeof entity === "string") {
          return state;
        }
        return updateField(entity, { [payload(action).key]: payload(action).value });
      }
      case REORDER_ENTITY_FIELD: {
        if (!isReferenceList(state, payload(action).id, payload(action).type, payload(action).key)) {
          return state;
        }
        const entity = state[payload(action).type][payload(action).id];
        if (typeof entity === "string") {
          return state;
        }
        const result = Array.from(entity[payload(action).key]);
        const [removed] = result.splice(payload(action).startIndex, 1);
        result.splice(payload(action).endIndex, 0, removed);
        return updateField(entity, { [payload(action).key]: result });
      }
      case IMPORT_ENTITIES: {
        const keys = Object.keys(payload(action).entities);
        const toReturn = { ...state };
        for (const key of keys) {
          const entities = payload(action).entities[key];
          const newEntities = { ...state[key] || {} };
          let changed = false;
          const ids = Object.keys(entities || {}) || [];
          if (entities && ids) {
            for (const id of ids) {
              changed = true;
              newEntities[id] = state[key][id] ? quickMerge(state[key][id], entities[id]) : entities[id];
            }
            if (changed) {
              toReturn[key] = newEntities;
            }
          }
        }
        return toReturn;
      }
      case ADD_REFERENCE: {
        if (!isReferenceList(state, payload(action).id, payload(action).type, payload(action).key)) {
          return state;
        }
        const entity = state[payload(action).type][payload(action).id];
        const result = Array.from(entity[payload(action).key]);
        result.splice(numberOr(payload(action).index, result.length + 1), 0, payload(action).reference);
        return updateField(entity, { [payload(action).key]: result });
      }
      case UPDATE_REFERENCE:
      case REMOVE_REFERENCE: {
        if (!isReferenceList(state, payload(action).id, payload(action).type, payload(action).key)) {
          return state;
        }
        const entity = state[payload(action).type][payload(action).id];
        const result = Array.from(entity[payload(action).key]);
        const indexToRemove = numberOr(
          payload(action).index,
          result.findIndex((e3) => e3 && e3.id === payload(action).reference.id)
        );
        if (indexToRemove === -1 || result[indexToRemove]?.id !== payload(action).reference.id) {
          return state;
        }
        if (action.type === UPDATE_REFERENCE) {
          result.splice(indexToRemove, 1, payload(action).reference);
        } else {
          result.splice(indexToRemove, 1);
        }
        return updateField(entity, { [payload(action).key]: result });
      }
      case ADD_METADATA: {
        const entity = state[payload(action).type][payload(action).id];
        if (!entity) {
          return state;
        }
        const metadata = Array.from(entity.metadata || []);
        const actionPayload = payload(action);
        metadata.splice(numberOr(action.payload.beforeIndex, metadata.length + 1), 0, {
          label: actionPayload.label,
          value: actionPayload.label
        });
        return updateField(entity, { metadata });
      }
      case REORDER_METADATA: {
        const entity = state[payload(action).type][payload(action).id];
        if (typeof entity === "string" || !entity) {
          return state;
        }
        const metadata = Array.from(entity.metadata || []);
        const [removed] = metadata.splice(payload(action).startIndex, 1);
        metadata.splice(payload(action).endIndex, 0, removed);
        return updateField(entity, { metadata });
      }
      case UPDATE_METADATA:
      case REMOVE_METADATA: {
        const entity = state[payload(action).type][payload(action).id];
        const metadata = Array.from(entity.metadata || []);
        const indexToRemove = payload(action).atIndex;
        if (typeof indexToRemove === "undefined" || indexToRemove === -1 || !metadata[indexToRemove]) {
          return state;
        }
        if (action.type === UPDATE_METADATA) {
          metadata.splice(indexToRemove, 1, { label: payload(action).label, value: payload(action).value });
        } else {
          metadata.splice(indexToRemove, 1);
        }
        return updateField(entity, { metadata });
      }
      default:
        return state;
    }
  };

  // src/vault/store/reducers/request-reducer.ts
  var requestReducer = (state = {}, action) => {
    switch (action.type) {
      case REQUEST_RESOURCE:
      case REQUEST_OFFLINE_RESOURCE:
        return {
          ...state,
          [action.payload.id]: {
            requestUri: action.payload.id,
            loadingState: RESOURCE_LOADING,
            uriMismatch: false,
            resourceUri: action.payload.id
          }
        };
      case REQUEST_MISMATCH:
        return {
          ...state,
          [action.payload.requestId]: {
            ...state[action.payload.requestId] || {},
            uriMismatch: true,
            resourceUri: action.payload.actualId
          },
          [action.payload.actualId]: {
            requestUri: action.payload.requestId,
            loadingState: state[action.payload.requestId].loadingState,
            uriMismatch: true,
            resourceUri: action.payload.actualId
          }
        };
      case REQUEST_ERROR:
        return {
          ...state,
          [action.payload.id]: {
            ...state[action.payload.id] || {},
            loadingState: RESOURCE_ERROR,
            error: action.payload.message
          }
        };
      case REQUEST_COMPLETE:
        return {
          ...state,
          [action.payload.id]: {
            ...state[action.payload.id] || {},
            loadingState: RESOURCE_READY,
            error: void 0
          }
        };
    }
    return state;
  };

  // src/vault/store/reducers/meta-reducer.ts
  var metaReducer = (state = {}, action) => {
    const { id, updateValue, value, meta, key } = action && action.payload || {};
    switch (action.type) {
      case SET_META_VALUE: {
        return {
          ...state,
          [id]: {
            ...state[id] || {},
            [meta]: {
              ...state[id] ? state[id][meta] || {} : {},
              [key]: value
            }
          }
        };
      }
      case SET_META_VALUE_DYNAMIC: {
        return {
          ...state,
          [id]: {
            ...state[id] || {},
            [meta]: {
              ...state[id] ? state[id][meta] || {} : {},
              [key]: state[id] && state[id][meta] ? updateValue(state[id][meta][key]) : updateValue(void 0)
            }
          }
        };
      }
      case UNSET_META_VALUE: {
        if (state[id] && state[id][meta] && state[id][meta][key]) {
          return {
            ...state,
            [id]: {
              ...state[id] || {},
              [meta]: {
                ...state[id] ? state[id][meta] || {} : {},
                [key]: void 0
              }
            }
          };
        }
        return state;
      }
      default:
        return state;
    }
  };

  // src/vault/utility/combine-reducers.ts
  function combineReducers(reducers2 = {}) {
    const reducerKeys = Object.keys(reducers2);
    return function combination(state = {}, action) {
      let hasChanged = false;
      const nextState = {};
      for (let i3 = 0; i3 < reducerKeys.length; i3++) {
        const key = reducerKeys[i3];
        nextState[key] = reducers2[key](state[key], action);
        hasChanged = hasChanged || nextState[key] !== state[key];
      }
      return hasChanged ? nextState : state;
    };
  }

  // src/vault/store/reducers/batch-reducer.ts
  function createBatchReducer(rootReducer) {
    return (state, action) => {
      if (action && action.type === BATCH_ACTIONS) {
        return action.payload.actions.reduce(rootReducer, state);
      }
      if (action && action.type === BATCH_IMPORT) {
        return {
          ...state,
          iiif: {
            ...state.iiif,
            ...action.payload.state
          }
        };
      }
      return rootReducer(state, action);
    };
  }

  // src/vault/store/index.ts
  var reducers = combineReducers({
    mapping: mappingReducer,
    entities: entitiesReducer,
    requests: requestReducer,
    meta: metaReducer
  });
  function getDefaultState() {
    return {
      iiif: {
        entities: getDefaultEntities(),
        meta: {},
        mapping: {},
        requests: {}
      }
    };
  }
  function createStore2(options = {}) {
    const {
      enableDevtools = false,
      iiifStoreName = "iiif",
      defaultState = getDefaultState(),
      customReducers = {}
    } = options;
    const rootReducer = createBatchReducer(combineReducers({ [iiifStoreName]: reducers, ...customReducers }));
    const enabled = Boolean(typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__);
    const dv = !enabled || false ? (a3, r3) => a3 : devtools;
    return createStore(
      //
      subscribeWithSelector(
        //
        dv(
          //
          redux(rootReducer, defaultState),
          { enabled: enableDevtools }
        )
      )
    );
  }

  // node_modules/.pnpm/mitt@3.0.1/node_modules/mitt/dist/mitt.mjs
  function mitt_default(n2) {
    return { all: n2 = n2 || /* @__PURE__ */ new Map(), on: function(t3, e3) {
      var i3 = n2.get(t3);
      i3 ? i3.push(e3) : n2.set(t3, [e3]);
    }, off: function(t3, e3) {
      var i3 = n2.get(t3);
      i3 && (e3 ? i3.splice(i3.indexOf(e3) >>> 0, 1) : n2.set(t3, []));
    }, emit: function(t3, e3) {
      var i3 = n2.get(t3);
      i3 && i3.slice().map(function(n3) {
        n3(e3);
      }), (i3 = n2.get("*")) && i3.slice().map(function(n3) {
        n3(t3, e3);
      });
    } };
  }

  // src/vault/utility/objects.ts
  function defineProperty(name, prototype, vault, enumerable = true) {
    prototype[DEFINED] = prototype[DEFINED] || [];
    prototype[DEFINED].push(name);
    const cache = /* @__PURE__ */ new Map();
    Object.defineProperty(prototype, name, {
      enumerable,
      get() {
        if (typeof prototype[REFS][name] === "undefined") {
          return void 0;
        }
        const ref = prototype[REFS][name];
        if (!ref) {
          return ref;
        }
        const object = vault.get(prototype[REFS][name], {
          parent: this.id ? { id: this.id, type: this.type } : void 0
        });
        if (!cache.has(object)) {
          cache.clear();
          cache.set(object, wrapObject(object, vault));
        }
        return cache.get(object);
      },
      set(items) {
        const existing = prototype[REFS][name];
        if (existing !== items) {
          if (this[REACTIVE]) {
            vault.modifyEntityField({ id: this.id, type: this.type }, name, unwrapObject(items));
          } else {
            this[REFS][name] = items;
          }
        }
      }
    });
  }
  var REFS = Symbol.for("_refs_");
  var REACTIVE = Symbol.for("_reactive_");
  var DEFINED = Symbol.for("_defined_");
  var PARENT = Symbol.for("_parent_");
  function createPrototype(vault, reactive = false, parent) {
    const prototype = {
      id: "",
      type: "unknown",
      [DEFINED]: [],
      [REFS]: {},
      [PARENT]: parent || null,
      [REACTIVE]: null,
      is(refOrObject) {
        if (typeof refOrObject === "string") {
          return this.id === refOrObject;
        }
        if (refOrObject.id) {
          return refOrObject.id === this.id;
        }
        return false;
      },
      reactive() {
        if (this[REACTIVE]) {
          return;
        }
        this[REACTIVE] = this.subscribe(() => this.refresh(), true);
        return () => {
          this.unreactive();
        };
      },
      refresh() {
        if (this.id) {
          const fresh = this.unwrap();
          for (const key of Object.keys(fresh || {})) {
            if (this[DEFINED].includes(key)) {
              this[REFS][key] = fresh[key];
            } else {
              this[key] = fresh[key];
            }
          }
        }
      },
      unreactive() {
        if (this[REACTIVE]) {
          this[REACTIVE]();
          this[REACTIVE] = null;
        }
      },
      unwrap() {
        if (!this.id) {
          throw new Error("Invalid object");
        }
        const parent2 = this[PARENT];
        return vault.get(this.id, { parent: parent2 ? { id: parent2, type: "unknown" } : void 0 });
      },
      toPresentation3() {
        return vault.toPresentation3(this.unwrap());
      },
      toPresentation2() {
        return vault.toPresentation2(this.unwrap());
      },
      valueOf() {
        return this.unwrap();
      },
      toJSON() {
        const that = this;
        return {
          ...that,
          items: that.items,
          annotations: that.annotations,
          structures: that.structures,
          seeAlso: that.seeAlso,
          service: that.service,
          services: that.services,
          rendering: that.rendering,
          partOf: that.partOf,
          start: that.start,
          supplementary: that.supplementary,
          homepage: that.homepage,
          thumbnail: that.thumbnail,
          placeholderCanvas: that.placeholderCanvas,
          accompanyingCanvas: that.accompanyingCanvas,
          provider: that.provider
        };
      },
      subscribe(subscription, skipInitial = true) {
        return vault.subscribe(
          () => {
            return this.id ? vault.get(this.id) : null;
          },
          subscription,
          skipInitial
        );
      }
    };
    defineProperty("items", prototype, vault);
    defineProperty("annotations", prototype, vault);
    defineProperty("structures", prototype, vault);
    defineProperty("seeAlso", prototype, vault);
    defineProperty("rendering", prototype, vault);
    defineProperty("partOf", prototype, vault);
    defineProperty("start", prototype, vault, false);
    defineProperty("supplementary", prototype, vault);
    defineProperty("homepage", prototype, vault);
    defineProperty("thumbnail", prototype, vault);
    defineProperty("placeholderCanvas", prototype, vault, false);
    defineProperty("accompanyingCanvas", prototype, vault, false);
    defineProperty("provider", prototype, vault);
    defineProperty("body", prototype, vault);
    defineProperty("logo", prototype, vault);
    return prototype;
  }
  function isWrapped(object) {
    return !!object[DEFINED];
  }
  function unwrapObject(object) {
    if (Array.isArray(object)) {
      return object.map((o4) => unwrapObject(o4));
    }
    if (!object || !object.type) {
      return object;
    }
    return { id: object.id, type: object.type };
  }
  function wrapObject(object, vault, reactive = false, parent) {
    if (Array.isArray(object)) {
      return object.map((o4) => wrapObject(o4, vault, reactive));
    }
    if (!object || !object.type || !object.id) {
      return object;
    }
    const prototype = createPrototype(vault, reactive);
    const newObject = Object.create(prototype);
    const wrapped = Object.assign(newObject, object);
    if (reactive) {
      wrapped.reactive();
    }
    return wrapped;
  }

  // src/vault/utility/resolve-type.ts
  function resolveType(type) {
    switch (type) {
      case "Image":
      case "Video":
      case "Sound":
      case "Dataset":
      case "Text":
      case "Composite":
      case "List":
      case "Independents":
      case "Audience":
        return "ContentResource";
      case "ImageService1":
      case "ImageService2":
      case "ImageService3":
        return "Service";
    }
    return type;
  }

  // src/vault/vault.ts
  var Vault = class {
    constructor(options, store) {
      __publicField(this, "options");
      __publicField(this, "store");
      __publicField(this, "emitter");
      __publicField(this, "isBatching", false);
      __publicField(this, "batchQueue", []);
      __publicField(this, "remoteFetcher");
      __publicField(this, "staticFetcher");
      __publicField(this, "defaultFetcher", (url) => {
        return fetch(url).then((r3) => {
          if (r3.status === 200) {
            return r3.json();
          } else {
            const err = new Error(`${r3.status} ${r3.statusText}`);
            err.name = `HTTPError`;
            throw err;
          }
        });
      });
      this.options = Object.assign(
        {
          reducers: {},
          customFetcher: this.defaultFetcher,
          enableDevtools: true
        },
        options || {}
      );
      this.store = store || createStore2({
        customReducers: this.options.reducers,
        defaultState: this.options.defaultState,
        enableDevtools: this.options.enableDevtools
      });
      this.emitter = mitt_default();
      this.remoteFetcher = createFetchHelper(this, this.options.customFetcher);
      this.staticFetcher = createFetchHelper(this, (id, json) => json);
    }
    batch(cb) {
      this.isBatching = true;
      try {
        cb(this);
        this.isBatching = false;
        this.dispatch(batchActions({ actions: this.batchQueue }));
      } catch (e3) {
        this.batchQueue = [];
        this.isBatching = false;
        throw e3;
      }
      this.batchQueue = [];
    }
    async asyncBatch(cb) {
      this.isBatching = true;
      try {
        await cb(this);
        this.isBatching = false;
        this.dispatch(batchActions({ actions: this.batchQueue }));
      } catch (e3) {
        this.batchQueue = [];
        this.isBatching = false;
        throw e3;
      }
      this.batchQueue = [];
    }
    modifyEntityField(entity, key, value) {
      this.dispatch(
        entityActions.modifyEntityField({
          id: entity.id,
          type: entity.type,
          key,
          value
        })
      );
    }
    dispatch(action) {
      if (!this.isBatching) {
        if (action.type === BATCH_ACTIONS) {
          for (const realAction of action.payload.actions) {
            this.emitter.emit(realAction.type, { action: realAction, state: this.store.getState() });
          }
          this.store.dispatch(action);
          const state2 = this.getState();
          for (const realAction of action.payload.actions) {
            this.emitter.emit(`after:${realAction.type}`, { action: realAction, state: state2 });
          }
          return;
        }
        this.emitter.emit(action.type, { action, state: this.store.getState() });
        this.store.dispatch(action);
        const state = this.store.getState();
        this.emitter.emit(`after:${action.type}`, { action, state });
        return;
      } else {
        this.batchQueue.push(action);
      }
    }
    on(event, handler) {
      this.emitter.on(event, handler);
      return () => {
        this.emitter.off(event, handler);
      };
    }
    serialize(entity, config) {
      return We(this.getState().iiif, entity, config);
    }
    toPresentation2(entity) {
      return this.serialize(entity, Ge);
    }
    toPresentation3(entity) {
      return this.serialize(entity, Qe);
    }
    hydrate(reference, type, options = {}) {
      return this.get(reference, type, { ...options, skipSelfReturn: false });
    }
    get(reference, type, options = {}) {
      if (typeof type !== "string") {
        options = type || {};
        type = void 0;
      }
      const { skipSelfReturn = true } = options || {};
      let parent = options.parent ? typeof options.parent === "string" ? options.parent : options.parent.id : void 0;
      if (Array.isArray(reference)) {
        return reference.map((i3) => this.get(i3, options));
      }
      const state = this.getState();
      if (v2(reference) && !options.preserveSpecificResources) {
        reference = reference.source;
      }
      if (typeof reference === "string") {
        const _type2 = resolveType(type ? type : state.iiif.mapping[reference]);
        if (!_type2) {
          if (skipSelfReturn) {
            return null;
          }
          return { id: reference, type: "unknown" };
        }
        reference = { id: reference, type: _type2 };
      }
      if (reference && reference.partOf && !parent && !options.skipPartOfCheck) {
        const first = Array.isArray(reference.partOf) ? reference.partOf[0] : reference.partOf;
        if (first) {
          if (typeof first === "string") {
            parent = first;
          }
          if (typeof first.id === "string") {
            parent = first.id;
          }
        }
      }
      const _type = resolveType(type ? type : reference?.type);
      const _id = reference?.id;
      const entities = state.iiif.entities[_type];
      if (!entities) {
        const request = state.iiif.requests[_id];
        if (request && request.resourceUri !== _id) {
          return this.get(request.resourceUri, options);
        }
        if (skipSelfReturn) {
          return null;
        }
        return reference;
      }
      const found = entities[reference.id];
      if (found && found[d4]) {
        const framing = found[d4].find((t3) => {
          return parent ? t3[g3] === parent : t3[g3] === found.id;
        });
        return ae2(found, framing);
      }
      return entities[reference.id] || (skipSelfReturn ? null : reference);
    }
    select(selector) {
      return selector(this.getState());
    }
    getStore() {
      return this.store;
    }
    getState() {
      return this.store.getState();
    }
    deep(input, prev) {
      if (typeof input === "undefined") {
        return this.get(prev, { skipSelfReturn: false });
      }
      if (typeof input === "function") {
        try {
          const next = input(this.get(prev, { skipSelfReturn: false }));
          const fn2 = (newInput) => this.deep(newInput, next);
          fn2.size = Array.isArray(next) ? next.length : 1;
          return fn2;
        } catch (e3) {
          const fn2 = (newInput) => this.deep(newInput, void 0);
          fn2.size = 0;
          return fn2;
        }
      }
      const fn = (newInput) => this.deep(newInput, input);
      fn.size = Array.isArray(input) ? input.length : 1;
      return fn;
    }
    loadManifest(id, json, mapper) {
      const _id = typeof id === "string" ? id : id.id;
      return this.load(_id, json, mapper);
    }
    loadCollection(id, json, mapper) {
      const _id = typeof id === "string" ? id : id.id;
      return this.load(_id, json, mapper);
    }
    load(id, json, mapper) {
      const _id = typeof id === "string" ? id : id.id;
      if (json) {
        return Promise.resolve(this.staticFetcher(_id, json, mapper));
      }
      return Promise.resolve(this.remoteFetcher(_id, {}, mapper));
    }
    loadSync(id, json, mapper) {
      const _id = typeof id === "string" ? id : id.id;
      return this.staticFetcher(_id, json, mapper);
    }
    loadManifestSync(id, json, mapper) {
      const _id = typeof id === "string" ? id : id.id;
      return this.loadSync(_id, json, mapper);
    }
    loadCollectionSync(id, json, mapper) {
      const _id = typeof id === "string" ? id : id.id;
      return this.loadSync(_id, json, mapper);
    }
    areInputsEqual(newInputs, lastInputs) {
      return areInputsEqual(newInputs, lastInputs);
    }
    subscribe(selector, subscription, skipInitial) {
      if (typeof skipInitial === "undefined" && (typeof subscription === "undefined" || subscription === false || subscription === true)) {
        skipInitial = subscription;
        subscription = selector;
        selector = (a3) => a3;
      }
      return this.store.subscribe(selector, (s2) => subscription(s2, this), {
        equalityFn: areInputsEqual,
        fireImmediately: !skipInitial
      });
    }
    async ensureLoaded(_id) {
      const id = typeof _id === "string" ? _id : _id.id;
      if (!this.requestStatus(id)) {
        await this.load(id);
      }
    }
    requestStatus(id) {
      return this.select((state) => {
        return state.iiif.requests[id];
      });
    }
    // Pagination built on "meta".
    getPaginationState(resource) {
      const id = typeof resource === "string" ? resource : resource.id;
      if (!id)
        return null;
      const existing = this.getResourceMeta(id, "@vault/pagination");
      if (existing?.state) {
        return existing.state;
      }
      const fullResource = this.get(resource);
      if (fullResource.first) {
        const initialState = {
          currentPage: null,
          currentPageIndex: null,
          isFetching: false,
          isFullyLoaded: false,
          next: fullResource.first,
          page: 1,
          pages: [],
          previous: null,
          totalItems: fullResource.total,
          currentLength: 0
        };
        this.setMetaValue([id, "@vault/pagination", "state"], initialState);
        return initialState;
      }
      return null;
    }
    async loadNextPage(resource, json) {
      const id = typeof resource === "string" ? resource : resource.id;
      if (!id)
        return [null, null];
      const state = this.getPaginationState(resource);
      if (!state || state.isFullyLoaded || !state.next) {
        return [null, null];
      }
      if (state.isFetching) {
        return [state, null];
      }
      const nextPage = typeof state.next === "string" ? state.next : state.next.id;
      const previousPage = state.currentPage;
      const newState = {
        ...state,
        isFetching: true
      };
      this.setMetaValue([id, "@vault/pagination", "state"], newState);
      let collectionPage;
      try {
        collectionPage = await this.loadCollection(nextPage, json, (mapped) => {
          const { id: id2, ["@id"]: _id, ...properties } = mapped || {};
          if (_id) {
            return { ["@id"]: nextPage, ...properties };
          }
          return { id: nextPage, ...properties };
        });
      } catch (err) {
        const errState = {
          ...state,
          isFetching: false,
          error: err
        };
        this.setMetaValue([id, "@vault/pagination", "state"], errState);
        return [errState, null];
      }
      if (!collectionPage) {
        const errState = {
          ...state,
          isFetching: false,
          error: new Error("Collection not found")
        };
        this.setMetaValue([id, "@vault/pagination", "state"], errState);
        return [errState, null];
      }
      const fullCollection = this.get(id);
      const combinedItems = [
        ...fullCollection.items || [],
        ...collectionPage.items || []
      ].map((resource2) => ({
        id: resource2.id,
        type: resource2.type
      }));
      this.modifyEntityField({ id, type: "Collection" }, "items", combinedItems);
      const latestState = this.getPaginationState(resource);
      if (!latestState)
        throw new Error("Pagination state not found");
      const successState = {
        ...latestState,
        isFetching: false,
        error: null,
        currentPage: collectionPage.id,
        next: collectionPage.next?.id || null,
        currentPageIndex: latestState.pages.length,
        currentLength: combinedItems.length,
        pages: [
          ...latestState.pages,
          {
            id: collectionPage.id,
            type: "Collection",
            startIndex: fullCollection.items.length,
            pageLength: collectionPage.items.length,
            order: typeof latestState.currentPageIndex === "number" ? latestState.currentPageIndex + 1 : 0
          }
        ],
        isFullyLoaded: !collectionPage.next,
        previous: previousPage,
        page: latestState.pages.length + 1
      };
      this.setMetaValue([id, "@vault/pagination", "state"], successState);
      return [successState, collectionPage];
    }
    getResourceMeta(resource, metaKey) {
      const resourceMeta = this.getState().iiif.meta[resource];
      if (!resourceMeta) {
        return void 0;
      }
      if (!metaKey) {
        return resourceMeta;
      }
      return resourceMeta[metaKey];
    }
    getObject(reference, type, options = {}) {
      const { reactive, ...otherOptions } = options;
      return wrapObject(this.get(reference, type, otherOptions), this, reactive);
    }
    async loadObject(id, json) {
      return wrapObject(await this.load(id, json), this);
    }
    async loadManifestObject(id, json) {
      return wrapObject(await this.loadManifest(id, json), this);
    }
    async loadCollectionObject(id, json) {
      return wrapObject(await this.loadCollection(id, json), this);
    }
    wrapObject(objectType) {
      return wrapObject(this.get(objectType, { skipSelfReturn: false }), this);
    }
    isWrapped(object) {
      return isWrapped(object);
    }
    setMetaValue([id, meta, key], newValueOrUpdate) {
      this.dispatch(
        typeof newValueOrUpdate === "function" ? metaActions.setMetaValueDynamic({
          id,
          meta,
          key,
          updateValue: newValueOrUpdate
        }) : metaActions.setMetaValue({
          id,
          meta,
          key,
          value: newValueOrUpdate
        })
      );
    }
  };

  // src/vault/utility/get-global.ts
  function getGlobal() {
    if (typeof self !== "undefined") {
      return self;
    }
    if (typeof window !== "undefined") {
      return window;
    }
    if (typeof global !== "undefined") {
      return global;
    }
    return {};
  }

  // src/vault/global-vault.ts
  function globalVault(options) {
    const g4 = getGlobal();
    try {
      const gv = g4["IIIF_VAULT"];
      if (gv) {
        return gv;
      }
    } catch (e3) {
    }
    const newVault = new Vault(options);
    try {
      g4["IIIF_VAULT"] = newVault;
    } catch (e3) {
    }
    return newVault;
  }
  return __toCommonJS(vault_exports2);
})();
