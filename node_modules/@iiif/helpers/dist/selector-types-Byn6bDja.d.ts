import { ImageApiSelector } from '@iiif/presentation-3';

type SvgShapeType = 'rect' | 'circle' | 'ellipse' | 'line' | 'polyline' | 'polygon' | 'path';
interface SupportedSelector {
    type: string;
    temporal?: {
        startTime: number;
        endTime?: number;
    };
    spatial?: {
        unit?: 'percent' | 'pixel';
        x: number;
        y: number;
        width?: number;
        height?: number;
    };
    rotation?: number;
    points?: [number, number][];
    svg?: string;
    svgShape?: SvgShapeType;
    style?: SelectorStyle;
}
interface SelectorStyle {
    fill?: string;
    fillOpacity?: number;
    stroke?: string;
    strokeOpacity?: number;
    strokeWidth?: string;
    strokeDasharray?: string;
}
interface BoxSelector extends SupportedSelector {
    type: 'BoxSelector';
    spatial: {
        unit?: 'percent' | 'pixel';
        x: number;
        y: number;
        width: number;
        height: number;
    };
    rotation?: number;
}
interface PointSelector extends SupportedSelector {
    type: 'PointSelector';
    spatial: {
        x: number;
        y: number;
    };
    rotation?: number;
}
interface SvgSelector extends SupportedSelector {
    type: 'SvgSelector';
    svg: string;
    svgShape?: SvgShapeType;
    points?: [number, number][];
    spatial?: {
        unit: 'pixel';
        x: number;
        y: number;
        width: number;
        height: number;
    };
    rotation?: number;
}
interface TemporalSelector extends SupportedSelector {
    type: 'TemporalSelector';
    temporal: {
        startTime: number;
        endTime?: number;
    };
}
interface RotationSelector extends SupportedSelector {
    type: 'RotationSelector';
    rotation: number;
}
interface TemporalBoxSelector extends SupportedSelector {
    type: 'TemporalBoxSelector';
    spatial: {
        unit?: 'percent' | 'pixel';
        x: number;
        y: number;
        width: number;
        height: number;
    };
    rotation?: number;
    temporal: {
        startTime: number;
        endTime?: number;
    };
}
type SupportedSelectors = TemporalSelector | BoxSelector | TemporalBoxSelector | PointSelector | SvgSelector | RotationSelector;
type ParsedSelector = {
    selector: SupportedSelectors | null;
    selectors: SupportedSelectors[];
    iiifRenderingHints?: ImageApiSelector;
};

export type { BoxSelector as B, PointSelector as P, RotationSelector as R, SvgShapeType as S, TemporalSelector as T, SupportedSelector as a, SelectorStyle as b, SvgSelector as c, TemporalBoxSelector as d, SupportedSelectors as e, ParsedSelector as f };
