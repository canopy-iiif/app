import { ImageService, ImageSize, Service } from '@iiif/presentation-3';

/**
 * Size parameter
 *
 * Represents the {size} parameter of a IIIF image request.
 * see https://iiif.io/api/image/3.0/#42-size
 * Port of https://github.com/digirati-co-uk/iiif-net/blob/main/src/IIIF/IIIF/ImageApi/SizeParameter.cs
 */
type SizeParameter = {
    height?: number;
    width?: number;
    max: boolean;
    serialiseAsFull?: boolean;
    upscaled: boolean;
    confined: boolean;
    percentScale?: number;
    version?: 2 | 3;
};
/**
 * Region parameter
 *
 * Represents the {region} parameter of a IIIF image request.
 * see https://iiif.io/api/image/3.0/#41-region
 * Port of https://github.com/digirati-co-uk/iiif-net/blob/main/src/IIIF/IIIF/ImageApi/RegionParameter.cs
 */
type RegionParameter = {
    x?: number;
    y?: number;
    w?: number;
    h?: number;
    full?: boolean;
    square?: boolean;
    percent?: boolean;
};
/**
 * Rotation parameter
 *
 * Represents the {rotation} parameter of a IIIF image request.
 * see https://iiif.io/api/image/3.0/#43-rotation
 * Port of https://github.com/digirati-co-uk/iiif-net/blob/main/src/IIIF/IIIF/ImageApi/RotationParameter.cs
 */
type RotationParameter = {
    mirror?: boolean;
    angle: number;
};
type ImageServiceImageRequest = {
    type: 'base';
    scheme: string;
    server: string;
    prefix: string;
    identifier: string;
} | {
    type: 'info';
    scheme: string;
    server: string;
    prefix: string;
    identifier: string;
} | {
    type: 'image';
    scheme: string;
    server: string;
    prefix: string;
    identifier: string;
    region: RegionParameter;
    size: SizeParameter;
    rotation: RotationParameter;
    quality: string;
    format: string;
    originalPath: string;
};

/**
 * Get image server from ID.
 *
 * Normalises image service URLs to extract identity of the image server.
 *
 * @param url
 */
declare function parseImageServerFromId(url: string): string;

declare function parseImageServiceRequest(input: string, _prefix?: string): ImageServiceImageRequest;

declare function parseImageServiceUrl(canonicalId: string, prefix?: string): {
    scheme: string;
    server: string;
    path: string;
    prefix: string;
};

declare function parseRegionParameter(pathPart: string): RegionParameter;

declare function parseRotationParameter(pathPart: string): RotationParameter;

declare function parseSizeParameter(pathPart: string): SizeParameter;

declare const STANFORD_IIIF_IMAGE_COMPLIANCE_0 = "http://library.stanford.edu/iiif/image-api/compliance.html#level0";
declare const STANFORD_IIIF_IMAGE_COMPLIANCE_1 = "http://library.stanford.edu/iiif/image-api/compliance.html#level1";
declare const STANFORD_IIIF_IMAGE_COMPLIANCE_2 = "http://library.stanford.edu/iiif/image-api/compliance.html#level2";
declare const STANFORD_IIIF_IMAGE_CONFORMANCE_0 = "http://library.stanford.edu/iiif/image-api/conformance.html#level0";
declare const STANFORD_IIIF_IMAGE_CONFORMANCE_1 = "http://library.stanford.edu/iiif/image-api/conformance.html#level1";
declare const STANFORD_IIIF_IMAGE_CONFORMANCE_2 = "http://library.stanford.edu/iiif/image-api/conformance.html#level2";
declare const STANFORD_IIIF_1_IMAGE_COMPLIANCE_0 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level0";
declare const STANFORD_IIIF_1_IMAGE_COMPLIANCE_1 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level1";
declare const STANFORD_IIIF_1_IMAGE_COMPLIANCE_2 = "http://library.stanford.edu/iiif/image-api/1.1/compliance.html#level2";
declare const STANFORD_IIIF_1_IMAGE_CONFORMANCE_0 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level0";
declare const STANFORD_IIIF_1_IMAGE_CONFORMANCE_1 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level1";
declare const STANFORD_IIIF_1_IMAGE_CONFORMANCE_2 = "http://library.stanford.edu/iiif/image-api/1.1/conformance.html#level2";
declare const IIIF_1_IMAGE_LEVEL_0 = "http://iiif.io/api/image/1/level0.json";
declare const IIIF_1_IMAGE_LEVEL_0_PROFILE = "http://iiif.io/api/image/1/profiles/level0.json";
declare const IIIF_1_IMAGE_LEVEL_1 = "http://iiif.io/api/image/1/level1.json";
declare const IIIF_1_IMAGE_LEVEL_1_PROFILE = "http://iiif.io/api/image/1/profiles/level1.json";
declare const IIIF_1_IMAGE_LEVEL_2 = "http://iiif.io/api/image/1/level2.json";
declare const IIIF_1_IMAGE_LEVEL_2_PROFILE = "http://iiif.io/api/image/1/profiles/level2.json";
declare const IIIF_2_IMAGE_LEVEL_0 = "http://iiif.io/api/image/2/level0.json";
declare const IIIF_2_IMAGE_LEVEL_0_PROFILE = "http://iiif.io/api/image/2/profiles/level0.json";
declare const IIIF_2_IMAGE_LEVEL_1 = "http://iiif.io/api/image/2/level1.json";
declare const IIIF_2_IMAGE_LEVEL_1_PROFILE = "http://iiif.io/api/image/2/profiles/level1.json";
declare const IIIF_2_IMAGE_LEVEL_2 = "http://iiif.io/api/image/2/level2.json";
declare const IIIF_2_IMAGE_LEVEL_2_PROFILE = "http://iiif.io/api/image/2/profiles/level2.json";
declare const IIIF_3_IMAGE_LEVEL_0 = "level0";
declare const IIIF_3_IMAGE_LEVEL_1 = "level1";
declare const IIIF_3_IMAGE_LEVEL_2 = "level2";
declare const IIIF_2_IMAGE_LEVEL_0_NO_JSON = "http://iiif.io/api/image/2/level0";
declare const IIIF_2_IMAGE_LEVEL_1_NO_JSON = "http://iiif.io/api/image/2/level1";
declare const IIIF_2_IMAGE_LEVEL_2_NO_JSON = "http://iiif.io/api/image/2/level2";
declare const level2Support: string[];
declare const level1Support: string[];
declare const imageServiceProfiles: string[];
declare const level0Support: string[];
declare const onlyLevel0: string[];
type Profile = {
    extraFormats: string[];
    extraQualities: string[];
    extraFeatures: ExtraFeature[];
    maxArea?: number;
    maxHeight?: number;
    maxWidth?: number;
};
declare const level0: Profile;
declare const level1: Profile;
declare const level2: Profile;
declare const extraFeatures: readonly ["baseUriRedirect", "canonicalLinkHeader", "cors", "jsonldMediaType", "mirroring", "profileLinkHeader", "regionByPct", "regionByPx", "regionSquare", "rotationArbitrary", "rotationBy90s", "sizeByConfinedWh", "sizeByH", "sizeByPct", "sizeByW", "sizeByWh", "sizeUpscaling", "sizeByWhListed", "sizeByDistortedWh", "sizeByForcedWh"];
type ExtraFeature = typeof extraFeatures extends ReadonlyArray<infer ElementType> ? ElementType : never;

declare function combineProfiles(service: ImageService): Profile;

declare function levelToProfile(levelProfile: string): Profile;

declare function isLevel0(service: ImageService): boolean;

declare function supports(service: ImageService, req: Partial<Profile> & {
    exactSize?: {
        width?: number;
        height?: number;
    };
}): readonly [false, "Not a valid image service"] | readonly [false, `Max area is ${number}`] | readonly [false, `Max width is ${number}`] | readonly [false, `Max height is ${number}`] | readonly [false, `Missing features: ${string}`] | readonly [false, `Missing formats: ${string}`] | readonly [false, `Missing qualities: ${string}`] | readonly [true];

declare function supportsCustomSizes(service: ImageService): boolean;

declare function imageServiceSupportsFormat(imageService: ImageService, format: string): readonly [false, "Not a valid image service"] | readonly [false, `Max area is ${number}`] | readonly [false, `Max width is ${number}`] | readonly [false, `Max height is ${number}`] | readonly [false, `Missing features: ${string}`] | readonly [false, `Missing formats: ${string}`] | readonly [false, `Missing qualities: ${string}`] | readonly [true];

declare function imageServiceSupportsRequest(imageService: ImageService, request: ImageServiceImageRequest): readonly [true] | boolean[] | readonly [false, "Not a valid image service" | `Max area is ${number}` | `Max width is ${number}` | `Max height is ${number}` | `Missing features: ${string}` | `Missing formats: ${string}` | `Missing qualities: ${string}`];

declare function imageServiceRequestToString(req: ImageServiceImageRequest, service?: ImageService): string;

declare function imageServiceRequestInfo(req: ImageServiceImageRequest, service?: ImageService): string;

declare function regionParameterToString({ x, y, w, h, full, square, percent }: RegionParameter): string;

declare function rotationParameterToString(rotationParameter: RotationParameter): string;

declare function sizeParameterToString({ max, percentScale, upscaled, confined, width, height, serialiseAsFull, version, }: SizeParameter): string;

/**
 * Get canonical service url
 * Ensures an image service id contains the /info.json on the end of it.
 *
 * @param serviceId
 */
declare function canonicalServiceUrl(serviceId: string): string;

declare function createImageServiceRequest(imageService: ImageService): ImageServiceImageRequest;

/**
 * Extract fixed size scales
 *
 * Given a source width and height and a list of sizes of that same image,
 * it will return an ordered list of scales.
 *
 * @param width
 * @param height
 * @param sizes
 */
declare function extractFixedSizeScales(width: number, height: number, sizes: ImageSize[]): number[];

/**
 * Fixed sizes from scales.
 *
 * Given a width and height of an image and a list of scales, this will return
 * an ordered list of widths and heights of the image at those scales.
 *
 * @param width
 * @param height
 * @param scales
 */
declare function fixedSizesFromScales(width: number, height: number, scales: number[]): ImageSize[];

declare function getId(resource: any): any;

declare function getImageServiceLevel(service: ImageService): null | number;

/**
 * Given a resource, will return only the image services on that resource.
 *
 * @param resource
 */
declare function getImageServices(resource: {
    service?: Array<Service>;
}): ImageService[];

declare function getType(resource: any): any;

/**
 * Get image server from ID.
 *
 * Normalises image service URLs to extract identity of the image server.
 *
 * @param url
 */
declare function identifyImageServer(url: string): string;

declare function isImageService(service: any): service is ImageService;

declare function isImageServiceLevel(level: 0 | 1 | 2, imageService?: ImageService): boolean;

export { type ExtraFeature, IIIF_1_IMAGE_LEVEL_0, IIIF_1_IMAGE_LEVEL_0_PROFILE, IIIF_1_IMAGE_LEVEL_1, IIIF_1_IMAGE_LEVEL_1_PROFILE, IIIF_1_IMAGE_LEVEL_2, IIIF_1_IMAGE_LEVEL_2_PROFILE, IIIF_2_IMAGE_LEVEL_0, IIIF_2_IMAGE_LEVEL_0_NO_JSON, IIIF_2_IMAGE_LEVEL_0_PROFILE, IIIF_2_IMAGE_LEVEL_1, IIIF_2_IMAGE_LEVEL_1_NO_JSON, IIIF_2_IMAGE_LEVEL_1_PROFILE, IIIF_2_IMAGE_LEVEL_2, IIIF_2_IMAGE_LEVEL_2_NO_JSON, IIIF_2_IMAGE_LEVEL_2_PROFILE, IIIF_3_IMAGE_LEVEL_0, IIIF_3_IMAGE_LEVEL_1, IIIF_3_IMAGE_LEVEL_2, type ImageServiceImageRequest, type Profile, type RegionParameter, type RotationParameter, STANFORD_IIIF_1_IMAGE_COMPLIANCE_0, STANFORD_IIIF_1_IMAGE_COMPLIANCE_1, STANFORD_IIIF_1_IMAGE_COMPLIANCE_2, STANFORD_IIIF_1_IMAGE_CONFORMANCE_0, STANFORD_IIIF_1_IMAGE_CONFORMANCE_1, STANFORD_IIIF_1_IMAGE_CONFORMANCE_2, STANFORD_IIIF_IMAGE_COMPLIANCE_0, STANFORD_IIIF_IMAGE_COMPLIANCE_1, STANFORD_IIIF_IMAGE_COMPLIANCE_2, STANFORD_IIIF_IMAGE_CONFORMANCE_0, STANFORD_IIIF_IMAGE_CONFORMANCE_1, STANFORD_IIIF_IMAGE_CONFORMANCE_2, type SizeParameter, canonicalServiceUrl, combineProfiles, createImageServiceRequest, extraFeatures, extractFixedSizeScales, fixedSizesFromScales, getId, getImageServiceLevel, getImageServices, getType, identifyImageServer, imageServiceProfiles, imageServiceRequestInfo, imageServiceRequestToString, imageServiceSupportsFormat, imageServiceSupportsRequest, isImageService, isImageServiceLevel, isLevel0, level0, level0Support, level1, level1Support, level2, level2Support, levelToProfile, onlyLevel0, parseImageServerFromId, parseImageServiceRequest, parseImageServiceUrl, parseRegionParameter, parseRotationParameter, parseSizeParameter, regionParameterToString, rotationParameterToString, sizeParameterToString, supports, supportsCustomSizes };
