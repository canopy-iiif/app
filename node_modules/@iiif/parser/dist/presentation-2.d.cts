import * as Presentation3 from '@iiif/presentation-3';
import * as Presentation2 from '@iiif/presentation-2';
import { TraversableEntityTypes, Collection, Manifest, Canvas, AnnotationList, Sequence, Annotation, CommonContentResource, ChoiceEmbeddedContent, Range, Service, Layer, TraversalMap, OneOrMany, ContentResource, DescriptiveProperties, RightsProperties, LinkingProperties, Traversal } from '@iiif/presentation-2';

declare const types: TraversableEntityTypes[];
type TraverseOptions = {
    convertPropsToArray: boolean;
    mergeMemberProperties: boolean;
    allowUndefinedReturn: boolean;
};
declare function identifyResource(resource: any): TraversableEntityTypes;
declare class Traverse<T extends {
    Collection: any;
    Manifest: any;
    Canvas: any;
    AnnotationList: any;
    Sequence: any;
    Annotation: any;
    ContentResource: any;
    Choice: any;
    Range: any;
    Service: any;
    Layer: any;
} = {
    Collection: Collection;
    Manifest: Manifest;
    Canvas: Canvas;
    AnnotationList: AnnotationList;
    Sequence: Sequence;
    Annotation: Annotation;
    ContentResource: CommonContentResource;
    Choice: ChoiceEmbeddedContent;
    Range: Range;
    Service: Service;
    Layer: Layer;
}> {
    private traversals;
    private options;
    constructor(traversals: Partial<TraversalMap>, options?: Partial<TraverseOptions>);
    static all(traversal: (resource: any) => any): Traverse<{
        Collection: Collection;
        Manifest: Manifest;
        Canvas: Canvas;
        AnnotationList: AnnotationList;
        Sequence: Sequence;
        Annotation: Annotation;
        ContentResource: CommonContentResource;
        Choice: ChoiceEmbeddedContent;
        Range: Range;
        Service: Presentation3.Service;
        Layer: Layer;
    }>;
    traverseCollection(collection: Collection): T['Collection'];
    traverseCollectionItems(collection: Collection): Collection;
    traverseManifest(manifest: Manifest): T['Manifest'];
    traverseManifestItems(manifest: Manifest): Manifest;
    traverseSequence(sequence: Sequence): T['Sequence'];
    traverseSequenceItems(sequence: Sequence): Sequence;
    traverseCanvas(canvas: Canvas): T['Canvas'];
    traverseCanvasItems(canvas: Canvas): Canvas;
    traverseRange(range: Range): T['Range'];
    traverseRangeItems(range: Range): Range;
    traverseAnnotationList(annotationList: AnnotationList): T['AnnotationList'];
    traverseAnnotationListItems(annotationList: AnnotationList): AnnotationList;
    traverseAnnotation(annotation: Annotation): T['Annotation'];
    traverseAnnotationItems(annotation: Annotation): Annotation;
    traverseLayer(layer: Layer): T['Layer'];
    traverseLayerItems(layer: Layer): Layer;
    traverseChoice(choice: ChoiceEmbeddedContent): T['Choice'];
    traverseChoiceItems(choice: ChoiceEmbeddedContent): ChoiceEmbeddedContent;
    traverseService(service: Service): T['Service'];
    traverseContentResource(contentResource: CommonContentResource): T['ContentResource'];
    traverseUnknown(item: any): any;
    traverseImageResource(contentResource: OneOrMany<string | ContentResource>): any;
    traverseDescriptive<T extends Partial<DescriptiveProperties & RightsProperties>>(resource: T): T;
    traverseOneOrMoreServices(allServices: OneOrMany<any>): T["Service"] | T["Service"][] | undefined;
    traverseLinking<T extends Partial<LinkingProperties>>(resource: T): T;
    traverseOneOrManyType<T, Return = T>(object: T | T[], traversals: Array<Traversal<T>>): Return;
    traverseType<T, Return = T>(object: T, traversals: Array<Traversal<T>>): Return;
}

declare function convertLanguageMapping(inputLangProperty?: Presentation2.OneOrMany<Presentation2.LanguageProperty>, defaultLang?: string): Presentation3.InternationalString;
declare function getProfile(profile: any | any[]): string | undefined;
declare function getTypeFromContext(inputContexts: string | string[]): string | undefined;
declare const presentation2to3: Traverse<{
    Collection: Presentation3.Collection;
    Manifest: Presentation3.Manifest;
    Canvas: Presentation3.Canvas;
    AnnotationList: Presentation3.AnnotationPage;
    Sequence: Presentation3.Canvas[];
    Annotation: Presentation3.Annotation;
    ContentResource: Presentation3.ContentResource;
    Choice: Presentation3.ChoiceBody;
    Range: Presentation3.Range;
    Service: Presentation3.Service;
    Layer: Presentation3.AnnotationCollection;
}>;
declare function convertPresentation2(entity: any): Presentation3.Manifest | Presentation3.Collection;

export { Traverse, type TraverseOptions, convertLanguageMapping, convertPresentation2, getProfile, getTypeFromContext, identifyResource, presentation2to3, types };
