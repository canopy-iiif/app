name: Release and Template

on:
  # Run automatically only after the Tests workflow succeeds on main
  workflow_run:
    workflows: ["Tests"]
    types: [completed]
  # Allow manual runs if needed
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    # If triggered by workflow_run, require success on main; always allow manual dispatch
    if: >-
      ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main') }}
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.changesets.outputs.published }}
      publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # When triggered by workflow_run, check out the tested commit
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: https://registry.npmjs.org
          cache: "npm"
          scope: "@canopy-iiif"
          always-auth: true

      - name: Install dependencies
        run: |
          npm config set fund false
          npm config set audit false
          npm ci --no-audit --no-fund || npm install --no-audit --no-fund

      - name: Changesets release
        id: changesets
        uses: changesets/action@v1
        with:
          publish: npm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  template:
    needs: release
    if: needs.release.result == 'success' && needs.release.outputs.published == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org

      - name: Resolve published version
        id: ver
        run: |
          echo "APP=$(npm view @canopy-iiif/app version || echo '')" >> $GITHUB_OUTPUT

      - name: Prepare clean template
        env:
          APP_VERSION: ${{ steps.ver.outputs.APP }}
        run: |
          rm -rf dist-template
          mkdir -p dist-template
          rsync -a --delete \
            --exclude ".git" \
            --exclude "node_modules" \
            --exclude "AGENTS.md" \
            --exclude "tests" \
            --exclude ".husky" \
            --exclude "packages" \
            --exclude ".cache" \
            --exclude ".changeset" \
            --exclude ".github/workflows/template.yml" \
            --exclude ".github/workflows/retarget-pr-base.yml" \
            --exclude ".github/workflows/release-and-template.yml" \
            --exclude ".github/workflows/test.yml" \
            ./ dist-template/

          node -e "const fs=require('fs');const p='dist-template/package.json';const j=JSON.parse(fs.readFileSync(p,'utf8'));const vApp=process.env.APP_VERSION||'';if(j.dependencies){if(j.dependencies['@canopy-iiif/app']) j.dependencies['@canopy-iiif/app']=vApp?('^'+vApp):'*'; for(const k of Object.keys(j.dependencies)){ if(j.dependencies[k]==='workspace:*') j.dependencies[k]='*'; }} if(j.workspaces) delete j.workspaces; j.scripts={ build:'node app/scripts/canopy-build.mjs', dev:'node app/scripts/canopy-build.mjs' }; j.devDependencies=j.devDependencies||{}; delete j.devDependencies['@changesets/cli']; delete j.devDependencies.jest; delete j.devDependencies['@playwright/test']; delete j.devDependencies.husky; j.devDependencies.esbuild=j.devDependencies.esbuild||'^0.21.4'; j.devDependencies.tailwindcss=j.devDependencies.tailwindcss||'^3.4.10'; j.devDependencies['@tailwindcss/typography']=j.devDependencies['@tailwindcss/typography']||'^0.5.16'; fs.writeFileSync(p, JSON.stringify(j,null,2));"

          # Update Pages workflow verify step to use app entry verification
          node -e "const fs=require('fs'),p='dist-template/.github/workflows/deploy-pages.yml'; if(fs.existsSync(p)){ let y=fs.readFileSync(p,'utf8'); y=y.replace(/node packages\\/helpers\\/verify-build\\.js/g,'node app/scripts/canopy-build.mjs --verify'); fs.writeFileSync(p,y); }"

          # Inject Tailwind config and styles into the template under app/styles (opt-in preset, full layers)
          node <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const stylesDir = path.join('dist-template','app','styles');
          const tp = path.join(stylesDir,'tailwind.config.js');
          const cssp = path.join(stylesDir,'index.css');
          fs.mkdirSync(stylesDir,{recursive:true});
          fs.writeFileSync(tp, `// Default Canopy UI enabled. Remove lines below to disable.\nmodule.exports = {
            presets: [require('@canopy-iiif/app/ui/canopy-iiif-preset')],
            content: [
              './content/**/*.{mdx,html}',
              './site/**/*.html',
              './site/**/*.js',
              './packages/app/ui/**/*.{js,jsx,ts,tsx}',
              './packages/app/lib/iiif/components/**/*.{js,jsx}',
            ],
            theme: { extend: {} },
            corePlugins: {
              // preflight: false, // uncomment to disable base reset
            },
            plugins: [require('@canopy-iiif/app/ui/canopy-iiif-plugin')],
            safelist: [
              // Add dynamic classes here if needed
            ],
          };
          `,'utf8');
          fs.writeFileSync(cssp, `@tailwind base;
          @tailwind components;
          @tailwind utilities;

          /* Example component layer overrides */
          @layer components {
            .brand-link { @apply text-brand-600 hover:underline font-semibold; }
          }
          `,'utf8');
          NODE

      - name: Push to template repository (main)
        env:
          TEMPLATE_PUSH_TOKEN: ${{ secrets.TEMPLATE_PUSH_TOKEN }}
          TARGET_REPO: ${{ github.repository_owner }}/template
        run: |
          if [ -z "$TEMPLATE_PUSH_TOKEN" ]; then
            echo "Missing TEMPLATE_PUSH_TOKEN secret with repo write access to $TARGET_REPO" >&2
            exit 1
          fi
          cd dist-template
          git init -b main
          git config user.name "Mat Jordan"
          git config user.email "mat@northwestern.edu"
          git add .
          git commit -m "Update template from app/main"
          git remote add origin "https://x-access-token:${TEMPLATE_PUSH_TOKEN}@github.com/${TARGET_REPO}.git"
          git push --force origin main
